// This file was auto-generated by Fern from our API Definition.

package schematichq

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/schematichq/schematic-go/core"
)

type CountAPIKeysRequest struct {
	EnvironmentID      *string `json:"-" url:"environment_id,omitempty"`
	RequireEnvironment bool    `json:"-" url:"require_environment"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type CountAPIRequestsRequest struct {
	Q             *string `json:"-" url:"q,omitempty"`
	RequestType   *string `json:"-" url:"request_type,omitempty"`
	EnvironmentID *string `json:"-" url:"environment_id,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type CreateAPIKeyRequestBody struct {
	Description   *string `json:"description,omitempty" url:"-"`
	EnvironmentID *string `json:"environment_id,omitempty" url:"-"`
	Name          string  `json:"name" url:"-"`
}

type CreateEnvironmentRequestBody struct {
	EnvironmentType CreateEnvironmentRequestBodyEnvironmentType `json:"environment_type" url:"-"`
	Name            string                                      `json:"name" url:"-"`
}

type ListAPIKeysRequest struct {
	EnvironmentID      *string `json:"-" url:"environment_id,omitempty"`
	RequireEnvironment bool    `json:"-" url:"require_environment"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type ListAPIRequestsRequest struct {
	Q             *string `json:"-" url:"q,omitempty"`
	RequestType   *string `json:"-" url:"request_type,omitempty"`
	EnvironmentID *string `json:"-" url:"environment_id,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type ListEnvironmentsRequest struct {
	IDs []*string `json:"-" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type CountAPIKeysResponse struct {
	Data *CountResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *CountAPIKeysParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CountAPIKeysResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountAPIKeysResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CountAPIKeysResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountAPIKeysResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountAPIKeysResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CountAPIRequestsResponse struct {
	Data *CountResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *CountAPIRequestsParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CountAPIRequestsResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountAPIRequestsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CountAPIRequestsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountAPIRequestsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountAPIRequestsResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateAPIKeyResponse struct {
	Data *APIKeyCreateResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateAPIKeyResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateAPIKeyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateAPIKeyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateAPIKeyResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateAPIKeyResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateEnvironmentRequestBodyEnvironmentType string

const (
	CreateEnvironmentRequestBodyEnvironmentTypeDevelopment CreateEnvironmentRequestBodyEnvironmentType = "development"
	CreateEnvironmentRequestBodyEnvironmentTypeStaging     CreateEnvironmentRequestBodyEnvironmentType = "staging"
	CreateEnvironmentRequestBodyEnvironmentTypeProduction  CreateEnvironmentRequestBodyEnvironmentType = "production"
)

func NewCreateEnvironmentRequestBodyEnvironmentTypeFromString(s string) (CreateEnvironmentRequestBodyEnvironmentType, error) {
	switch s {
	case "development":
		return CreateEnvironmentRequestBodyEnvironmentTypeDevelopment, nil
	case "staging":
		return CreateEnvironmentRequestBodyEnvironmentTypeStaging, nil
	case "production":
		return CreateEnvironmentRequestBodyEnvironmentTypeProduction, nil
	}
	var t CreateEnvironmentRequestBodyEnvironmentType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CreateEnvironmentRequestBodyEnvironmentType) Ptr() *CreateEnvironmentRequestBodyEnvironmentType {
	return &c
}

type CreateEnvironmentResponse struct {
	Data *EnvironmentDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateEnvironmentResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateEnvironmentResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateEnvironmentResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateEnvironmentResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateEnvironmentResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DeleteAPIKeyResponse struct {
	Data *DeleteResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DeleteAPIKeyResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteAPIKeyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteAPIKeyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteAPIKeyResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteAPIKeyResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DeleteEnvironmentResponse struct {
	Data *DeleteResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DeleteEnvironmentResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteEnvironmentResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteEnvironmentResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteEnvironmentResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteEnvironmentResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type GetAPIKeyResponse struct {
	Data *APIKeyResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetAPIKeyResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetAPIKeyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetAPIKeyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetAPIKeyResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetAPIKeyResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetAPIRequestResponse struct {
	Data *APIKeyRequestResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetAPIRequestResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetAPIRequestResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetAPIRequestResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetAPIRequestResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetAPIRequestResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetEnvironmentResponse struct {
	Data *EnvironmentResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetEnvironmentResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetEnvironmentResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetEnvironmentResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetEnvironmentResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetEnvironmentResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ListAPIKeysResponse struct {
	// The returned resources
	Data []*APIKeyResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListAPIKeysParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListAPIKeysResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListAPIKeysResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListAPIKeysResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListAPIKeysResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListAPIKeysResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListAPIRequestsResponse struct {
	// The returned resources
	Data []*APIKeyRequestListResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListAPIRequestsParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListAPIRequestsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListAPIRequestsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListAPIRequestsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListAPIRequestsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListAPIRequestsResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListEnvironmentsResponse struct {
	// The returned resources
	Data []*EnvironmentResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListEnvironmentsParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListEnvironmentsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListEnvironmentsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListEnvironmentsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListEnvironmentsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListEnvironmentsResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type UpdateAPIKeyResponse struct {
	Data *APIKeyResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpdateAPIKeyResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateAPIKeyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateAPIKeyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateAPIKeyResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateAPIKeyResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateEnvironmentRequestBodyEnvironmentType string

const (
	UpdateEnvironmentRequestBodyEnvironmentTypeDevelopment UpdateEnvironmentRequestBodyEnvironmentType = "development"
	UpdateEnvironmentRequestBodyEnvironmentTypeStaging     UpdateEnvironmentRequestBodyEnvironmentType = "staging"
	UpdateEnvironmentRequestBodyEnvironmentTypeProduction  UpdateEnvironmentRequestBodyEnvironmentType = "production"
)

func NewUpdateEnvironmentRequestBodyEnvironmentTypeFromString(s string) (UpdateEnvironmentRequestBodyEnvironmentType, error) {
	switch s {
	case "development":
		return UpdateEnvironmentRequestBodyEnvironmentTypeDevelopment, nil
	case "staging":
		return UpdateEnvironmentRequestBodyEnvironmentTypeStaging, nil
	case "production":
		return UpdateEnvironmentRequestBodyEnvironmentTypeProduction, nil
	}
	var t UpdateEnvironmentRequestBodyEnvironmentType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UpdateEnvironmentRequestBodyEnvironmentType) Ptr() *UpdateEnvironmentRequestBodyEnvironmentType {
	return &u
}

type UpdateEnvironmentResponse struct {
	Data *EnvironmentResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpdateEnvironmentResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateEnvironmentResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateEnvironmentResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateEnvironmentResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateEnvironmentResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateAPIKeyRequestBody struct {
	Description *string `json:"description,omitempty" url:"-"`
	Name        *string `json:"name,omitempty" url:"-"`
}

type UpdateEnvironmentRequestBody struct {
	EnvironmentType *UpdateEnvironmentRequestBodyEnvironmentType `json:"environment_type,omitempty" url:"-"`
	Name            *string                                      `json:"name,omitempty" url:"-"`
}
