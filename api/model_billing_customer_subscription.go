/*
Schematic API

Schematic API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the BillingCustomerSubscription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BillingCustomerSubscription{}

// BillingCustomerSubscription struct for BillingCustomerSubscription
type BillingCustomerSubscription struct {
	ExpiredAt  NullableTime `json:"expired_at,omitempty"`
	TotalPrice float32      `json:"total_price"`
}

type _BillingCustomerSubscription BillingCustomerSubscription

// NewBillingCustomerSubscription instantiates a new BillingCustomerSubscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillingCustomerSubscription(totalPrice float32) *BillingCustomerSubscription {
	this := BillingCustomerSubscription{}
	this.TotalPrice = totalPrice
	return &this
}

// NewBillingCustomerSubscriptionWithDefaults instantiates a new BillingCustomerSubscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillingCustomerSubscriptionWithDefaults() *BillingCustomerSubscription {
	this := BillingCustomerSubscription{}
	return &this
}

// GetExpiredAt returns the ExpiredAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BillingCustomerSubscription) GetExpiredAt() time.Time {
	if o == nil || IsNil(o.ExpiredAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ExpiredAt.Get()
}

// GetExpiredAtOk returns a tuple with the ExpiredAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BillingCustomerSubscription) GetExpiredAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpiredAt.Get(), o.ExpiredAt.IsSet()
}

// HasExpiredAt returns a boolean if a field has been set.
func (o *BillingCustomerSubscription) HasExpiredAt() bool {
	if o != nil && o.ExpiredAt.IsSet() {
		return true
	}

	return false
}

// SetExpiredAt gets a reference to the given NullableTime and assigns it to the ExpiredAt field.
func (o *BillingCustomerSubscription) SetExpiredAt(v time.Time) {
	o.ExpiredAt.Set(&v)
}

// SetExpiredAtNil sets the value for ExpiredAt to be an explicit nil
func (o *BillingCustomerSubscription) SetExpiredAtNil() {
	o.ExpiredAt.Set(nil)
}

// UnsetExpiredAt ensures that no value is present for ExpiredAt, not even an explicit nil
func (o *BillingCustomerSubscription) UnsetExpiredAt() {
	o.ExpiredAt.Unset()
}

// GetTotalPrice returns the TotalPrice field value
func (o *BillingCustomerSubscription) GetTotalPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalPrice
}

// GetTotalPriceOk returns a tuple with the TotalPrice field value
// and a boolean to check if the value has been set.
func (o *BillingCustomerSubscription) GetTotalPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalPrice, true
}

// SetTotalPrice sets field value
func (o *BillingCustomerSubscription) SetTotalPrice(v float32) {
	o.TotalPrice = v
}

func (o BillingCustomerSubscription) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BillingCustomerSubscription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ExpiredAt.IsSet() {
		toSerialize["expired_at"] = o.ExpiredAt.Get()
	}
	toSerialize["total_price"] = o.TotalPrice
	return toSerialize, nil
}

func (o *BillingCustomerSubscription) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"total_price",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBillingCustomerSubscription := _BillingCustomerSubscription{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBillingCustomerSubscription)

	if err != nil {
		return err
	}

	*o = BillingCustomerSubscription(varBillingCustomerSubscription)

	return err
}

type NullableBillingCustomerSubscription struct {
	value *BillingCustomerSubscription
	isSet bool
}

func (v NullableBillingCustomerSubscription) Get() *BillingCustomerSubscription {
	return v.value
}

func (v *NullableBillingCustomerSubscription) Set(val *BillingCustomerSubscription) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingCustomerSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingCustomerSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingCustomerSubscription(val *BillingCustomerSubscription) *NullableBillingCustomerSubscription {
	return &NullableBillingCustomerSubscription{value: val, isSet: true}
}

func (v NullableBillingCustomerSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingCustomerSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
