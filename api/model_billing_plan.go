/*
Schematic API

Schematic API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// checks if the BillingPlan type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BillingPlan{}

// BillingPlan struct for BillingPlan
type BillingPlan struct {
	Description          NullableString `json:"description,omitempty"`
	Id                   string         `json:"id"`
	ImageUrl             NullableString `json:"image_url,omitempty"`
	Name                 string         `json:"name"`
	PlanPeriod           NullableString `json:"plan_period,omitempty"`
	PlanPrice            NullableInt32  `json:"plan_price,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BillingPlan BillingPlan

// NewBillingPlan instantiates a new BillingPlan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillingPlan(id string, name string) *BillingPlan {
	this := BillingPlan{}
	this.Id = id
	this.Name = name
	return &this
}

// NewBillingPlanWithDefaults instantiates a new BillingPlan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillingPlanWithDefaults() *BillingPlan {
	this := BillingPlan{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BillingPlan) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BillingPlan) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *BillingPlan) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *BillingPlan) SetDescription(v string) {
	o.Description.Set(&v)
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *BillingPlan) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *BillingPlan) UnsetDescription() {
	o.Description.Unset()
}

// GetId returns the Id field value
func (o *BillingPlan) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BillingPlan) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BillingPlan) SetId(v string) {
	o.Id = v
}

// GetImageUrl returns the ImageUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BillingPlan) GetImageUrl() string {
	if o == nil || IsNil(o.ImageUrl.Get()) {
		var ret string
		return ret
	}
	return *o.ImageUrl.Get()
}

// GetImageUrlOk returns a tuple with the ImageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BillingPlan) GetImageUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImageUrl.Get(), o.ImageUrl.IsSet()
}

// HasImageUrl returns a boolean if a field has been set.
func (o *BillingPlan) HasImageUrl() bool {
	if o != nil && o.ImageUrl.IsSet() {
		return true
	}

	return false
}

// SetImageUrl gets a reference to the given NullableString and assigns it to the ImageUrl field.
func (o *BillingPlan) SetImageUrl(v string) {
	o.ImageUrl.Set(&v)
}

// SetImageUrlNil sets the value for ImageUrl to be an explicit nil
func (o *BillingPlan) SetImageUrlNil() {
	o.ImageUrl.Set(nil)
}

// UnsetImageUrl ensures that no value is present for ImageUrl, not even an explicit nil
func (o *BillingPlan) UnsetImageUrl() {
	o.ImageUrl.Unset()
}

// GetName returns the Name field value
func (o *BillingPlan) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BillingPlan) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BillingPlan) SetName(v string) {
	o.Name = v
}

// GetPlanPeriod returns the PlanPeriod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BillingPlan) GetPlanPeriod() string {
	if o == nil || IsNil(o.PlanPeriod.Get()) {
		var ret string
		return ret
	}
	return *o.PlanPeriod.Get()
}

// GetPlanPeriodOk returns a tuple with the PlanPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BillingPlan) GetPlanPeriodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlanPeriod.Get(), o.PlanPeriod.IsSet()
}

// HasPlanPeriod returns a boolean if a field has been set.
func (o *BillingPlan) HasPlanPeriod() bool {
	if o != nil && o.PlanPeriod.IsSet() {
		return true
	}

	return false
}

// SetPlanPeriod gets a reference to the given NullableString and assigns it to the PlanPeriod field.
func (o *BillingPlan) SetPlanPeriod(v string) {
	o.PlanPeriod.Set(&v)
}

// SetPlanPeriodNil sets the value for PlanPeriod to be an explicit nil
func (o *BillingPlan) SetPlanPeriodNil() {
	o.PlanPeriod.Set(nil)
}

// UnsetPlanPeriod ensures that no value is present for PlanPeriod, not even an explicit nil
func (o *BillingPlan) UnsetPlanPeriod() {
	o.PlanPeriod.Unset()
}

// GetPlanPrice returns the PlanPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BillingPlan) GetPlanPrice() int32 {
	if o == nil || IsNil(o.PlanPrice.Get()) {
		var ret int32
		return ret
	}
	return *o.PlanPrice.Get()
}

// GetPlanPriceOk returns a tuple with the PlanPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BillingPlan) GetPlanPriceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlanPrice.Get(), o.PlanPrice.IsSet()
}

// HasPlanPrice returns a boolean if a field has been set.
func (o *BillingPlan) HasPlanPrice() bool {
	if o != nil && o.PlanPrice.IsSet() {
		return true
	}

	return false
}

// SetPlanPrice gets a reference to the given NullableInt32 and assigns it to the PlanPrice field.
func (o *BillingPlan) SetPlanPrice(v int32) {
	o.PlanPrice.Set(&v)
}

// SetPlanPriceNil sets the value for PlanPrice to be an explicit nil
func (o *BillingPlan) SetPlanPriceNil() {
	o.PlanPrice.Set(nil)
}

// UnsetPlanPrice ensures that no value is present for PlanPrice, not even an explicit nil
func (o *BillingPlan) UnsetPlanPrice() {
	o.PlanPrice.Unset()
}

func (o BillingPlan) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BillingPlan) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	toSerialize["id"] = o.Id
	if o.ImageUrl.IsSet() {
		toSerialize["image_url"] = o.ImageUrl.Get()
	}
	toSerialize["name"] = o.Name
	if o.PlanPeriod.IsSet() {
		toSerialize["plan_period"] = o.PlanPeriod.Get()
	}
	if o.PlanPrice.IsSet() {
		toSerialize["plan_price"] = o.PlanPrice.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BillingPlan) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBillingPlan := _BillingPlan{}

	err = json.Unmarshal(data, &varBillingPlan)

	if err != nil {
		return err
	}

	*o = BillingPlan(varBillingPlan)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "id")
		delete(additionalProperties, "image_url")
		delete(additionalProperties, "name")
		delete(additionalProperties, "plan_period")
		delete(additionalProperties, "plan_price")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBillingPlan struct {
	value *BillingPlan
	isSet bool
}

func (v NullableBillingPlan) Get() *BillingPlan {
	return v.value
}

func (v *NullableBillingPlan) Set(val *BillingPlan) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingPlan) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingPlan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingPlan(val *BillingPlan) *NullableBillingPlan {
	return &NullableBillingPlan{value: val, isSet: true}
}

func (v NullableBillingPlan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingPlan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
