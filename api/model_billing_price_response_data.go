/*
Schematic API

Schematic API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// checks if the BillingPriceResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BillingPriceResponseData{}

// BillingPriceResponseData struct for BillingPriceResponseData
type BillingPriceResponseData struct {
	ExternalPriceId      string `json:"external_price_id"`
	Id                   string `json:"id"`
	Interval             string `json:"interval"`
	Price                int32  `json:"price"`
	AdditionalProperties map[string]interface{}
}

type _BillingPriceResponseData BillingPriceResponseData

// NewBillingPriceResponseData instantiates a new BillingPriceResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillingPriceResponseData(externalPriceId string, id string, interval string, price int32) *BillingPriceResponseData {
	this := BillingPriceResponseData{}
	this.ExternalPriceId = externalPriceId
	this.Id = id
	this.Interval = interval
	this.Price = price
	return &this
}

// NewBillingPriceResponseDataWithDefaults instantiates a new BillingPriceResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillingPriceResponseDataWithDefaults() *BillingPriceResponseData {
	this := BillingPriceResponseData{}
	return &this
}

// GetExternalPriceId returns the ExternalPriceId field value
func (o *BillingPriceResponseData) GetExternalPriceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExternalPriceId
}

// GetExternalPriceIdOk returns a tuple with the ExternalPriceId field value
// and a boolean to check if the value has been set.
func (o *BillingPriceResponseData) GetExternalPriceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExternalPriceId, true
}

// SetExternalPriceId sets field value
func (o *BillingPriceResponseData) SetExternalPriceId(v string) {
	o.ExternalPriceId = v
}

// GetId returns the Id field value
func (o *BillingPriceResponseData) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BillingPriceResponseData) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BillingPriceResponseData) SetId(v string) {
	o.Id = v
}

// GetInterval returns the Interval field value
func (o *BillingPriceResponseData) GetInterval() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value
// and a boolean to check if the value has been set.
func (o *BillingPriceResponseData) GetIntervalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Interval, true
}

// SetInterval sets field value
func (o *BillingPriceResponseData) SetInterval(v string) {
	o.Interval = v
}

// GetPrice returns the Price field value
func (o *BillingPriceResponseData) GetPrice() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *BillingPriceResponseData) GetPriceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *BillingPriceResponseData) SetPrice(v int32) {
	o.Price = v
}

func (o BillingPriceResponseData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BillingPriceResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["external_price_id"] = o.ExternalPriceId
	toSerialize["id"] = o.Id
	toSerialize["interval"] = o.Interval
	toSerialize["price"] = o.Price

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BillingPriceResponseData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"external_price_id",
		"id",
		"interval",
		"price",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBillingPriceResponseData := _BillingPriceResponseData{}

	err = json.Unmarshal(data, &varBillingPriceResponseData)

	if err != nil {
		return err
	}

	*o = BillingPriceResponseData(varBillingPriceResponseData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "external_price_id")
		delete(additionalProperties, "id")
		delete(additionalProperties, "interval")
		delete(additionalProperties, "price")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBillingPriceResponseData struct {
	value *BillingPriceResponseData
	isSet bool
}

func (v NullableBillingPriceResponseData) Get() *BillingPriceResponseData {
	return v.value
}

func (v *NullableBillingPriceResponseData) Set(val *BillingPriceResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingPriceResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingPriceResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingPriceResponseData(val *BillingPriceResponseData) *NullableBillingPriceResponseData {
	return &NullableBillingPriceResponseData{value: val, isSet: true}
}

func (v NullableBillingPriceResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingPriceResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
