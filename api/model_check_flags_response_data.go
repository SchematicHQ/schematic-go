/*
Schematic API

Schematic API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CheckFlagsResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckFlagsResponseData{}

// CheckFlagsResponseData The created resource
type CheckFlagsResponseData struct {
	Flags []CheckFlagOutputWithFlagKey `json:"flags"`
}

type _CheckFlagsResponseData CheckFlagsResponseData

// NewCheckFlagsResponseData instantiates a new CheckFlagsResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckFlagsResponseData(flags []CheckFlagOutputWithFlagKey) *CheckFlagsResponseData {
	this := CheckFlagsResponseData{}
	this.Flags = flags
	return &this
}

// NewCheckFlagsResponseDataWithDefaults instantiates a new CheckFlagsResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckFlagsResponseDataWithDefaults() *CheckFlagsResponseData {
	this := CheckFlagsResponseData{}
	return &this
}

// GetFlags returns the Flags field value
func (o *CheckFlagsResponseData) GetFlags() []CheckFlagOutputWithFlagKey {
	if o == nil {
		var ret []CheckFlagOutputWithFlagKey
		return ret
	}

	return o.Flags
}

// GetFlagsOk returns a tuple with the Flags field value
// and a boolean to check if the value has been set.
func (o *CheckFlagsResponseData) GetFlagsOk() ([]CheckFlagOutputWithFlagKey, bool) {
	if o == nil {
		return nil, false
	}
	return o.Flags, true
}

// SetFlags sets field value
func (o *CheckFlagsResponseData) SetFlags(v []CheckFlagOutputWithFlagKey) {
	o.Flags = v
}

func (o CheckFlagsResponseData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckFlagsResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["flags"] = o.Flags
	return toSerialize, nil
}

func (o *CheckFlagsResponseData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"flags",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCheckFlagsResponseData := _CheckFlagsResponseData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCheckFlagsResponseData)

	if err != nil {
		return err
	}

	*o = CheckFlagsResponseData(varCheckFlagsResponseData)

	return err
}

type NullableCheckFlagsResponseData struct {
	value *CheckFlagsResponseData
	isSet bool
}

func (v NullableCheckFlagsResponseData) Get() *CheckFlagsResponseData {
	return v.value
}

func (v *NullableCheckFlagsResponseData) Set(val *CheckFlagsResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckFlagsResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckFlagsResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckFlagsResponseData(val *CheckFlagsResponseData) *NullableCheckFlagsResponseData {
	return &NullableCheckFlagsResponseData{value: val, isSet: true}
}

func (v NullableCheckFlagsResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckFlagsResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
