/*
Schematic API

Schematic API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the CompanyPlanDetailResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompanyPlanDetailResponseData{}

// CompanyPlanDetailResponseData struct for CompanyPlanDetailResponseData
type CompanyPlanDetailResponseData struct {
	AudienceType         NullableString                    `json:"audience_type,omitempty"`
	BillingProduct       *BillingProductDetailResponseData `json:"billing_product,omitempty"`
	CompanyCount         int32                             `json:"company_count"`
	CreatedAt            time.Time                         `json:"created_at"`
	Current              bool                              `json:"current"`
	Description          string                            `json:"description"`
	Entitlements         []PlanEntitlementResponseData     `json:"entitlements"`
	Features             []FeatureDetailResponseData       `json:"features"`
	Icon                 string                            `json:"icon"`
	Id                   string                            `json:"id"`
	MonthlyPrice         *BillingPriceResponseData         `json:"monthly_price,omitempty"`
	Name                 string                            `json:"name"`
	PlanType             string                            `json:"plan_type"`
	UpdatedAt            time.Time                         `json:"updated_at"`
	Valid                bool                              `json:"valid"`
	YearlyPrice          *BillingPriceResponseData         `json:"yearly_price,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CompanyPlanDetailResponseData CompanyPlanDetailResponseData

// NewCompanyPlanDetailResponseData instantiates a new CompanyPlanDetailResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyPlanDetailResponseData(companyCount int32, createdAt time.Time, current bool, description string, entitlements []PlanEntitlementResponseData, features []FeatureDetailResponseData, icon string, id string, name string, planType string, updatedAt time.Time, valid bool) *CompanyPlanDetailResponseData {
	this := CompanyPlanDetailResponseData{}
	this.CompanyCount = companyCount
	this.CreatedAt = createdAt
	this.Current = current
	this.Description = description
	this.Entitlements = entitlements
	this.Features = features
	this.Icon = icon
	this.Id = id
	this.Name = name
	this.PlanType = planType
	this.UpdatedAt = updatedAt
	this.Valid = valid
	return &this
}

// NewCompanyPlanDetailResponseDataWithDefaults instantiates a new CompanyPlanDetailResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyPlanDetailResponseDataWithDefaults() *CompanyPlanDetailResponseData {
	this := CompanyPlanDetailResponseData{}
	return &this
}

// GetAudienceType returns the AudienceType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompanyPlanDetailResponseData) GetAudienceType() string {
	if o == nil || IsNil(o.AudienceType.Get()) {
		var ret string
		return ret
	}
	return *o.AudienceType.Get()
}

// GetAudienceTypeOk returns a tuple with the AudienceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompanyPlanDetailResponseData) GetAudienceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AudienceType.Get(), o.AudienceType.IsSet()
}

// HasAudienceType returns a boolean if a field has been set.
func (o *CompanyPlanDetailResponseData) HasAudienceType() bool {
	if o != nil && o.AudienceType.IsSet() {
		return true
	}

	return false
}

// SetAudienceType gets a reference to the given NullableString and assigns it to the AudienceType field.
func (o *CompanyPlanDetailResponseData) SetAudienceType(v string) {
	o.AudienceType.Set(&v)
}

// SetAudienceTypeNil sets the value for AudienceType to be an explicit nil
func (o *CompanyPlanDetailResponseData) SetAudienceTypeNil() {
	o.AudienceType.Set(nil)
}

// UnsetAudienceType ensures that no value is present for AudienceType, not even an explicit nil
func (o *CompanyPlanDetailResponseData) UnsetAudienceType() {
	o.AudienceType.Unset()
}

// GetBillingProduct returns the BillingProduct field value if set, zero value otherwise.
func (o *CompanyPlanDetailResponseData) GetBillingProduct() BillingProductDetailResponseData {
	if o == nil || IsNil(o.BillingProduct) {
		var ret BillingProductDetailResponseData
		return ret
	}
	return *o.BillingProduct
}

// GetBillingProductOk returns a tuple with the BillingProduct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyPlanDetailResponseData) GetBillingProductOk() (*BillingProductDetailResponseData, bool) {
	if o == nil || IsNil(o.BillingProduct) {
		return nil, false
	}
	return o.BillingProduct, true
}

// HasBillingProduct returns a boolean if a field has been set.
func (o *CompanyPlanDetailResponseData) HasBillingProduct() bool {
	if o != nil && !IsNil(o.BillingProduct) {
		return true
	}

	return false
}

// SetBillingProduct gets a reference to the given BillingProductDetailResponseData and assigns it to the BillingProduct field.
func (o *CompanyPlanDetailResponseData) SetBillingProduct(v BillingProductDetailResponseData) {
	o.BillingProduct = &v
}

// GetCompanyCount returns the CompanyCount field value
func (o *CompanyPlanDetailResponseData) GetCompanyCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CompanyCount
}

// GetCompanyCountOk returns a tuple with the CompanyCount field value
// and a boolean to check if the value has been set.
func (o *CompanyPlanDetailResponseData) GetCompanyCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompanyCount, true
}

// SetCompanyCount sets field value
func (o *CompanyPlanDetailResponseData) SetCompanyCount(v int32) {
	o.CompanyCount = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *CompanyPlanDetailResponseData) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *CompanyPlanDetailResponseData) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *CompanyPlanDetailResponseData) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetCurrent returns the Current field value
func (o *CompanyPlanDetailResponseData) GetCurrent() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Current
}

// GetCurrentOk returns a tuple with the Current field value
// and a boolean to check if the value has been set.
func (o *CompanyPlanDetailResponseData) GetCurrentOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Current, true
}

// SetCurrent sets field value
func (o *CompanyPlanDetailResponseData) SetCurrent(v bool) {
	o.Current = v
}

// GetDescription returns the Description field value
func (o *CompanyPlanDetailResponseData) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *CompanyPlanDetailResponseData) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *CompanyPlanDetailResponseData) SetDescription(v string) {
	o.Description = v
}

// GetEntitlements returns the Entitlements field value
func (o *CompanyPlanDetailResponseData) GetEntitlements() []PlanEntitlementResponseData {
	if o == nil {
		var ret []PlanEntitlementResponseData
		return ret
	}

	return o.Entitlements
}

// GetEntitlementsOk returns a tuple with the Entitlements field value
// and a boolean to check if the value has been set.
func (o *CompanyPlanDetailResponseData) GetEntitlementsOk() ([]PlanEntitlementResponseData, bool) {
	if o == nil {
		return nil, false
	}
	return o.Entitlements, true
}

// SetEntitlements sets field value
func (o *CompanyPlanDetailResponseData) SetEntitlements(v []PlanEntitlementResponseData) {
	o.Entitlements = v
}

// GetFeatures returns the Features field value
func (o *CompanyPlanDetailResponseData) GetFeatures() []FeatureDetailResponseData {
	if o == nil {
		var ret []FeatureDetailResponseData
		return ret
	}

	return o.Features
}

// GetFeaturesOk returns a tuple with the Features field value
// and a boolean to check if the value has been set.
func (o *CompanyPlanDetailResponseData) GetFeaturesOk() ([]FeatureDetailResponseData, bool) {
	if o == nil {
		return nil, false
	}
	return o.Features, true
}

// SetFeatures sets field value
func (o *CompanyPlanDetailResponseData) SetFeatures(v []FeatureDetailResponseData) {
	o.Features = v
}

// GetIcon returns the Icon field value
func (o *CompanyPlanDetailResponseData) GetIcon() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Icon
}

// GetIconOk returns a tuple with the Icon field value
// and a boolean to check if the value has been set.
func (o *CompanyPlanDetailResponseData) GetIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Icon, true
}

// SetIcon sets field value
func (o *CompanyPlanDetailResponseData) SetIcon(v string) {
	o.Icon = v
}

// GetId returns the Id field value
func (o *CompanyPlanDetailResponseData) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CompanyPlanDetailResponseData) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CompanyPlanDetailResponseData) SetId(v string) {
	o.Id = v
}

// GetMonthlyPrice returns the MonthlyPrice field value if set, zero value otherwise.
func (o *CompanyPlanDetailResponseData) GetMonthlyPrice() BillingPriceResponseData {
	if o == nil || IsNil(o.MonthlyPrice) {
		var ret BillingPriceResponseData
		return ret
	}
	return *o.MonthlyPrice
}

// GetMonthlyPriceOk returns a tuple with the MonthlyPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyPlanDetailResponseData) GetMonthlyPriceOk() (*BillingPriceResponseData, bool) {
	if o == nil || IsNil(o.MonthlyPrice) {
		return nil, false
	}
	return o.MonthlyPrice, true
}

// HasMonthlyPrice returns a boolean if a field has been set.
func (o *CompanyPlanDetailResponseData) HasMonthlyPrice() bool {
	if o != nil && !IsNil(o.MonthlyPrice) {
		return true
	}

	return false
}

// SetMonthlyPrice gets a reference to the given BillingPriceResponseData and assigns it to the MonthlyPrice field.
func (o *CompanyPlanDetailResponseData) SetMonthlyPrice(v BillingPriceResponseData) {
	o.MonthlyPrice = &v
}

// GetName returns the Name field value
func (o *CompanyPlanDetailResponseData) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CompanyPlanDetailResponseData) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CompanyPlanDetailResponseData) SetName(v string) {
	o.Name = v
}

// GetPlanType returns the PlanType field value
func (o *CompanyPlanDetailResponseData) GetPlanType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PlanType
}

// GetPlanTypeOk returns a tuple with the PlanType field value
// and a boolean to check if the value has been set.
func (o *CompanyPlanDetailResponseData) GetPlanTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlanType, true
}

// SetPlanType sets field value
func (o *CompanyPlanDetailResponseData) SetPlanType(v string) {
	o.PlanType = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *CompanyPlanDetailResponseData) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *CompanyPlanDetailResponseData) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *CompanyPlanDetailResponseData) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetValid returns the Valid field value
func (o *CompanyPlanDetailResponseData) GetValid() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Valid
}

// GetValidOk returns a tuple with the Valid field value
// and a boolean to check if the value has been set.
func (o *CompanyPlanDetailResponseData) GetValidOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Valid, true
}

// SetValid sets field value
func (o *CompanyPlanDetailResponseData) SetValid(v bool) {
	o.Valid = v
}

// GetYearlyPrice returns the YearlyPrice field value if set, zero value otherwise.
func (o *CompanyPlanDetailResponseData) GetYearlyPrice() BillingPriceResponseData {
	if o == nil || IsNil(o.YearlyPrice) {
		var ret BillingPriceResponseData
		return ret
	}
	return *o.YearlyPrice
}

// GetYearlyPriceOk returns a tuple with the YearlyPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyPlanDetailResponseData) GetYearlyPriceOk() (*BillingPriceResponseData, bool) {
	if o == nil || IsNil(o.YearlyPrice) {
		return nil, false
	}
	return o.YearlyPrice, true
}

// HasYearlyPrice returns a boolean if a field has been set.
func (o *CompanyPlanDetailResponseData) HasYearlyPrice() bool {
	if o != nil && !IsNil(o.YearlyPrice) {
		return true
	}

	return false
}

// SetYearlyPrice gets a reference to the given BillingPriceResponseData and assigns it to the YearlyPrice field.
func (o *CompanyPlanDetailResponseData) SetYearlyPrice(v BillingPriceResponseData) {
	o.YearlyPrice = &v
}

func (o CompanyPlanDetailResponseData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompanyPlanDetailResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AudienceType.IsSet() {
		toSerialize["audience_type"] = o.AudienceType.Get()
	}
	if !IsNil(o.BillingProduct) {
		toSerialize["billing_product"] = o.BillingProduct
	}
	toSerialize["company_count"] = o.CompanyCount
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["current"] = o.Current
	toSerialize["description"] = o.Description
	toSerialize["entitlements"] = o.Entitlements
	toSerialize["features"] = o.Features
	toSerialize["icon"] = o.Icon
	toSerialize["id"] = o.Id
	if !IsNil(o.MonthlyPrice) {
		toSerialize["monthly_price"] = o.MonthlyPrice
	}
	toSerialize["name"] = o.Name
	toSerialize["plan_type"] = o.PlanType
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["valid"] = o.Valid
	if !IsNil(o.YearlyPrice) {
		toSerialize["yearly_price"] = o.YearlyPrice
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CompanyPlanDetailResponseData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"company_count",
		"created_at",
		"current",
		"description",
		"entitlements",
		"features",
		"icon",
		"id",
		"name",
		"plan_type",
		"updated_at",
		"valid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompanyPlanDetailResponseData := _CompanyPlanDetailResponseData{}

	err = json.Unmarshal(data, &varCompanyPlanDetailResponseData)

	if err != nil {
		return err
	}

	*o = CompanyPlanDetailResponseData(varCompanyPlanDetailResponseData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "audience_type")
		delete(additionalProperties, "billing_product")
		delete(additionalProperties, "company_count")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "current")
		delete(additionalProperties, "description")
		delete(additionalProperties, "entitlements")
		delete(additionalProperties, "features")
		delete(additionalProperties, "icon")
		delete(additionalProperties, "id")
		delete(additionalProperties, "monthly_price")
		delete(additionalProperties, "name")
		delete(additionalProperties, "plan_type")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "valid")
		delete(additionalProperties, "yearly_price")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCompanyPlanDetailResponseData struct {
	value *CompanyPlanDetailResponseData
	isSet bool
}

func (v NullableCompanyPlanDetailResponseData) Get() *CompanyPlanDetailResponseData {
	return v.value
}

func (v *NullableCompanyPlanDetailResponseData) Set(val *CompanyPlanDetailResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyPlanDetailResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyPlanDetailResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyPlanDetailResponseData(val *CompanyPlanDetailResponseData) *NullableCompanyPlanDetailResponseData {
	return &NullableCompanyPlanDetailResponseData{value: val, isSet: true}
}

func (v NullableCompanyPlanDetailResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyPlanDetailResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
