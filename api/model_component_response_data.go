/*
Schematic API

Schematic API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the ComponentResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComponentResponseData{}

// ComponentResponseData The updated resource
type ComponentResponseData struct {
	Ast                  *map[string]float32 `json:"ast,omitempty"`
	CreatedAt            time.Time           `json:"created_at"`
	Id                   string              `json:"id"`
	Name                 string              `json:"name"`
	State                string              `json:"state"`
	Type                 string              `json:"type"`
	UpdatedAt            time.Time           `json:"updated_at"`
	AdditionalProperties map[string]interface{}
}

type _ComponentResponseData ComponentResponseData

// NewComponentResponseData instantiates a new ComponentResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComponentResponseData(createdAt time.Time, id string, name string, state string, type_ string, updatedAt time.Time) *ComponentResponseData {
	this := ComponentResponseData{}
	this.CreatedAt = createdAt
	this.Id = id
	this.Name = name
	this.State = state
	this.Type = type_
	this.UpdatedAt = updatedAt
	return &this
}

// NewComponentResponseDataWithDefaults instantiates a new ComponentResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComponentResponseDataWithDefaults() *ComponentResponseData {
	this := ComponentResponseData{}
	return &this
}

// GetAst returns the Ast field value if set, zero value otherwise.
func (o *ComponentResponseData) GetAst() map[string]float32 {
	if o == nil || IsNil(o.Ast) {
		var ret map[string]float32
		return ret
	}
	return *o.Ast
}

// GetAstOk returns a tuple with the Ast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComponentResponseData) GetAstOk() (*map[string]float32, bool) {
	if o == nil || IsNil(o.Ast) {
		return nil, false
	}
	return o.Ast, true
}

// HasAst returns a boolean if a field has been set.
func (o *ComponentResponseData) HasAst() bool {
	if o != nil && !IsNil(o.Ast) {
		return true
	}

	return false
}

// SetAst gets a reference to the given map[string]float32 and assigns it to the Ast field.
func (o *ComponentResponseData) SetAst(v map[string]float32) {
	o.Ast = &v
}

// GetCreatedAt returns the CreatedAt field value
func (o *ComponentResponseData) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ComponentResponseData) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ComponentResponseData) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetId returns the Id field value
func (o *ComponentResponseData) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ComponentResponseData) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ComponentResponseData) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ComponentResponseData) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ComponentResponseData) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ComponentResponseData) SetName(v string) {
	o.Name = v
}

// GetState returns the State field value
func (o *ComponentResponseData) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *ComponentResponseData) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *ComponentResponseData) SetState(v string) {
	o.State = v
}

// GetType returns the Type field value
func (o *ComponentResponseData) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ComponentResponseData) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ComponentResponseData) SetType(v string) {
	o.Type = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *ComponentResponseData) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *ComponentResponseData) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *ComponentResponseData) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o ComponentResponseData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComponentResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ast) {
		toSerialize["ast"] = o.Ast
	}
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["state"] = o.State
	toSerialize["type"] = o.Type
	toSerialize["updated_at"] = o.UpdatedAt

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ComponentResponseData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created_at",
		"id",
		"name",
		"state",
		"type",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varComponentResponseData := _ComponentResponseData{}

	err = json.Unmarshal(data, &varComponentResponseData)

	if err != nil {
		return err
	}

	*o = ComponentResponseData(varComponentResponseData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ast")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "state")
		delete(additionalProperties, "type")
		delete(additionalProperties, "updated_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableComponentResponseData struct {
	value *ComponentResponseData
	isSet bool
}

func (v NullableComponentResponseData) Get() *ComponentResponseData {
	return v.value
}

func (v *NullableComponentResponseData) Set(val *ComponentResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableComponentResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableComponentResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComponentResponseData(val *ComponentResponseData) *NullableComponentResponseData {
	return &NullableComponentResponseData{value: val, isSet: true}
}

func (v NullableComponentResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComponentResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
