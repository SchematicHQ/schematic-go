/*
Schematic API

Schematic API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the CountApiRequestsParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CountApiRequestsParams{}

// CountApiRequestsParams Input parameters
type CountApiRequestsParams struct {
	Limit       *int32  `json:"limit,omitempty"`
	Offset      *int32  `json:"offset,omitempty"`
	Q           *string `json:"q,omitempty"`
	RequestType *string `json:"request_type,omitempty"`
}

// NewCountApiRequestsParams instantiates a new CountApiRequestsParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountApiRequestsParams() *CountApiRequestsParams {
	this := CountApiRequestsParams{}
	return &this
}

// NewCountApiRequestsParamsWithDefaults instantiates a new CountApiRequestsParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountApiRequestsParamsWithDefaults() *CountApiRequestsParams {
	this := CountApiRequestsParams{}
	return &this
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *CountApiRequestsParams) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountApiRequestsParams) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *CountApiRequestsParams) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *CountApiRequestsParams) SetLimit(v int32) {
	o.Limit = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *CountApiRequestsParams) GetOffset() int32 {
	if o == nil || IsNil(o.Offset) {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountApiRequestsParams) GetOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *CountApiRequestsParams) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *CountApiRequestsParams) SetOffset(v int32) {
	o.Offset = &v
}

// GetQ returns the Q field value if set, zero value otherwise.
func (o *CountApiRequestsParams) GetQ() string {
	if o == nil || IsNil(o.Q) {
		var ret string
		return ret
	}
	return *o.Q
}

// GetQOk returns a tuple with the Q field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountApiRequestsParams) GetQOk() (*string, bool) {
	if o == nil || IsNil(o.Q) {
		return nil, false
	}
	return o.Q, true
}

// HasQ returns a boolean if a field has been set.
func (o *CountApiRequestsParams) HasQ() bool {
	if o != nil && !IsNil(o.Q) {
		return true
	}

	return false
}

// SetQ gets a reference to the given string and assigns it to the Q field.
func (o *CountApiRequestsParams) SetQ(v string) {
	o.Q = &v
}

// GetRequestType returns the RequestType field value if set, zero value otherwise.
func (o *CountApiRequestsParams) GetRequestType() string {
	if o == nil || IsNil(o.RequestType) {
		var ret string
		return ret
	}
	return *o.RequestType
}

// GetRequestTypeOk returns a tuple with the RequestType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountApiRequestsParams) GetRequestTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RequestType) {
		return nil, false
	}
	return o.RequestType, true
}

// HasRequestType returns a boolean if a field has been set.
func (o *CountApiRequestsParams) HasRequestType() bool {
	if o != nil && !IsNil(o.RequestType) {
		return true
	}

	return false
}

// SetRequestType gets a reference to the given string and assigns it to the RequestType field.
func (o *CountApiRequestsParams) SetRequestType(v string) {
	o.RequestType = &v
}

func (o CountApiRequestsParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CountApiRequestsParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.Q) {
		toSerialize["q"] = o.Q
	}
	if !IsNil(o.RequestType) {
		toSerialize["request_type"] = o.RequestType
	}
	return toSerialize, nil
}

type NullableCountApiRequestsParams struct {
	value *CountApiRequestsParams
	isSet bool
}

func (v NullableCountApiRequestsParams) Get() *CountApiRequestsParams {
	return v.value
}

func (v *NullableCountApiRequestsParams) Set(val *CountApiRequestsParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCountApiRequestsParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCountApiRequestsParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountApiRequestsParams(val *CountApiRequestsParams) *NullableCountApiRequestsParams {
	return &NullableCountApiRequestsParams{value: val, isSet: true}
}

func (v NullableCountApiRequestsParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountApiRequestsParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
