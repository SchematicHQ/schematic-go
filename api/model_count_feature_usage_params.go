/*
Schematic API

Schematic API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the CountFeatureUsageParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CountFeatureUsageParams{}

// CountFeatureUsageParams Input parameters
type CountFeatureUsageParams struct {
	CompanyId   *string                `json:"company_id,omitempty"`
	CompanyKeys map[string]interface{} `json:"company_keys,omitempty"`
	FeatureIds  []string               `json:"feature_ids,omitempty"`
	Limit       *int32                 `json:"limit,omitempty"`
	Offset      *int32                 `json:"offset,omitempty"`
	Q           *string                `json:"q,omitempty"`
}

// NewCountFeatureUsageParams instantiates a new CountFeatureUsageParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountFeatureUsageParams() *CountFeatureUsageParams {
	this := CountFeatureUsageParams{}
	return &this
}

// NewCountFeatureUsageParamsWithDefaults instantiates a new CountFeatureUsageParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountFeatureUsageParamsWithDefaults() *CountFeatureUsageParams {
	this := CountFeatureUsageParams{}
	return &this
}

// GetCompanyId returns the CompanyId field value if set, zero value otherwise.
func (o *CountFeatureUsageParams) GetCompanyId() string {
	if o == nil || IsNil(o.CompanyId) {
		var ret string
		return ret
	}
	return *o.CompanyId
}

// GetCompanyIdOk returns a tuple with the CompanyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountFeatureUsageParams) GetCompanyIdOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyId) {
		return nil, false
	}
	return o.CompanyId, true
}

// HasCompanyId returns a boolean if a field has been set.
func (o *CountFeatureUsageParams) HasCompanyId() bool {
	if o != nil && !IsNil(o.CompanyId) {
		return true
	}

	return false
}

// SetCompanyId gets a reference to the given string and assigns it to the CompanyId field.
func (o *CountFeatureUsageParams) SetCompanyId(v string) {
	o.CompanyId = &v
}

// GetCompanyKeys returns the CompanyKeys field value if set, zero value otherwise.
func (o *CountFeatureUsageParams) GetCompanyKeys() map[string]interface{} {
	if o == nil || IsNil(o.CompanyKeys) {
		var ret map[string]interface{}
		return ret
	}
	return o.CompanyKeys
}

// GetCompanyKeysOk returns a tuple with the CompanyKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountFeatureUsageParams) GetCompanyKeysOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CompanyKeys) {
		return map[string]interface{}{}, false
	}
	return o.CompanyKeys, true
}

// HasCompanyKeys returns a boolean if a field has been set.
func (o *CountFeatureUsageParams) HasCompanyKeys() bool {
	if o != nil && !IsNil(o.CompanyKeys) {
		return true
	}

	return false
}

// SetCompanyKeys gets a reference to the given map[string]interface{} and assigns it to the CompanyKeys field.
func (o *CountFeatureUsageParams) SetCompanyKeys(v map[string]interface{}) {
	o.CompanyKeys = v
}

// GetFeatureIds returns the FeatureIds field value if set, zero value otherwise.
func (o *CountFeatureUsageParams) GetFeatureIds() []string {
	if o == nil || IsNil(o.FeatureIds) {
		var ret []string
		return ret
	}
	return o.FeatureIds
}

// GetFeatureIdsOk returns a tuple with the FeatureIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountFeatureUsageParams) GetFeatureIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.FeatureIds) {
		return nil, false
	}
	return o.FeatureIds, true
}

// HasFeatureIds returns a boolean if a field has been set.
func (o *CountFeatureUsageParams) HasFeatureIds() bool {
	if o != nil && !IsNil(o.FeatureIds) {
		return true
	}

	return false
}

// SetFeatureIds gets a reference to the given []string and assigns it to the FeatureIds field.
func (o *CountFeatureUsageParams) SetFeatureIds(v []string) {
	o.FeatureIds = v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *CountFeatureUsageParams) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountFeatureUsageParams) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *CountFeatureUsageParams) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *CountFeatureUsageParams) SetLimit(v int32) {
	o.Limit = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *CountFeatureUsageParams) GetOffset() int32 {
	if o == nil || IsNil(o.Offset) {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountFeatureUsageParams) GetOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *CountFeatureUsageParams) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *CountFeatureUsageParams) SetOffset(v int32) {
	o.Offset = &v
}

// GetQ returns the Q field value if set, zero value otherwise.
func (o *CountFeatureUsageParams) GetQ() string {
	if o == nil || IsNil(o.Q) {
		var ret string
		return ret
	}
	return *o.Q
}

// GetQOk returns a tuple with the Q field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountFeatureUsageParams) GetQOk() (*string, bool) {
	if o == nil || IsNil(o.Q) {
		return nil, false
	}
	return o.Q, true
}

// HasQ returns a boolean if a field has been set.
func (o *CountFeatureUsageParams) HasQ() bool {
	if o != nil && !IsNil(o.Q) {
		return true
	}

	return false
}

// SetQ gets a reference to the given string and assigns it to the Q field.
func (o *CountFeatureUsageParams) SetQ(v string) {
	o.Q = &v
}

func (o CountFeatureUsageParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CountFeatureUsageParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CompanyId) {
		toSerialize["company_id"] = o.CompanyId
	}
	if !IsNil(o.CompanyKeys) {
		toSerialize["company_keys"] = o.CompanyKeys
	}
	if !IsNil(o.FeatureIds) {
		toSerialize["feature_ids"] = o.FeatureIds
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.Q) {
		toSerialize["q"] = o.Q
	}
	return toSerialize, nil
}

type NullableCountFeatureUsageParams struct {
	value *CountFeatureUsageParams
	isSet bool
}

func (v NullableCountFeatureUsageParams) Get() *CountFeatureUsageParams {
	return v.value
}

func (v *NullableCountFeatureUsageParams) Set(val *CountFeatureUsageParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCountFeatureUsageParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCountFeatureUsageParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountFeatureUsageParams(val *CountFeatureUsageParams) *NullableCountFeatureUsageParams {
	return &NullableCountFeatureUsageParams{value: val, isSet: true}
}

func (v NullableCountFeatureUsageParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountFeatureUsageParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
