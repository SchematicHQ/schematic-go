/*
Schematic API

Schematic API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the CountPlansParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CountPlansParams{}

// CountPlansParams Input parameters
type CountPlansParams struct {
	CompanyId *string `json:"company_id,omitempty"`
	// Filter out plans that do not have a billing product ID
	HasProductId *bool    `json:"has_product_id,omitempty"`
	Ids          []string `json:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int32 `json:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int32 `json:"offset,omitempty"`
	// Filter by plan type
	PlanType *string `json:"plan_type,omitempty"`
	Q        *string `json:"q,omitempty"`
	// Filter out plans that already have a plan entitlement for the specified feature ID
	WithoutEntitlementFor *string `json:"without_entitlement_for,omitempty"`
	AdditionalProperties  map[string]interface{}
}

type _CountPlansParams CountPlansParams

// NewCountPlansParams instantiates a new CountPlansParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountPlansParams() *CountPlansParams {
	this := CountPlansParams{}
	return &this
}

// NewCountPlansParamsWithDefaults instantiates a new CountPlansParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountPlansParamsWithDefaults() *CountPlansParams {
	this := CountPlansParams{}
	return &this
}

// GetCompanyId returns the CompanyId field value if set, zero value otherwise.
func (o *CountPlansParams) GetCompanyId() string {
	if o == nil || IsNil(o.CompanyId) {
		var ret string
		return ret
	}
	return *o.CompanyId
}

// GetCompanyIdOk returns a tuple with the CompanyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountPlansParams) GetCompanyIdOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyId) {
		return nil, false
	}
	return o.CompanyId, true
}

// HasCompanyId returns a boolean if a field has been set.
func (o *CountPlansParams) HasCompanyId() bool {
	if o != nil && !IsNil(o.CompanyId) {
		return true
	}

	return false
}

// SetCompanyId gets a reference to the given string and assigns it to the CompanyId field.
func (o *CountPlansParams) SetCompanyId(v string) {
	o.CompanyId = &v
}

// GetHasProductId returns the HasProductId field value if set, zero value otherwise.
func (o *CountPlansParams) GetHasProductId() bool {
	if o == nil || IsNil(o.HasProductId) {
		var ret bool
		return ret
	}
	return *o.HasProductId
}

// GetHasProductIdOk returns a tuple with the HasProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountPlansParams) GetHasProductIdOk() (*bool, bool) {
	if o == nil || IsNil(o.HasProductId) {
		return nil, false
	}
	return o.HasProductId, true
}

// HasHasProductId returns a boolean if a field has been set.
func (o *CountPlansParams) HasHasProductId() bool {
	if o != nil && !IsNil(o.HasProductId) {
		return true
	}

	return false
}

// SetHasProductId gets a reference to the given bool and assigns it to the HasProductId field.
func (o *CountPlansParams) SetHasProductId(v bool) {
	o.HasProductId = &v
}

// GetIds returns the Ids field value if set, zero value otherwise.
func (o *CountPlansParams) GetIds() []string {
	if o == nil || IsNil(o.Ids) {
		var ret []string
		return ret
	}
	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountPlansParams) GetIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.Ids) {
		return nil, false
	}
	return o.Ids, true
}

// HasIds returns a boolean if a field has been set.
func (o *CountPlansParams) HasIds() bool {
	if o != nil && !IsNil(o.Ids) {
		return true
	}

	return false
}

// SetIds gets a reference to the given []string and assigns it to the Ids field.
func (o *CountPlansParams) SetIds(v []string) {
	o.Ids = v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *CountPlansParams) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountPlansParams) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *CountPlansParams) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *CountPlansParams) SetLimit(v int32) {
	o.Limit = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *CountPlansParams) GetOffset() int32 {
	if o == nil || IsNil(o.Offset) {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountPlansParams) GetOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *CountPlansParams) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *CountPlansParams) SetOffset(v int32) {
	o.Offset = &v
}

// GetPlanType returns the PlanType field value if set, zero value otherwise.
func (o *CountPlansParams) GetPlanType() string {
	if o == nil || IsNil(o.PlanType) {
		var ret string
		return ret
	}
	return *o.PlanType
}

// GetPlanTypeOk returns a tuple with the PlanType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountPlansParams) GetPlanTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PlanType) {
		return nil, false
	}
	return o.PlanType, true
}

// HasPlanType returns a boolean if a field has been set.
func (o *CountPlansParams) HasPlanType() bool {
	if o != nil && !IsNil(o.PlanType) {
		return true
	}

	return false
}

// SetPlanType gets a reference to the given string and assigns it to the PlanType field.
func (o *CountPlansParams) SetPlanType(v string) {
	o.PlanType = &v
}

// GetQ returns the Q field value if set, zero value otherwise.
func (o *CountPlansParams) GetQ() string {
	if o == nil || IsNil(o.Q) {
		var ret string
		return ret
	}
	return *o.Q
}

// GetQOk returns a tuple with the Q field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountPlansParams) GetQOk() (*string, bool) {
	if o == nil || IsNil(o.Q) {
		return nil, false
	}
	return o.Q, true
}

// HasQ returns a boolean if a field has been set.
func (o *CountPlansParams) HasQ() bool {
	if o != nil && !IsNil(o.Q) {
		return true
	}

	return false
}

// SetQ gets a reference to the given string and assigns it to the Q field.
func (o *CountPlansParams) SetQ(v string) {
	o.Q = &v
}

// GetWithoutEntitlementFor returns the WithoutEntitlementFor field value if set, zero value otherwise.
func (o *CountPlansParams) GetWithoutEntitlementFor() string {
	if o == nil || IsNil(o.WithoutEntitlementFor) {
		var ret string
		return ret
	}
	return *o.WithoutEntitlementFor
}

// GetWithoutEntitlementForOk returns a tuple with the WithoutEntitlementFor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountPlansParams) GetWithoutEntitlementForOk() (*string, bool) {
	if o == nil || IsNil(o.WithoutEntitlementFor) {
		return nil, false
	}
	return o.WithoutEntitlementFor, true
}

// HasWithoutEntitlementFor returns a boolean if a field has been set.
func (o *CountPlansParams) HasWithoutEntitlementFor() bool {
	if o != nil && !IsNil(o.WithoutEntitlementFor) {
		return true
	}

	return false
}

// SetWithoutEntitlementFor gets a reference to the given string and assigns it to the WithoutEntitlementFor field.
func (o *CountPlansParams) SetWithoutEntitlementFor(v string) {
	o.WithoutEntitlementFor = &v
}

func (o CountPlansParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CountPlansParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CompanyId) {
		toSerialize["company_id"] = o.CompanyId
	}
	if !IsNil(o.HasProductId) {
		toSerialize["has_product_id"] = o.HasProductId
	}
	if !IsNil(o.Ids) {
		toSerialize["ids"] = o.Ids
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.PlanType) {
		toSerialize["plan_type"] = o.PlanType
	}
	if !IsNil(o.Q) {
		toSerialize["q"] = o.Q
	}
	if !IsNil(o.WithoutEntitlementFor) {
		toSerialize["without_entitlement_for"] = o.WithoutEntitlementFor
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CountPlansParams) UnmarshalJSON(data []byte) (err error) {
	varCountPlansParams := _CountPlansParams{}

	err = json.Unmarshal(data, &varCountPlansParams)

	if err != nil {
		return err
	}

	*o = CountPlansParams(varCountPlansParams)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "company_id")
		delete(additionalProperties, "has_product_id")
		delete(additionalProperties, "ids")
		delete(additionalProperties, "limit")
		delete(additionalProperties, "offset")
		delete(additionalProperties, "plan_type")
		delete(additionalProperties, "q")
		delete(additionalProperties, "without_entitlement_for")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCountPlansParams struct {
	value *CountPlansParams
	isSet bool
}

func (v NullableCountPlansParams) Get() *CountPlansParams {
	return v.value
}

func (v *NullableCountPlansParams) Set(val *CountPlansParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCountPlansParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCountPlansParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountPlansParams(val *CountPlansParams) *NullableCountPlansParams {
	return &NullableCountPlansParams{value: val, isSet: true}
}

func (v NullableCountPlansParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountPlansParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
