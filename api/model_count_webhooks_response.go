/*
Schematic API

Schematic API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CountWebhooksResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CountWebhooksResponse{}

// CountWebhooksResponse struct for CountWebhooksResponse
type CountWebhooksResponse struct {
	Data   CountResponse       `json:"data"`
	Params CountWebhooksParams `json:"params"`
}

type _CountWebhooksResponse CountWebhooksResponse

// NewCountWebhooksResponse instantiates a new CountWebhooksResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountWebhooksResponse(data CountResponse, params CountWebhooksParams) *CountWebhooksResponse {
	this := CountWebhooksResponse{}
	this.Data = data
	this.Params = params
	return &this
}

// NewCountWebhooksResponseWithDefaults instantiates a new CountWebhooksResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountWebhooksResponseWithDefaults() *CountWebhooksResponse {
	this := CountWebhooksResponse{}
	return &this
}

// GetData returns the Data field value
func (o *CountWebhooksResponse) GetData() CountResponse {
	if o == nil {
		var ret CountResponse
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *CountWebhooksResponse) GetDataOk() (*CountResponse, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *CountWebhooksResponse) SetData(v CountResponse) {
	o.Data = v
}

// GetParams returns the Params field value
func (o *CountWebhooksResponse) GetParams() CountWebhooksParams {
	if o == nil {
		var ret CountWebhooksParams
		return ret
	}

	return o.Params
}

// GetParamsOk returns a tuple with the Params field value
// and a boolean to check if the value has been set.
func (o *CountWebhooksResponse) GetParamsOk() (*CountWebhooksParams, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Params, true
}

// SetParams sets field value
func (o *CountWebhooksResponse) SetParams(v CountWebhooksParams) {
	o.Params = v
}

func (o CountWebhooksResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CountWebhooksResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["params"] = o.Params
	return toSerialize, nil
}

func (o *CountWebhooksResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"params",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCountWebhooksResponse := _CountWebhooksResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCountWebhooksResponse)

	if err != nil {
		return err
	}

	*o = CountWebhooksResponse(varCountWebhooksResponse)

	return err
}

type NullableCountWebhooksResponse struct {
	value *CountWebhooksResponse
	isSet bool
}

func (v NullableCountWebhooksResponse) Get() *CountWebhooksResponse {
	return v.value
}

func (v *NullableCountWebhooksResponse) Set(val *CountWebhooksResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCountWebhooksResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCountWebhooksResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountWebhooksResponse(val *CountWebhooksResponse) *NullableCountWebhooksResponse {
	return &NullableCountWebhooksResponse{value: val, isSet: true}
}

func (v NullableCountWebhooksResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountWebhooksResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
