/*
Schematic API

Schematic API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateComponentRequestBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateComponentRequestBody{}

// CreateComponentRequestBody struct for CreateComponentRequestBody
type CreateComponentRequestBody struct {
	Ast        []int32 `json:"ast"`
	EntityType string  `json:"entity_type"`
	Name       string  `json:"name"`
}

type _CreateComponentRequestBody CreateComponentRequestBody

// NewCreateComponentRequestBody instantiates a new CreateComponentRequestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateComponentRequestBody(ast []int32, entityType string, name string) *CreateComponentRequestBody {
	this := CreateComponentRequestBody{}
	this.Ast = ast
	this.EntityType = entityType
	this.Name = name
	return &this
}

// NewCreateComponentRequestBodyWithDefaults instantiates a new CreateComponentRequestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateComponentRequestBodyWithDefaults() *CreateComponentRequestBody {
	this := CreateComponentRequestBody{}
	return &this
}

// GetAst returns the Ast field value
func (o *CreateComponentRequestBody) GetAst() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.Ast
}

// GetAstOk returns a tuple with the Ast field value
// and a boolean to check if the value has been set.
func (o *CreateComponentRequestBody) GetAstOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ast, true
}

// SetAst sets field value
func (o *CreateComponentRequestBody) SetAst(v []int32) {
	o.Ast = v
}

// GetEntityType returns the EntityType field value
func (o *CreateComponentRequestBody) GetEntityType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value
// and a boolean to check if the value has been set.
func (o *CreateComponentRequestBody) GetEntityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityType, true
}

// SetEntityType sets field value
func (o *CreateComponentRequestBody) SetEntityType(v string) {
	o.EntityType = v
}

// GetName returns the Name field value
func (o *CreateComponentRequestBody) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateComponentRequestBody) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateComponentRequestBody) SetName(v string) {
	o.Name = v
}

func (o CreateComponentRequestBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateComponentRequestBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ast"] = o.Ast
	toSerialize["entity_type"] = o.EntityType
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *CreateComponentRequestBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ast",
		"entity_type",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateComponentRequestBody := _CreateComponentRequestBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateComponentRequestBody)

	if err != nil {
		return err
	}

	*o = CreateComponentRequestBody(varCreateComponentRequestBody)

	return err
}

type NullableCreateComponentRequestBody struct {
	value *CreateComponentRequestBody
	isSet bool
}

func (v NullableCreateComponentRequestBody) Get() *CreateComponentRequestBody {
	return v.value
}

func (v *NullableCreateComponentRequestBody) Set(val *CreateComponentRequestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateComponentRequestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateComponentRequestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateComponentRequestBody(val *CreateComponentRequestBody) *NullableCreateComponentRequestBody {
	return &NullableCreateComponentRequestBody{value: val, isSet: true}
}

func (v NullableCreateComponentRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateComponentRequestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
