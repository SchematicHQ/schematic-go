/*
Schematic API

Schematic API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// checks if the CreatePlanGroupRequestBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreatePlanGroupRequestBody{}

// CreatePlanGroupRequestBody struct for CreatePlanGroupRequestBody
type CreatePlanGroupRequestBody struct {
	DefaultPlanId        NullableString `json:"default_plan_id,omitempty"`
	PlanIds              []string       `json:"plan_ids"`
	AdditionalProperties map[string]interface{}
}

type _CreatePlanGroupRequestBody CreatePlanGroupRequestBody

// NewCreatePlanGroupRequestBody instantiates a new CreatePlanGroupRequestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreatePlanGroupRequestBody(planIds []string) *CreatePlanGroupRequestBody {
	this := CreatePlanGroupRequestBody{}
	this.PlanIds = planIds
	return &this
}

// NewCreatePlanGroupRequestBodyWithDefaults instantiates a new CreatePlanGroupRequestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreatePlanGroupRequestBodyWithDefaults() *CreatePlanGroupRequestBody {
	this := CreatePlanGroupRequestBody{}
	return &this
}

// GetDefaultPlanId returns the DefaultPlanId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreatePlanGroupRequestBody) GetDefaultPlanId() string {
	if o == nil || IsNil(o.DefaultPlanId.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultPlanId.Get()
}

// GetDefaultPlanIdOk returns a tuple with the DefaultPlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreatePlanGroupRequestBody) GetDefaultPlanIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultPlanId.Get(), o.DefaultPlanId.IsSet()
}

// HasDefaultPlanId returns a boolean if a field has been set.
func (o *CreatePlanGroupRequestBody) HasDefaultPlanId() bool {
	if o != nil && o.DefaultPlanId.IsSet() {
		return true
	}

	return false
}

// SetDefaultPlanId gets a reference to the given NullableString and assigns it to the DefaultPlanId field.
func (o *CreatePlanGroupRequestBody) SetDefaultPlanId(v string) {
	o.DefaultPlanId.Set(&v)
}

// SetDefaultPlanIdNil sets the value for DefaultPlanId to be an explicit nil
func (o *CreatePlanGroupRequestBody) SetDefaultPlanIdNil() {
	o.DefaultPlanId.Set(nil)
}

// UnsetDefaultPlanId ensures that no value is present for DefaultPlanId, not even an explicit nil
func (o *CreatePlanGroupRequestBody) UnsetDefaultPlanId() {
	o.DefaultPlanId.Unset()
}

// GetPlanIds returns the PlanIds field value
func (o *CreatePlanGroupRequestBody) GetPlanIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.PlanIds
}

// GetPlanIdsOk returns a tuple with the PlanIds field value
// and a boolean to check if the value has been set.
func (o *CreatePlanGroupRequestBody) GetPlanIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlanIds, true
}

// SetPlanIds sets field value
func (o *CreatePlanGroupRequestBody) SetPlanIds(v []string) {
	o.PlanIds = v
}

func (o CreatePlanGroupRequestBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreatePlanGroupRequestBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DefaultPlanId.IsSet() {
		toSerialize["default_plan_id"] = o.DefaultPlanId.Get()
	}
	toSerialize["plan_ids"] = o.PlanIds

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreatePlanGroupRequestBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"plan_ids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreatePlanGroupRequestBody := _CreatePlanGroupRequestBody{}

	err = json.Unmarshal(data, &varCreatePlanGroupRequestBody)

	if err != nil {
		return err
	}

	*o = CreatePlanGroupRequestBody(varCreatePlanGroupRequestBody)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "default_plan_id")
		delete(additionalProperties, "plan_ids")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreatePlanGroupRequestBody struct {
	value *CreatePlanGroupRequestBody
	isSet bool
}

func (v NullableCreatePlanGroupRequestBody) Get() *CreatePlanGroupRequestBody {
	return v.value
}

func (v *NullableCreatePlanGroupRequestBody) Set(val *CreatePlanGroupRequestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableCreatePlanGroupRequestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableCreatePlanGroupRequestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreatePlanGroupRequestBody(val *CreatePlanGroupRequestBody) *NullableCreatePlanGroupRequestBody {
	return &NullableCreatePlanGroupRequestBody{value: val, isSet: true}
}

func (v NullableCreatePlanGroupRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreatePlanGroupRequestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
