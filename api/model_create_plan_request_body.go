/*
Schematic API

Schematic API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// checks if the CreatePlanRequestBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreatePlanRequestBody{}

// CreatePlanRequestBody struct for CreatePlanRequestBody
type CreatePlanRequestBody struct {
	AudienceType         NullableString `json:"audience_type,omitempty"`
	Description          string         `json:"description"`
	Icon                 NullableString `json:"icon,omitempty"`
	Name                 string         `json:"name"`
	PlanType             string         `json:"plan_type"`
	AdditionalProperties map[string]interface{}
}

type _CreatePlanRequestBody CreatePlanRequestBody

// NewCreatePlanRequestBody instantiates a new CreatePlanRequestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreatePlanRequestBody(description string, name string, planType string) *CreatePlanRequestBody {
	this := CreatePlanRequestBody{}
	this.Description = description
	this.Name = name
	this.PlanType = planType
	return &this
}

// NewCreatePlanRequestBodyWithDefaults instantiates a new CreatePlanRequestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreatePlanRequestBodyWithDefaults() *CreatePlanRequestBody {
	this := CreatePlanRequestBody{}
	return &this
}

// GetAudienceType returns the AudienceType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreatePlanRequestBody) GetAudienceType() string {
	if o == nil || IsNil(o.AudienceType.Get()) {
		var ret string
		return ret
	}
	return *o.AudienceType.Get()
}

// GetAudienceTypeOk returns a tuple with the AudienceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreatePlanRequestBody) GetAudienceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AudienceType.Get(), o.AudienceType.IsSet()
}

// HasAudienceType returns a boolean if a field has been set.
func (o *CreatePlanRequestBody) HasAudienceType() bool {
	if o != nil && o.AudienceType.IsSet() {
		return true
	}

	return false
}

// SetAudienceType gets a reference to the given NullableString and assigns it to the AudienceType field.
func (o *CreatePlanRequestBody) SetAudienceType(v string) {
	o.AudienceType.Set(&v)
}

// SetAudienceTypeNil sets the value for AudienceType to be an explicit nil
func (o *CreatePlanRequestBody) SetAudienceTypeNil() {
	o.AudienceType.Set(nil)
}

// UnsetAudienceType ensures that no value is present for AudienceType, not even an explicit nil
func (o *CreatePlanRequestBody) UnsetAudienceType() {
	o.AudienceType.Unset()
}

// GetDescription returns the Description field value
func (o *CreatePlanRequestBody) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *CreatePlanRequestBody) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *CreatePlanRequestBody) SetDescription(v string) {
	o.Description = v
}

// GetIcon returns the Icon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreatePlanRequestBody) GetIcon() string {
	if o == nil || IsNil(o.Icon.Get()) {
		var ret string
		return ret
	}
	return *o.Icon.Get()
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreatePlanRequestBody) GetIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Icon.Get(), o.Icon.IsSet()
}

// HasIcon returns a boolean if a field has been set.
func (o *CreatePlanRequestBody) HasIcon() bool {
	if o != nil && o.Icon.IsSet() {
		return true
	}

	return false
}

// SetIcon gets a reference to the given NullableString and assigns it to the Icon field.
func (o *CreatePlanRequestBody) SetIcon(v string) {
	o.Icon.Set(&v)
}

// SetIconNil sets the value for Icon to be an explicit nil
func (o *CreatePlanRequestBody) SetIconNil() {
	o.Icon.Set(nil)
}

// UnsetIcon ensures that no value is present for Icon, not even an explicit nil
func (o *CreatePlanRequestBody) UnsetIcon() {
	o.Icon.Unset()
}

// GetName returns the Name field value
func (o *CreatePlanRequestBody) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreatePlanRequestBody) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreatePlanRequestBody) SetName(v string) {
	o.Name = v
}

// GetPlanType returns the PlanType field value
func (o *CreatePlanRequestBody) GetPlanType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PlanType
}

// GetPlanTypeOk returns a tuple with the PlanType field value
// and a boolean to check if the value has been set.
func (o *CreatePlanRequestBody) GetPlanTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlanType, true
}

// SetPlanType sets field value
func (o *CreatePlanRequestBody) SetPlanType(v string) {
	o.PlanType = v
}

func (o CreatePlanRequestBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreatePlanRequestBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AudienceType.IsSet() {
		toSerialize["audience_type"] = o.AudienceType.Get()
	}
	toSerialize["description"] = o.Description
	if o.Icon.IsSet() {
		toSerialize["icon"] = o.Icon.Get()
	}
	toSerialize["name"] = o.Name
	toSerialize["plan_type"] = o.PlanType

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreatePlanRequestBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"description",
		"name",
		"plan_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreatePlanRequestBody := _CreatePlanRequestBody{}

	err = json.Unmarshal(data, &varCreatePlanRequestBody)

	if err != nil {
		return err
	}

	*o = CreatePlanRequestBody(varCreatePlanRequestBody)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "audience_type")
		delete(additionalProperties, "description")
		delete(additionalProperties, "icon")
		delete(additionalProperties, "name")
		delete(additionalProperties, "plan_type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreatePlanRequestBody struct {
	value *CreatePlanRequestBody
	isSet bool
}

func (v NullableCreatePlanRequestBody) Get() *CreatePlanRequestBody {
	return v.value
}

func (v *NullableCreatePlanRequestBody) Set(val *CreatePlanRequestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableCreatePlanRequestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableCreatePlanRequestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreatePlanRequestBody(val *CreatePlanRequestBody) *NullableCreatePlanRequestBody {
	return &NullableCreatePlanRequestBody{value: val, isSet: true}
}

func (v NullableCreatePlanRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreatePlanRequestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
