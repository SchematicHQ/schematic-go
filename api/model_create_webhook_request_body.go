/*
Schematic API

Schematic API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateWebhookRequestBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateWebhookRequestBody{}

// CreateWebhookRequestBody struct for CreateWebhookRequestBody
type CreateWebhookRequestBody struct {
	Name                 string   `json:"name"`
	RequestTypes         []string `json:"request_types"`
	Url                  string   `json:"url"`
	AdditionalProperties map[string]interface{}
}

type _CreateWebhookRequestBody CreateWebhookRequestBody

// NewCreateWebhookRequestBody instantiates a new CreateWebhookRequestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateWebhookRequestBody(name string, requestTypes []string, url string) *CreateWebhookRequestBody {
	this := CreateWebhookRequestBody{}
	this.Name = name
	this.RequestTypes = requestTypes
	this.Url = url
	return &this
}

// NewCreateWebhookRequestBodyWithDefaults instantiates a new CreateWebhookRequestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateWebhookRequestBodyWithDefaults() *CreateWebhookRequestBody {
	this := CreateWebhookRequestBody{}
	return &this
}

// GetName returns the Name field value
func (o *CreateWebhookRequestBody) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateWebhookRequestBody) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateWebhookRequestBody) SetName(v string) {
	o.Name = v
}

// GetRequestTypes returns the RequestTypes field value
func (o *CreateWebhookRequestBody) GetRequestTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.RequestTypes
}

// GetRequestTypesOk returns a tuple with the RequestTypes field value
// and a boolean to check if the value has been set.
func (o *CreateWebhookRequestBody) GetRequestTypesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RequestTypes, true
}

// SetRequestTypes sets field value
func (o *CreateWebhookRequestBody) SetRequestTypes(v []string) {
	o.RequestTypes = v
}

// GetUrl returns the Url field value
func (o *CreateWebhookRequestBody) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *CreateWebhookRequestBody) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *CreateWebhookRequestBody) SetUrl(v string) {
	o.Url = v
}

func (o CreateWebhookRequestBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateWebhookRequestBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["request_types"] = o.RequestTypes
	toSerialize["url"] = o.Url

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateWebhookRequestBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"request_types",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateWebhookRequestBody := _CreateWebhookRequestBody{}

	err = json.Unmarshal(data, &varCreateWebhookRequestBody)

	if err != nil {
		return err
	}

	*o = CreateWebhookRequestBody(varCreateWebhookRequestBody)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "request_types")
		delete(additionalProperties, "url")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateWebhookRequestBody struct {
	value *CreateWebhookRequestBody
	isSet bool
}

func (v NullableCreateWebhookRequestBody) Get() *CreateWebhookRequestBody {
	return v.value
}

func (v *NullableCreateWebhookRequestBody) Set(val *CreateWebhookRequestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateWebhookRequestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateWebhookRequestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateWebhookRequestBody(val *CreateWebhookRequestBody) *NullableCreateWebhookRequestBody {
	return &NullableCreateWebhookRequestBody{value: val, isSet: true}
}

func (v NullableCreateWebhookRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateWebhookRequestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
