/*
Schematic API

Schematic API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the EntityTraitDefinitionResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntityTraitDefinitionResponseData{}

// EntityTraitDefinitionResponseData The updated resource
type EntityTraitDefinitionResponseData struct {
	CreatedAt  time.Time `json:"created_at"`
	EntityType string    `json:"entity_type"`
	Hierarchy  []string  `json:"hierarchy"`
	Id         string    `json:"id"`
	TraitType  string    `json:"trait_type"`
	UpdatedAt  time.Time `json:"updated_at"`
}

type _EntityTraitDefinitionResponseData EntityTraitDefinitionResponseData

// NewEntityTraitDefinitionResponseData instantiates a new EntityTraitDefinitionResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityTraitDefinitionResponseData(createdAt time.Time, entityType string, hierarchy []string, id string, traitType string, updatedAt time.Time) *EntityTraitDefinitionResponseData {
	this := EntityTraitDefinitionResponseData{}
	this.CreatedAt = createdAt
	this.EntityType = entityType
	this.Hierarchy = hierarchy
	this.Id = id
	this.TraitType = traitType
	this.UpdatedAt = updatedAt
	return &this
}

// NewEntityTraitDefinitionResponseDataWithDefaults instantiates a new EntityTraitDefinitionResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityTraitDefinitionResponseDataWithDefaults() *EntityTraitDefinitionResponseData {
	this := EntityTraitDefinitionResponseData{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *EntityTraitDefinitionResponseData) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *EntityTraitDefinitionResponseData) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *EntityTraitDefinitionResponseData) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetEntityType returns the EntityType field value
func (o *EntityTraitDefinitionResponseData) GetEntityType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value
// and a boolean to check if the value has been set.
func (o *EntityTraitDefinitionResponseData) GetEntityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityType, true
}

// SetEntityType sets field value
func (o *EntityTraitDefinitionResponseData) SetEntityType(v string) {
	o.EntityType = v
}

// GetHierarchy returns the Hierarchy field value
func (o *EntityTraitDefinitionResponseData) GetHierarchy() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Hierarchy
}

// GetHierarchyOk returns a tuple with the Hierarchy field value
// and a boolean to check if the value has been set.
func (o *EntityTraitDefinitionResponseData) GetHierarchyOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hierarchy, true
}

// SetHierarchy sets field value
func (o *EntityTraitDefinitionResponseData) SetHierarchy(v []string) {
	o.Hierarchy = v
}

// GetId returns the Id field value
func (o *EntityTraitDefinitionResponseData) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EntityTraitDefinitionResponseData) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EntityTraitDefinitionResponseData) SetId(v string) {
	o.Id = v
}

// GetTraitType returns the TraitType field value
func (o *EntityTraitDefinitionResponseData) GetTraitType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TraitType
}

// GetTraitTypeOk returns a tuple with the TraitType field value
// and a boolean to check if the value has been set.
func (o *EntityTraitDefinitionResponseData) GetTraitTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TraitType, true
}

// SetTraitType sets field value
func (o *EntityTraitDefinitionResponseData) SetTraitType(v string) {
	o.TraitType = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *EntityTraitDefinitionResponseData) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *EntityTraitDefinitionResponseData) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *EntityTraitDefinitionResponseData) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o EntityTraitDefinitionResponseData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntityTraitDefinitionResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["entity_type"] = o.EntityType
	toSerialize["hierarchy"] = o.Hierarchy
	toSerialize["id"] = o.Id
	toSerialize["trait_type"] = o.TraitType
	toSerialize["updated_at"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *EntityTraitDefinitionResponseData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created_at",
		"entity_type",
		"hierarchy",
		"id",
		"trait_type",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEntityTraitDefinitionResponseData := _EntityTraitDefinitionResponseData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEntityTraitDefinitionResponseData)

	if err != nil {
		return err
	}

	*o = EntityTraitDefinitionResponseData(varEntityTraitDefinitionResponseData)

	return err
}

type NullableEntityTraitDefinitionResponseData struct {
	value *EntityTraitDefinitionResponseData
	isSet bool
}

func (v NullableEntityTraitDefinitionResponseData) Get() *EntityTraitDefinitionResponseData {
	return v.value
}

func (v *NullableEntityTraitDefinitionResponseData) Set(val *EntityTraitDefinitionResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityTraitDefinitionResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityTraitDefinitionResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityTraitDefinitionResponseData(val *EntityTraitDefinitionResponseData) *NullableEntityTraitDefinitionResponseData {
	return &NullableEntityTraitDefinitionResponseData{value: val, isSet: true}
}

func (v NullableEntityTraitDefinitionResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityTraitDefinitionResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
