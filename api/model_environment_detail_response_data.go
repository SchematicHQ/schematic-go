/*
Schematic API

Schematic API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the EnvironmentDetailResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentDetailResponseData{}

// EnvironmentDetailResponseData The created resource
type EnvironmentDetailResponseData struct {
	ApiKeys         []ApiKeyResponseData `json:"api_keys"`
	CreatedAt       time.Time            `json:"created_at"`
	EnvironmentType string               `json:"environment_type"`
	Id              string               `json:"id"`
	Name            string               `json:"name"`
	UpdatedAt       time.Time            `json:"updated_at"`
}

type _EnvironmentDetailResponseData EnvironmentDetailResponseData

// NewEnvironmentDetailResponseData instantiates a new EnvironmentDetailResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentDetailResponseData(apiKeys []ApiKeyResponseData, createdAt time.Time, environmentType string, id string, name string, updatedAt time.Time) *EnvironmentDetailResponseData {
	this := EnvironmentDetailResponseData{}
	this.ApiKeys = apiKeys
	this.CreatedAt = createdAt
	this.EnvironmentType = environmentType
	this.Id = id
	this.Name = name
	this.UpdatedAt = updatedAt
	return &this
}

// NewEnvironmentDetailResponseDataWithDefaults instantiates a new EnvironmentDetailResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentDetailResponseDataWithDefaults() *EnvironmentDetailResponseData {
	this := EnvironmentDetailResponseData{}
	return &this
}

// GetApiKeys returns the ApiKeys field value
func (o *EnvironmentDetailResponseData) GetApiKeys() []ApiKeyResponseData {
	if o == nil {
		var ret []ApiKeyResponseData
		return ret
	}

	return o.ApiKeys
}

// GetApiKeysOk returns a tuple with the ApiKeys field value
// and a boolean to check if the value has been set.
func (o *EnvironmentDetailResponseData) GetApiKeysOk() ([]ApiKeyResponseData, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApiKeys, true
}

// SetApiKeys sets field value
func (o *EnvironmentDetailResponseData) SetApiKeys(v []ApiKeyResponseData) {
	o.ApiKeys = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *EnvironmentDetailResponseData) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *EnvironmentDetailResponseData) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *EnvironmentDetailResponseData) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetEnvironmentType returns the EnvironmentType field value
func (o *EnvironmentDetailResponseData) GetEnvironmentType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnvironmentType
}

// GetEnvironmentTypeOk returns a tuple with the EnvironmentType field value
// and a boolean to check if the value has been set.
func (o *EnvironmentDetailResponseData) GetEnvironmentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnvironmentType, true
}

// SetEnvironmentType sets field value
func (o *EnvironmentDetailResponseData) SetEnvironmentType(v string) {
	o.EnvironmentType = v
}

// GetId returns the Id field value
func (o *EnvironmentDetailResponseData) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EnvironmentDetailResponseData) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EnvironmentDetailResponseData) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *EnvironmentDetailResponseData) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EnvironmentDetailResponseData) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EnvironmentDetailResponseData) SetName(v string) {
	o.Name = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *EnvironmentDetailResponseData) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *EnvironmentDetailResponseData) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *EnvironmentDetailResponseData) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o EnvironmentDetailResponseData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentDetailResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["api_keys"] = o.ApiKeys
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["environment_type"] = o.EnvironmentType
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["updated_at"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *EnvironmentDetailResponseData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"api_keys",
		"created_at",
		"environment_type",
		"id",
		"name",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEnvironmentDetailResponseData := _EnvironmentDetailResponseData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEnvironmentDetailResponseData)

	if err != nil {
		return err
	}

	*o = EnvironmentDetailResponseData(varEnvironmentDetailResponseData)

	return err
}

type NullableEnvironmentDetailResponseData struct {
	value *EnvironmentDetailResponseData
	isSet bool
}

func (v NullableEnvironmentDetailResponseData) Get() *EnvironmentDetailResponseData {
	return v.value
}

func (v *NullableEnvironmentDetailResponseData) Set(val *EnvironmentDetailResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentDetailResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentDetailResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentDetailResponseData(val *EnvironmentDetailResponseData) *NullableEnvironmentDetailResponseData {
	return &NullableEnvironmentDetailResponseData{value: val, isSet: true}
}

func (v NullableEnvironmentDetailResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentDetailResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
