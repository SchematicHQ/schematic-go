/*
Schematic API

Schematic API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the EventBodyFlagCheck type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventBodyFlagCheck{}

// EventBodyFlagCheck struct for EventBodyFlagCheck
type EventBodyFlagCheck struct {
	// Schematic company ID (starting with 'comp_') of the company evaluated, if any
	CompanyId NullableString `json:"company_id,omitempty"`
	// Report an error that occurred during the flag check
	Error NullableString `json:"error,omitempty"`
	// Schematic flag ID (starting with 'flag_') for the flag matching the key, if any
	FlagId NullableString `json:"flag_id,omitempty"`
	// The key of the flag being checked
	FlagKey string `json:"flag_key"`
	// The reason why the value was returned
	Reason string `json:"reason"`
	// Key-value pairs used to to identify company for which the flag was checked
	ReqCompany map[string]string `json:"req_company,omitempty"`
	// Key-value pairs used to to identify user for which the flag was checked
	ReqUser map[string]string `json:"req_user,omitempty"`
	// Schematic rule ID (starting with 'rule_') of the rule that matched for the flag, if any
	RuleId NullableString `json:"rule_id,omitempty"`
	// Schematic user ID (starting with 'user_') of the user evaluated, if any
	UserId NullableString `json:"user_id,omitempty"`
	// The value of the flag for the given company and/or user
	Value bool `json:"value"`
}

type _EventBodyFlagCheck EventBodyFlagCheck

// NewEventBodyFlagCheck instantiates a new EventBodyFlagCheck object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventBodyFlagCheck(flagKey string, reason string, value bool) *EventBodyFlagCheck {
	this := EventBodyFlagCheck{}
	this.FlagKey = flagKey
	this.Reason = reason
	this.Value = value
	return &this
}

// NewEventBodyFlagCheckWithDefaults instantiates a new EventBodyFlagCheck object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventBodyFlagCheckWithDefaults() *EventBodyFlagCheck {
	this := EventBodyFlagCheck{}
	return &this
}

// GetCompanyId returns the CompanyId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventBodyFlagCheck) GetCompanyId() string {
	if o == nil || IsNil(o.CompanyId.Get()) {
		var ret string
		return ret
	}
	return *o.CompanyId.Get()
}

// GetCompanyIdOk returns a tuple with the CompanyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventBodyFlagCheck) GetCompanyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompanyId.Get(), o.CompanyId.IsSet()
}

// HasCompanyId returns a boolean if a field has been set.
func (o *EventBodyFlagCheck) HasCompanyId() bool {
	if o != nil && o.CompanyId.IsSet() {
		return true
	}

	return false
}

// SetCompanyId gets a reference to the given NullableString and assigns it to the CompanyId field.
func (o *EventBodyFlagCheck) SetCompanyId(v string) {
	o.CompanyId.Set(&v)
}

// SetCompanyIdNil sets the value for CompanyId to be an explicit nil
func (o *EventBodyFlagCheck) SetCompanyIdNil() {
	o.CompanyId.Set(nil)
}

// UnsetCompanyId ensures that no value is present for CompanyId, not even an explicit nil
func (o *EventBodyFlagCheck) UnsetCompanyId() {
	o.CompanyId.Unset()
}

// GetError returns the Error field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventBodyFlagCheck) GetError() string {
	if o == nil || IsNil(o.Error.Get()) {
		var ret string
		return ret
	}
	return *o.Error.Get()
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventBodyFlagCheck) GetErrorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Error.Get(), o.Error.IsSet()
}

// HasError returns a boolean if a field has been set.
func (o *EventBodyFlagCheck) HasError() bool {
	if o != nil && o.Error.IsSet() {
		return true
	}

	return false
}

// SetError gets a reference to the given NullableString and assigns it to the Error field.
func (o *EventBodyFlagCheck) SetError(v string) {
	o.Error.Set(&v)
}

// SetErrorNil sets the value for Error to be an explicit nil
func (o *EventBodyFlagCheck) SetErrorNil() {
	o.Error.Set(nil)
}

// UnsetError ensures that no value is present for Error, not even an explicit nil
func (o *EventBodyFlagCheck) UnsetError() {
	o.Error.Unset()
}

// GetFlagId returns the FlagId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventBodyFlagCheck) GetFlagId() string {
	if o == nil || IsNil(o.FlagId.Get()) {
		var ret string
		return ret
	}
	return *o.FlagId.Get()
}

// GetFlagIdOk returns a tuple with the FlagId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventBodyFlagCheck) GetFlagIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FlagId.Get(), o.FlagId.IsSet()
}

// HasFlagId returns a boolean if a field has been set.
func (o *EventBodyFlagCheck) HasFlagId() bool {
	if o != nil && o.FlagId.IsSet() {
		return true
	}

	return false
}

// SetFlagId gets a reference to the given NullableString and assigns it to the FlagId field.
func (o *EventBodyFlagCheck) SetFlagId(v string) {
	o.FlagId.Set(&v)
}

// SetFlagIdNil sets the value for FlagId to be an explicit nil
func (o *EventBodyFlagCheck) SetFlagIdNil() {
	o.FlagId.Set(nil)
}

// UnsetFlagId ensures that no value is present for FlagId, not even an explicit nil
func (o *EventBodyFlagCheck) UnsetFlagId() {
	o.FlagId.Unset()
}

// GetFlagKey returns the FlagKey field value
func (o *EventBodyFlagCheck) GetFlagKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FlagKey
}

// GetFlagKeyOk returns a tuple with the FlagKey field value
// and a boolean to check if the value has been set.
func (o *EventBodyFlagCheck) GetFlagKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FlagKey, true
}

// SetFlagKey sets field value
func (o *EventBodyFlagCheck) SetFlagKey(v string) {
	o.FlagKey = v
}

// GetReason returns the Reason field value
func (o *EventBodyFlagCheck) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *EventBodyFlagCheck) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *EventBodyFlagCheck) SetReason(v string) {
	o.Reason = v
}

// GetReqCompany returns the ReqCompany field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventBodyFlagCheck) GetReqCompany() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.ReqCompany
}

// GetReqCompanyOk returns a tuple with the ReqCompany field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventBodyFlagCheck) GetReqCompanyOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.ReqCompany) {
		return nil, false
	}
	return &o.ReqCompany, true
}

// HasReqCompany returns a boolean if a field has been set.
func (o *EventBodyFlagCheck) HasReqCompany() bool {
	if o != nil && !IsNil(o.ReqCompany) {
		return true
	}

	return false
}

// SetReqCompany gets a reference to the given map[string]string and assigns it to the ReqCompany field.
func (o *EventBodyFlagCheck) SetReqCompany(v map[string]string) {
	o.ReqCompany = v
}

// GetReqUser returns the ReqUser field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventBodyFlagCheck) GetReqUser() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}
	return o.ReqUser
}

// GetReqUserOk returns a tuple with the ReqUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventBodyFlagCheck) GetReqUserOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.ReqUser) {
		return nil, false
	}
	return &o.ReqUser, true
}

// HasReqUser returns a boolean if a field has been set.
func (o *EventBodyFlagCheck) HasReqUser() bool {
	if o != nil && !IsNil(o.ReqUser) {
		return true
	}

	return false
}

// SetReqUser gets a reference to the given map[string]string and assigns it to the ReqUser field.
func (o *EventBodyFlagCheck) SetReqUser(v map[string]string) {
	o.ReqUser = v
}

// GetRuleId returns the RuleId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventBodyFlagCheck) GetRuleId() string {
	if o == nil || IsNil(o.RuleId.Get()) {
		var ret string
		return ret
	}
	return *o.RuleId.Get()
}

// GetRuleIdOk returns a tuple with the RuleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventBodyFlagCheck) GetRuleIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RuleId.Get(), o.RuleId.IsSet()
}

// HasRuleId returns a boolean if a field has been set.
func (o *EventBodyFlagCheck) HasRuleId() bool {
	if o != nil && o.RuleId.IsSet() {
		return true
	}

	return false
}

// SetRuleId gets a reference to the given NullableString and assigns it to the RuleId field.
func (o *EventBodyFlagCheck) SetRuleId(v string) {
	o.RuleId.Set(&v)
}

// SetRuleIdNil sets the value for RuleId to be an explicit nil
func (o *EventBodyFlagCheck) SetRuleIdNil() {
	o.RuleId.Set(nil)
}

// UnsetRuleId ensures that no value is present for RuleId, not even an explicit nil
func (o *EventBodyFlagCheck) UnsetRuleId() {
	o.RuleId.Unset()
}

// GetUserId returns the UserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventBodyFlagCheck) GetUserId() string {
	if o == nil || IsNil(o.UserId.Get()) {
		var ret string
		return ret
	}
	return *o.UserId.Get()
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventBodyFlagCheck) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserId.Get(), o.UserId.IsSet()
}

// HasUserId returns a boolean if a field has been set.
func (o *EventBodyFlagCheck) HasUserId() bool {
	if o != nil && o.UserId.IsSet() {
		return true
	}

	return false
}

// SetUserId gets a reference to the given NullableString and assigns it to the UserId field.
func (o *EventBodyFlagCheck) SetUserId(v string) {
	o.UserId.Set(&v)
}

// SetUserIdNil sets the value for UserId to be an explicit nil
func (o *EventBodyFlagCheck) SetUserIdNil() {
	o.UserId.Set(nil)
}

// UnsetUserId ensures that no value is present for UserId, not even an explicit nil
func (o *EventBodyFlagCheck) UnsetUserId() {
	o.UserId.Unset()
}

// GetValue returns the Value field value
func (o *EventBodyFlagCheck) GetValue() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *EventBodyFlagCheck) GetValueOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *EventBodyFlagCheck) SetValue(v bool) {
	o.Value = v
}

func (o EventBodyFlagCheck) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventBodyFlagCheck) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CompanyId.IsSet() {
		toSerialize["company_id"] = o.CompanyId.Get()
	}
	if o.Error.IsSet() {
		toSerialize["error"] = o.Error.Get()
	}
	if o.FlagId.IsSet() {
		toSerialize["flag_id"] = o.FlagId.Get()
	}
	toSerialize["flag_key"] = o.FlagKey
	toSerialize["reason"] = o.Reason
	if o.ReqCompany != nil {
		toSerialize["req_company"] = o.ReqCompany
	}
	if o.ReqUser != nil {
		toSerialize["req_user"] = o.ReqUser
	}
	if o.RuleId.IsSet() {
		toSerialize["rule_id"] = o.RuleId.Get()
	}
	if o.UserId.IsSet() {
		toSerialize["user_id"] = o.UserId.Get()
	}
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *EventBodyFlagCheck) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"flag_key",
		"reason",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventBodyFlagCheck := _EventBodyFlagCheck{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventBodyFlagCheck)

	if err != nil {
		return err
	}

	*o = EventBodyFlagCheck(varEventBodyFlagCheck)

	return err
}

type NullableEventBodyFlagCheck struct {
	value *EventBodyFlagCheck
	isSet bool
}

func (v NullableEventBodyFlagCheck) Get() *EventBodyFlagCheck {
	return v.value
}

func (v *NullableEventBodyFlagCheck) Set(val *EventBodyFlagCheck) {
	v.value = val
	v.isSet = true
}

func (v NullableEventBodyFlagCheck) IsSet() bool {
	return v.isSet
}

func (v *NullableEventBodyFlagCheck) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventBodyFlagCheck(val *EventBodyFlagCheck) *NullableEventBodyFlagCheck {
	return &NullableEventBodyFlagCheck{value: val, isSet: true}
}

func (v NullableEventBodyFlagCheck) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventBodyFlagCheck) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
