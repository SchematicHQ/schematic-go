/*
Schematic API

Schematic API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the EventBodyTrack type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventBodyTrack{}

// EventBodyTrack struct for EventBodyTrack
type EventBodyTrack struct {
	// Key-value pairs to identify company associated with track event
	Company *map[string]string `json:"company,omitempty"`
	// The name of the type of track event
	Event string `json:"event"`
	// A map of trait names to trait values
	Traits map[string]interface{} `json:"traits,omitempty"`
	// Key-value pairs to identify user associated with track event
	User *map[string]string `json:"user,omitempty"`
}

type _EventBodyTrack EventBodyTrack

// NewEventBodyTrack instantiates a new EventBodyTrack object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventBodyTrack(event string) *EventBodyTrack {
	this := EventBodyTrack{}
	this.Event = event
	return &this
}

// NewEventBodyTrackWithDefaults instantiates a new EventBodyTrack object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventBodyTrackWithDefaults() *EventBodyTrack {
	this := EventBodyTrack{}
	return &this
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *EventBodyTrack) GetCompany() map[string]string {
	if o == nil || IsNil(o.Company) {
		var ret map[string]string
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBodyTrack) GetCompanyOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *EventBodyTrack) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given map[string]string and assigns it to the Company field.
func (o *EventBodyTrack) SetCompany(v map[string]string) {
	o.Company = &v
}

// GetEvent returns the Event field value
func (o *EventBodyTrack) GetEvent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *EventBodyTrack) GetEventOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *EventBodyTrack) SetEvent(v string) {
	o.Event = v
}

// GetTraits returns the Traits field value if set, zero value otherwise.
func (o *EventBodyTrack) GetTraits() map[string]interface{} {
	if o == nil || IsNil(o.Traits) {
		var ret map[string]interface{}
		return ret
	}
	return o.Traits
}

// GetTraitsOk returns a tuple with the Traits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBodyTrack) GetTraitsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Traits) {
		return map[string]interface{}{}, false
	}
	return o.Traits, true
}

// HasTraits returns a boolean if a field has been set.
func (o *EventBodyTrack) HasTraits() bool {
	if o != nil && !IsNil(o.Traits) {
		return true
	}

	return false
}

// SetTraits gets a reference to the given map[string]interface{} and assigns it to the Traits field.
func (o *EventBodyTrack) SetTraits(v map[string]interface{}) {
	o.Traits = v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *EventBodyTrack) GetUser() map[string]string {
	if o == nil || IsNil(o.User) {
		var ret map[string]string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventBodyTrack) GetUserOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *EventBodyTrack) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given map[string]string and assigns it to the User field.
func (o *EventBodyTrack) SetUser(v map[string]string) {
	o.User = &v
}

func (o EventBodyTrack) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventBodyTrack) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	toSerialize["event"] = o.Event
	if !IsNil(o.Traits) {
		toSerialize["traits"] = o.Traits
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

func (o *EventBodyTrack) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"event",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventBodyTrack := _EventBodyTrack{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventBodyTrack)

	if err != nil {
		return err
	}

	*o = EventBodyTrack(varEventBodyTrack)

	return err
}

type NullableEventBodyTrack struct {
	value *EventBodyTrack
	isSet bool
}

func (v NullableEventBodyTrack) Get() *EventBodyTrack {
	return v.value
}

func (v *NullableEventBodyTrack) Set(val *EventBodyTrack) {
	v.value = val
	v.isSet = true
}

func (v NullableEventBodyTrack) IsSet() bool {
	return v.isSet
}

func (v *NullableEventBodyTrack) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventBodyTrack(val *EventBodyTrack) *NullableEventBodyTrack {
	return &NullableEventBodyTrack{value: val, isSet: true}
}

func (v NullableEventBodyTrack) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventBodyTrack) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
