/*
Schematic API

Schematic API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the EventSummaryResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventSummaryResponseData{}

// EventSummaryResponseData struct for EventSummaryResponseData
type EventSummaryResponseData struct {
	CompanyCount         int32        `json:"company_count"`
	EnvironmentId        string       `json:"environment_id"`
	EventCount           int32        `json:"event_count"`
	EventSubtype         string       `json:"event_subtype"`
	LastSeenAt           NullableTime `json:"last_seen_at,omitempty"`
	UserCount            int32        `json:"user_count"`
	AdditionalProperties map[string]interface{}
}

type _EventSummaryResponseData EventSummaryResponseData

// NewEventSummaryResponseData instantiates a new EventSummaryResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventSummaryResponseData(companyCount int32, environmentId string, eventCount int32, eventSubtype string, userCount int32) *EventSummaryResponseData {
	this := EventSummaryResponseData{}
	this.CompanyCount = companyCount
	this.EnvironmentId = environmentId
	this.EventCount = eventCount
	this.EventSubtype = eventSubtype
	this.UserCount = userCount
	return &this
}

// NewEventSummaryResponseDataWithDefaults instantiates a new EventSummaryResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventSummaryResponseDataWithDefaults() *EventSummaryResponseData {
	this := EventSummaryResponseData{}
	return &this
}

// GetCompanyCount returns the CompanyCount field value
func (o *EventSummaryResponseData) GetCompanyCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CompanyCount
}

// GetCompanyCountOk returns a tuple with the CompanyCount field value
// and a boolean to check if the value has been set.
func (o *EventSummaryResponseData) GetCompanyCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompanyCount, true
}

// SetCompanyCount sets field value
func (o *EventSummaryResponseData) SetCompanyCount(v int32) {
	o.CompanyCount = v
}

// GetEnvironmentId returns the EnvironmentId field value
func (o *EventSummaryResponseData) GetEnvironmentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnvironmentId
}

// GetEnvironmentIdOk returns a tuple with the EnvironmentId field value
// and a boolean to check if the value has been set.
func (o *EventSummaryResponseData) GetEnvironmentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnvironmentId, true
}

// SetEnvironmentId sets field value
func (o *EventSummaryResponseData) SetEnvironmentId(v string) {
	o.EnvironmentId = v
}

// GetEventCount returns the EventCount field value
func (o *EventSummaryResponseData) GetEventCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EventCount
}

// GetEventCountOk returns a tuple with the EventCount field value
// and a boolean to check if the value has been set.
func (o *EventSummaryResponseData) GetEventCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventCount, true
}

// SetEventCount sets field value
func (o *EventSummaryResponseData) SetEventCount(v int32) {
	o.EventCount = v
}

// GetEventSubtype returns the EventSubtype field value
func (o *EventSummaryResponseData) GetEventSubtype() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventSubtype
}

// GetEventSubtypeOk returns a tuple with the EventSubtype field value
// and a boolean to check if the value has been set.
func (o *EventSummaryResponseData) GetEventSubtypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventSubtype, true
}

// SetEventSubtype sets field value
func (o *EventSummaryResponseData) SetEventSubtype(v string) {
	o.EventSubtype = v
}

// GetLastSeenAt returns the LastSeenAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventSummaryResponseData) GetLastSeenAt() time.Time {
	if o == nil || IsNil(o.LastSeenAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.LastSeenAt.Get()
}

// GetLastSeenAtOk returns a tuple with the LastSeenAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventSummaryResponseData) GetLastSeenAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastSeenAt.Get(), o.LastSeenAt.IsSet()
}

// HasLastSeenAt returns a boolean if a field has been set.
func (o *EventSummaryResponseData) HasLastSeenAt() bool {
	if o != nil && o.LastSeenAt.IsSet() {
		return true
	}

	return false
}

// SetLastSeenAt gets a reference to the given NullableTime and assigns it to the LastSeenAt field.
func (o *EventSummaryResponseData) SetLastSeenAt(v time.Time) {
	o.LastSeenAt.Set(&v)
}

// SetLastSeenAtNil sets the value for LastSeenAt to be an explicit nil
func (o *EventSummaryResponseData) SetLastSeenAtNil() {
	o.LastSeenAt.Set(nil)
}

// UnsetLastSeenAt ensures that no value is present for LastSeenAt, not even an explicit nil
func (o *EventSummaryResponseData) UnsetLastSeenAt() {
	o.LastSeenAt.Unset()
}

// GetUserCount returns the UserCount field value
func (o *EventSummaryResponseData) GetUserCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UserCount
}

// GetUserCountOk returns a tuple with the UserCount field value
// and a boolean to check if the value has been set.
func (o *EventSummaryResponseData) GetUserCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserCount, true
}

// SetUserCount sets field value
func (o *EventSummaryResponseData) SetUserCount(v int32) {
	o.UserCount = v
}

func (o EventSummaryResponseData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventSummaryResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["company_count"] = o.CompanyCount
	toSerialize["environment_id"] = o.EnvironmentId
	toSerialize["event_count"] = o.EventCount
	toSerialize["event_subtype"] = o.EventSubtype
	if o.LastSeenAt.IsSet() {
		toSerialize["last_seen_at"] = o.LastSeenAt.Get()
	}
	toSerialize["user_count"] = o.UserCount

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EventSummaryResponseData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"company_count",
		"environment_id",
		"event_count",
		"event_subtype",
		"user_count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventSummaryResponseData := _EventSummaryResponseData{}

	err = json.Unmarshal(data, &varEventSummaryResponseData)

	if err != nil {
		return err
	}

	*o = EventSummaryResponseData(varEventSummaryResponseData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "company_count")
		delete(additionalProperties, "environment_id")
		delete(additionalProperties, "event_count")
		delete(additionalProperties, "event_subtype")
		delete(additionalProperties, "last_seen_at")
		delete(additionalProperties, "user_count")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEventSummaryResponseData struct {
	value *EventSummaryResponseData
	isSet bool
}

func (v NullableEventSummaryResponseData) Get() *EventSummaryResponseData {
	return v.value
}

func (v *NullableEventSummaryResponseData) Set(val *EventSummaryResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableEventSummaryResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableEventSummaryResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventSummaryResponseData(val *EventSummaryResponseData) *NullableEventSummaryResponseData {
	return &NullableEventSummaryResponseData{value: val, isSet: true}
}

func (v NullableEventSummaryResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventSummaryResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
