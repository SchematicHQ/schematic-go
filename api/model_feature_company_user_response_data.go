/*
Schematic API

Schematic API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// checks if the FeatureCompanyUserResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeatureCompanyUserResponseData{}

// FeatureCompanyUserResponseData struct for FeatureCompanyUserResponseData
type FeatureCompanyUserResponseData struct {
	// Whether further usage is permitted.
	Access bool `json:"access"`
	// The maximum amount of usage that is permitted; a null value indicates that unlimited usage is permitted.
	Allocation NullableInt32 `json:"allocation,omitempty"`
	// The type of allocation that is being used.
	AllocationType  string                     `json:"allocation_type"`
	Company         *CompanyDetailResponseData `json:"company,omitempty"`
	EntitlementId   string                     `json:"entitlement_id"`
	EntitlementType string                     `json:"entitlement_type"`
	Feature         *FeatureDetailResponseData `json:"feature,omitempty"`
	// The period over which usage is measured.
	Period NullableString    `json:"period,omitempty"`
	Plan   *PlanResponseData `json:"plan,omitempty"`
	// The amount of usage that has been consumed; a null value indicates that usage is not being measured.
	Usage                NullableInt32     `json:"usage,omitempty"`
	User                 *UserResponseData `json:"user,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FeatureCompanyUserResponseData FeatureCompanyUserResponseData

// NewFeatureCompanyUserResponseData instantiates a new FeatureCompanyUserResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeatureCompanyUserResponseData(access bool, allocationType string, entitlementId string, entitlementType string) *FeatureCompanyUserResponseData {
	this := FeatureCompanyUserResponseData{}
	this.Access = access
	this.AllocationType = allocationType
	this.EntitlementId = entitlementId
	this.EntitlementType = entitlementType
	return &this
}

// NewFeatureCompanyUserResponseDataWithDefaults instantiates a new FeatureCompanyUserResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeatureCompanyUserResponseDataWithDefaults() *FeatureCompanyUserResponseData {
	this := FeatureCompanyUserResponseData{}
	return &this
}

// GetAccess returns the Access field value
func (o *FeatureCompanyUserResponseData) GetAccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Access
}

// GetAccessOk returns a tuple with the Access field value
// and a boolean to check if the value has been set.
func (o *FeatureCompanyUserResponseData) GetAccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Access, true
}

// SetAccess sets field value
func (o *FeatureCompanyUserResponseData) SetAccess(v bool) {
	o.Access = v
}

// GetAllocation returns the Allocation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeatureCompanyUserResponseData) GetAllocation() int32 {
	if o == nil || IsNil(o.Allocation.Get()) {
		var ret int32
		return ret
	}
	return *o.Allocation.Get()
}

// GetAllocationOk returns a tuple with the Allocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeatureCompanyUserResponseData) GetAllocationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Allocation.Get(), o.Allocation.IsSet()
}

// HasAllocation returns a boolean if a field has been set.
func (o *FeatureCompanyUserResponseData) HasAllocation() bool {
	if o != nil && o.Allocation.IsSet() {
		return true
	}

	return false
}

// SetAllocation gets a reference to the given NullableInt32 and assigns it to the Allocation field.
func (o *FeatureCompanyUserResponseData) SetAllocation(v int32) {
	o.Allocation.Set(&v)
}

// SetAllocationNil sets the value for Allocation to be an explicit nil
func (o *FeatureCompanyUserResponseData) SetAllocationNil() {
	o.Allocation.Set(nil)
}

// UnsetAllocation ensures that no value is present for Allocation, not even an explicit nil
func (o *FeatureCompanyUserResponseData) UnsetAllocation() {
	o.Allocation.Unset()
}

// GetAllocationType returns the AllocationType field value
func (o *FeatureCompanyUserResponseData) GetAllocationType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AllocationType
}

// GetAllocationTypeOk returns a tuple with the AllocationType field value
// and a boolean to check if the value has been set.
func (o *FeatureCompanyUserResponseData) GetAllocationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllocationType, true
}

// SetAllocationType sets field value
func (o *FeatureCompanyUserResponseData) SetAllocationType(v string) {
	o.AllocationType = v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *FeatureCompanyUserResponseData) GetCompany() CompanyDetailResponseData {
	if o == nil || IsNil(o.Company) {
		var ret CompanyDetailResponseData
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureCompanyUserResponseData) GetCompanyOk() (*CompanyDetailResponseData, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *FeatureCompanyUserResponseData) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given CompanyDetailResponseData and assigns it to the Company field.
func (o *FeatureCompanyUserResponseData) SetCompany(v CompanyDetailResponseData) {
	o.Company = &v
}

// GetEntitlementId returns the EntitlementId field value
func (o *FeatureCompanyUserResponseData) GetEntitlementId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntitlementId
}

// GetEntitlementIdOk returns a tuple with the EntitlementId field value
// and a boolean to check if the value has been set.
func (o *FeatureCompanyUserResponseData) GetEntitlementIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntitlementId, true
}

// SetEntitlementId sets field value
func (o *FeatureCompanyUserResponseData) SetEntitlementId(v string) {
	o.EntitlementId = v
}

// GetEntitlementType returns the EntitlementType field value
func (o *FeatureCompanyUserResponseData) GetEntitlementType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntitlementType
}

// GetEntitlementTypeOk returns a tuple with the EntitlementType field value
// and a boolean to check if the value has been set.
func (o *FeatureCompanyUserResponseData) GetEntitlementTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntitlementType, true
}

// SetEntitlementType sets field value
func (o *FeatureCompanyUserResponseData) SetEntitlementType(v string) {
	o.EntitlementType = v
}

// GetFeature returns the Feature field value if set, zero value otherwise.
func (o *FeatureCompanyUserResponseData) GetFeature() FeatureDetailResponseData {
	if o == nil || IsNil(o.Feature) {
		var ret FeatureDetailResponseData
		return ret
	}
	return *o.Feature
}

// GetFeatureOk returns a tuple with the Feature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureCompanyUserResponseData) GetFeatureOk() (*FeatureDetailResponseData, bool) {
	if o == nil || IsNil(o.Feature) {
		return nil, false
	}
	return o.Feature, true
}

// HasFeature returns a boolean if a field has been set.
func (o *FeatureCompanyUserResponseData) HasFeature() bool {
	if o != nil && !IsNil(o.Feature) {
		return true
	}

	return false
}

// SetFeature gets a reference to the given FeatureDetailResponseData and assigns it to the Feature field.
func (o *FeatureCompanyUserResponseData) SetFeature(v FeatureDetailResponseData) {
	o.Feature = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeatureCompanyUserResponseData) GetPeriod() string {
	if o == nil || IsNil(o.Period.Get()) {
		var ret string
		return ret
	}
	return *o.Period.Get()
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeatureCompanyUserResponseData) GetPeriodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Period.Get(), o.Period.IsSet()
}

// HasPeriod returns a boolean if a field has been set.
func (o *FeatureCompanyUserResponseData) HasPeriod() bool {
	if o != nil && o.Period.IsSet() {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given NullableString and assigns it to the Period field.
func (o *FeatureCompanyUserResponseData) SetPeriod(v string) {
	o.Period.Set(&v)
}

// SetPeriodNil sets the value for Period to be an explicit nil
func (o *FeatureCompanyUserResponseData) SetPeriodNil() {
	o.Period.Set(nil)
}

// UnsetPeriod ensures that no value is present for Period, not even an explicit nil
func (o *FeatureCompanyUserResponseData) UnsetPeriod() {
	o.Period.Unset()
}

// GetPlan returns the Plan field value if set, zero value otherwise.
func (o *FeatureCompanyUserResponseData) GetPlan() PlanResponseData {
	if o == nil || IsNil(o.Plan) {
		var ret PlanResponseData
		return ret
	}
	return *o.Plan
}

// GetPlanOk returns a tuple with the Plan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureCompanyUserResponseData) GetPlanOk() (*PlanResponseData, bool) {
	if o == nil || IsNil(o.Plan) {
		return nil, false
	}
	return o.Plan, true
}

// HasPlan returns a boolean if a field has been set.
func (o *FeatureCompanyUserResponseData) HasPlan() bool {
	if o != nil && !IsNil(o.Plan) {
		return true
	}

	return false
}

// SetPlan gets a reference to the given PlanResponseData and assigns it to the Plan field.
func (o *FeatureCompanyUserResponseData) SetPlan(v PlanResponseData) {
	o.Plan = &v
}

// GetUsage returns the Usage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeatureCompanyUserResponseData) GetUsage() int32 {
	if o == nil || IsNil(o.Usage.Get()) {
		var ret int32
		return ret
	}
	return *o.Usage.Get()
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeatureCompanyUserResponseData) GetUsageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Usage.Get(), o.Usage.IsSet()
}

// HasUsage returns a boolean if a field has been set.
func (o *FeatureCompanyUserResponseData) HasUsage() bool {
	if o != nil && o.Usage.IsSet() {
		return true
	}

	return false
}

// SetUsage gets a reference to the given NullableInt32 and assigns it to the Usage field.
func (o *FeatureCompanyUserResponseData) SetUsage(v int32) {
	o.Usage.Set(&v)
}

// SetUsageNil sets the value for Usage to be an explicit nil
func (o *FeatureCompanyUserResponseData) SetUsageNil() {
	o.Usage.Set(nil)
}

// UnsetUsage ensures that no value is present for Usage, not even an explicit nil
func (o *FeatureCompanyUserResponseData) UnsetUsage() {
	o.Usage.Unset()
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *FeatureCompanyUserResponseData) GetUser() UserResponseData {
	if o == nil || IsNil(o.User) {
		var ret UserResponseData
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureCompanyUserResponseData) GetUserOk() (*UserResponseData, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *FeatureCompanyUserResponseData) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given UserResponseData and assigns it to the User field.
func (o *FeatureCompanyUserResponseData) SetUser(v UserResponseData) {
	o.User = &v
}

func (o FeatureCompanyUserResponseData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeatureCompanyUserResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["access"] = o.Access
	if o.Allocation.IsSet() {
		toSerialize["allocation"] = o.Allocation.Get()
	}
	toSerialize["allocation_type"] = o.AllocationType
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	toSerialize["entitlement_id"] = o.EntitlementId
	toSerialize["entitlement_type"] = o.EntitlementType
	if !IsNil(o.Feature) {
		toSerialize["feature"] = o.Feature
	}
	if o.Period.IsSet() {
		toSerialize["period"] = o.Period.Get()
	}
	if !IsNil(o.Plan) {
		toSerialize["plan"] = o.Plan
	}
	if o.Usage.IsSet() {
		toSerialize["usage"] = o.Usage.Get()
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FeatureCompanyUserResponseData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"access",
		"allocation_type",
		"entitlement_id",
		"entitlement_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFeatureCompanyUserResponseData := _FeatureCompanyUserResponseData{}

	err = json.Unmarshal(data, &varFeatureCompanyUserResponseData)

	if err != nil {
		return err
	}

	*o = FeatureCompanyUserResponseData(varFeatureCompanyUserResponseData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "access")
		delete(additionalProperties, "allocation")
		delete(additionalProperties, "allocation_type")
		delete(additionalProperties, "company")
		delete(additionalProperties, "entitlement_id")
		delete(additionalProperties, "entitlement_type")
		delete(additionalProperties, "feature")
		delete(additionalProperties, "period")
		delete(additionalProperties, "plan")
		delete(additionalProperties, "usage")
		delete(additionalProperties, "user")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFeatureCompanyUserResponseData struct {
	value *FeatureCompanyUserResponseData
	isSet bool
}

func (v NullableFeatureCompanyUserResponseData) Get() *FeatureCompanyUserResponseData {
	return v.value
}

func (v *NullableFeatureCompanyUserResponseData) Set(val *FeatureCompanyUserResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableFeatureCompanyUserResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableFeatureCompanyUserResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeatureCompanyUserResponseData(val *FeatureCompanyUserResponseData) *NullableFeatureCompanyUserResponseData {
	return &NullableFeatureCompanyUserResponseData{value: val, isSet: true}
}

func (v NullableFeatureCompanyUserResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeatureCompanyUserResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
