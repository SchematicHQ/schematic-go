/*
Schematic API

Schematic API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the GetFeatureUsageByCompanyParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetFeatureUsageByCompanyParams{}

// GetFeatureUsageByCompanyParams Input parameters
type GetFeatureUsageByCompanyParams struct {
	Keys                 map[string]interface{} `json:"keys,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GetFeatureUsageByCompanyParams GetFeatureUsageByCompanyParams

// NewGetFeatureUsageByCompanyParams instantiates a new GetFeatureUsageByCompanyParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetFeatureUsageByCompanyParams() *GetFeatureUsageByCompanyParams {
	this := GetFeatureUsageByCompanyParams{}
	return &this
}

// NewGetFeatureUsageByCompanyParamsWithDefaults instantiates a new GetFeatureUsageByCompanyParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetFeatureUsageByCompanyParamsWithDefaults() *GetFeatureUsageByCompanyParams {
	this := GetFeatureUsageByCompanyParams{}
	return &this
}

// GetKeys returns the Keys field value if set, zero value otherwise.
func (o *GetFeatureUsageByCompanyParams) GetKeys() map[string]interface{} {
	if o == nil || IsNil(o.Keys) {
		var ret map[string]interface{}
		return ret
	}
	return o.Keys
}

// GetKeysOk returns a tuple with the Keys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetFeatureUsageByCompanyParams) GetKeysOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Keys) {
		return map[string]interface{}{}, false
	}
	return o.Keys, true
}

// HasKeys returns a boolean if a field has been set.
func (o *GetFeatureUsageByCompanyParams) HasKeys() bool {
	if o != nil && !IsNil(o.Keys) {
		return true
	}

	return false
}

// SetKeys gets a reference to the given map[string]interface{} and assigns it to the Keys field.
func (o *GetFeatureUsageByCompanyParams) SetKeys(v map[string]interface{}) {
	o.Keys = v
}

func (o GetFeatureUsageByCompanyParams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetFeatureUsageByCompanyParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Keys) {
		toSerialize["keys"] = o.Keys
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetFeatureUsageByCompanyParams) UnmarshalJSON(data []byte) (err error) {
	varGetFeatureUsageByCompanyParams := _GetFeatureUsageByCompanyParams{}

	err = json.Unmarshal(data, &varGetFeatureUsageByCompanyParams)

	if err != nil {
		return err
	}

	*o = GetFeatureUsageByCompanyParams(varGetFeatureUsageByCompanyParams)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "keys")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetFeatureUsageByCompanyParams struct {
	value *GetFeatureUsageByCompanyParams
	isSet bool
}

func (v NullableGetFeatureUsageByCompanyParams) Get() *GetFeatureUsageByCompanyParams {
	return v.value
}

func (v *NullableGetFeatureUsageByCompanyParams) Set(val *GetFeatureUsageByCompanyParams) {
	v.value = val
	v.isSet = true
}

func (v NullableGetFeatureUsageByCompanyParams) IsSet() bool {
	return v.isSet
}

func (v *NullableGetFeatureUsageByCompanyParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetFeatureUsageByCompanyParams(val *GetFeatureUsageByCompanyParams) *NullableGetFeatureUsageByCompanyParams {
	return &NullableGetFeatureUsageByCompanyParams{value: val, isSet: true}
}

func (v NullableGetFeatureUsageByCompanyParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetFeatureUsageByCompanyParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
