/*
Schematic API

Schematic API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the IssueTemporaryAccessTokenRequestBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IssueTemporaryAccessTokenRequestBody{}

// IssueTemporaryAccessTokenRequestBody struct for IssueTemporaryAccessTokenRequestBody
type IssueTemporaryAccessTokenRequestBody struct {
	Lookup       map[string]string `json:"lookup"`
	ResourceType string            `json:"resource_type"`
}

type _IssueTemporaryAccessTokenRequestBody IssueTemporaryAccessTokenRequestBody

// NewIssueTemporaryAccessTokenRequestBody instantiates a new IssueTemporaryAccessTokenRequestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueTemporaryAccessTokenRequestBody(lookup map[string]string, resourceType string) *IssueTemporaryAccessTokenRequestBody {
	this := IssueTemporaryAccessTokenRequestBody{}
	this.Lookup = lookup
	this.ResourceType = resourceType
	return &this
}

// NewIssueTemporaryAccessTokenRequestBodyWithDefaults instantiates a new IssueTemporaryAccessTokenRequestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueTemporaryAccessTokenRequestBodyWithDefaults() *IssueTemporaryAccessTokenRequestBody {
	this := IssueTemporaryAccessTokenRequestBody{}
	return &this
}

// GetLookup returns the Lookup field value
func (o *IssueTemporaryAccessTokenRequestBody) GetLookup() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Lookup
}

// GetLookupOk returns a tuple with the Lookup field value
// and a boolean to check if the value has been set.
func (o *IssueTemporaryAccessTokenRequestBody) GetLookupOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Lookup, true
}

// SetLookup sets field value
func (o *IssueTemporaryAccessTokenRequestBody) SetLookup(v map[string]string) {
	o.Lookup = v
}

// GetResourceType returns the ResourceType field value
func (o *IssueTemporaryAccessTokenRequestBody) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *IssueTemporaryAccessTokenRequestBody) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *IssueTemporaryAccessTokenRequestBody) SetResourceType(v string) {
	o.ResourceType = v
}

func (o IssueTemporaryAccessTokenRequestBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IssueTemporaryAccessTokenRequestBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["lookup"] = o.Lookup
	toSerialize["resource_type"] = o.ResourceType
	return toSerialize, nil
}

func (o *IssueTemporaryAccessTokenRequestBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"lookup",
		"resource_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIssueTemporaryAccessTokenRequestBody := _IssueTemporaryAccessTokenRequestBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIssueTemporaryAccessTokenRequestBody)

	if err != nil {
		return err
	}

	*o = IssueTemporaryAccessTokenRequestBody(varIssueTemporaryAccessTokenRequestBody)

	return err
}

type NullableIssueTemporaryAccessTokenRequestBody struct {
	value *IssueTemporaryAccessTokenRequestBody
	isSet bool
}

func (v NullableIssueTemporaryAccessTokenRequestBody) Get() *IssueTemporaryAccessTokenRequestBody {
	return v.value
}

func (v *NullableIssueTemporaryAccessTokenRequestBody) Set(val *IssueTemporaryAccessTokenRequestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueTemporaryAccessTokenRequestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueTemporaryAccessTokenRequestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueTemporaryAccessTokenRequestBody(val *IssueTemporaryAccessTokenRequestBody) *NullableIssueTemporaryAccessTokenRequestBody {
	return &NullableIssueTemporaryAccessTokenRequestBody{value: val, isSet: true}
}

func (v NullableIssueTemporaryAccessTokenRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueTemporaryAccessTokenRequestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
