/*
Schematic API

Schematic API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// checks if the ListBillingProductsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListBillingProductsResponse{}

// ListBillingProductsResponse struct for ListBillingProductsResponse
type ListBillingProductsResponse struct {
	// The returned resources
	Data                 []BillingProductDetailResponseData `json:"data"`
	Params               ListBillingProductsParams          `json:"params"`
	AdditionalProperties map[string]interface{}
}

type _ListBillingProductsResponse ListBillingProductsResponse

// NewListBillingProductsResponse instantiates a new ListBillingProductsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListBillingProductsResponse(data []BillingProductDetailResponseData, params ListBillingProductsParams) *ListBillingProductsResponse {
	this := ListBillingProductsResponse{}
	this.Data = data
	this.Params = params
	return &this
}

// NewListBillingProductsResponseWithDefaults instantiates a new ListBillingProductsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListBillingProductsResponseWithDefaults() *ListBillingProductsResponse {
	this := ListBillingProductsResponse{}
	return &this
}

// GetData returns the Data field value
func (o *ListBillingProductsResponse) GetData() []BillingProductDetailResponseData {
	if o == nil {
		var ret []BillingProductDetailResponseData
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ListBillingProductsResponse) GetDataOk() ([]BillingProductDetailResponseData, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *ListBillingProductsResponse) SetData(v []BillingProductDetailResponseData) {
	o.Data = v
}

// GetParams returns the Params field value
func (o *ListBillingProductsResponse) GetParams() ListBillingProductsParams {
	if o == nil {
		var ret ListBillingProductsParams
		return ret
	}

	return o.Params
}

// GetParamsOk returns a tuple with the Params field value
// and a boolean to check if the value has been set.
func (o *ListBillingProductsResponse) GetParamsOk() (*ListBillingProductsParams, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Params, true
}

// SetParams sets field value
func (o *ListBillingProductsResponse) SetParams(v ListBillingProductsParams) {
	o.Params = v
}

func (o ListBillingProductsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListBillingProductsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["params"] = o.Params

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ListBillingProductsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"params",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListBillingProductsResponse := _ListBillingProductsResponse{}

	err = json.Unmarshal(data, &varListBillingProductsResponse)

	if err != nil {
		return err
	}

	*o = ListBillingProductsResponse(varListBillingProductsResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "data")
		delete(additionalProperties, "params")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableListBillingProductsResponse struct {
	value *ListBillingProductsResponse
	isSet bool
}

func (v NullableListBillingProductsResponse) Get() *ListBillingProductsResponse {
	return v.value
}

func (v *NullableListBillingProductsResponse) Set(val *ListBillingProductsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListBillingProductsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListBillingProductsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListBillingProductsResponse(val *ListBillingProductsResponse) *NullableListBillingProductsResponse {
	return &NullableListBillingProductsResponse{value: val, isSet: true}
}

func (v NullableListBillingProductsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListBillingProductsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
