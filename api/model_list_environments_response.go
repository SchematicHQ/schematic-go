/*
Schematic API

Schematic API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// checks if the ListEnvironmentsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListEnvironmentsResponse{}

// ListEnvironmentsResponse struct for ListEnvironmentsResponse
type ListEnvironmentsResponse struct {
	// The returned resources
	Data                 []EnvironmentResponseData `json:"data"`
	Params               ListEnvironmentsParams    `json:"params"`
	AdditionalProperties map[string]interface{}
}

type _ListEnvironmentsResponse ListEnvironmentsResponse

// NewListEnvironmentsResponse instantiates a new ListEnvironmentsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListEnvironmentsResponse(data []EnvironmentResponseData, params ListEnvironmentsParams) *ListEnvironmentsResponse {
	this := ListEnvironmentsResponse{}
	this.Data = data
	this.Params = params
	return &this
}

// NewListEnvironmentsResponseWithDefaults instantiates a new ListEnvironmentsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListEnvironmentsResponseWithDefaults() *ListEnvironmentsResponse {
	this := ListEnvironmentsResponse{}
	return &this
}

// GetData returns the Data field value
func (o *ListEnvironmentsResponse) GetData() []EnvironmentResponseData {
	if o == nil {
		var ret []EnvironmentResponseData
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ListEnvironmentsResponse) GetDataOk() ([]EnvironmentResponseData, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *ListEnvironmentsResponse) SetData(v []EnvironmentResponseData) {
	o.Data = v
}

// GetParams returns the Params field value
func (o *ListEnvironmentsResponse) GetParams() ListEnvironmentsParams {
	if o == nil {
		var ret ListEnvironmentsParams
		return ret
	}

	return o.Params
}

// GetParamsOk returns a tuple with the Params field value
// and a boolean to check if the value has been set.
func (o *ListEnvironmentsResponse) GetParamsOk() (*ListEnvironmentsParams, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Params, true
}

// SetParams sets field value
func (o *ListEnvironmentsResponse) SetParams(v ListEnvironmentsParams) {
	o.Params = v
}

func (o ListEnvironmentsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListEnvironmentsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["params"] = o.Params

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ListEnvironmentsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"params",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListEnvironmentsResponse := _ListEnvironmentsResponse{}

	err = json.Unmarshal(data, &varListEnvironmentsResponse)

	if err != nil {
		return err
	}

	*o = ListEnvironmentsResponse(varListEnvironmentsResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "data")
		delete(additionalProperties, "params")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableListEnvironmentsResponse struct {
	value *ListEnvironmentsResponse
	isSet bool
}

func (v NullableListEnvironmentsResponse) Get() *ListEnvironmentsResponse {
	return v.value
}

func (v *NullableListEnvironmentsResponse) Set(val *ListEnvironmentsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListEnvironmentsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListEnvironmentsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListEnvironmentsResponse(val *ListEnvironmentsResponse) *NullableListEnvironmentsResponse {
	return &NullableListEnvironmentsResponse{value: val, isSet: true}
}

func (v NullableListEnvironmentsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListEnvironmentsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
