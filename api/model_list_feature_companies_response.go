/*
Schematic API

Schematic API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// checks if the ListFeatureCompaniesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListFeatureCompaniesResponse{}

// ListFeatureCompaniesResponse struct for ListFeatureCompaniesResponse
type ListFeatureCompaniesResponse struct {
	// The returned resources
	Data                 []FeatureCompanyResponseData `json:"data"`
	Params               ListFeatureCompaniesParams   `json:"params"`
	AdditionalProperties map[string]interface{}
}

type _ListFeatureCompaniesResponse ListFeatureCompaniesResponse

// NewListFeatureCompaniesResponse instantiates a new ListFeatureCompaniesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListFeatureCompaniesResponse(data []FeatureCompanyResponseData, params ListFeatureCompaniesParams) *ListFeatureCompaniesResponse {
	this := ListFeatureCompaniesResponse{}
	this.Data = data
	this.Params = params
	return &this
}

// NewListFeatureCompaniesResponseWithDefaults instantiates a new ListFeatureCompaniesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListFeatureCompaniesResponseWithDefaults() *ListFeatureCompaniesResponse {
	this := ListFeatureCompaniesResponse{}
	return &this
}

// GetData returns the Data field value
func (o *ListFeatureCompaniesResponse) GetData() []FeatureCompanyResponseData {
	if o == nil {
		var ret []FeatureCompanyResponseData
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ListFeatureCompaniesResponse) GetDataOk() ([]FeatureCompanyResponseData, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *ListFeatureCompaniesResponse) SetData(v []FeatureCompanyResponseData) {
	o.Data = v
}

// GetParams returns the Params field value
func (o *ListFeatureCompaniesResponse) GetParams() ListFeatureCompaniesParams {
	if o == nil {
		var ret ListFeatureCompaniesParams
		return ret
	}

	return o.Params
}

// GetParamsOk returns a tuple with the Params field value
// and a boolean to check if the value has been set.
func (o *ListFeatureCompaniesResponse) GetParamsOk() (*ListFeatureCompaniesParams, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Params, true
}

// SetParams sets field value
func (o *ListFeatureCompaniesResponse) SetParams(v ListFeatureCompaniesParams) {
	o.Params = v
}

func (o ListFeatureCompaniesResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListFeatureCompaniesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["params"] = o.Params

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ListFeatureCompaniesResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"params",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListFeatureCompaniesResponse := _ListFeatureCompaniesResponse{}

	err = json.Unmarshal(data, &varListFeatureCompaniesResponse)

	if err != nil {
		return err
	}

	*o = ListFeatureCompaniesResponse(varListFeatureCompaniesResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "data")
		delete(additionalProperties, "params")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableListFeatureCompaniesResponse struct {
	value *ListFeatureCompaniesResponse
	isSet bool
}

func (v NullableListFeatureCompaniesResponse) Get() *ListFeatureCompaniesResponse {
	return v.value
}

func (v *NullableListFeatureCompaniesResponse) Set(val *ListFeatureCompaniesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListFeatureCompaniesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListFeatureCompaniesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListFeatureCompaniesResponse(val *ListFeatureCompaniesResponse) *NullableListFeatureCompaniesResponse {
	return &NullableListFeatureCompaniesResponse{value: val, isSet: true}
}

func (v NullableListFeatureCompaniesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListFeatureCompaniesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
