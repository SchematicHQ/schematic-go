/*
Schematic API

Schematic API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the PlanEntitlementResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanEntitlementResponseData{}

// PlanEntitlementResponseData The updated resource
type PlanEntitlementResponseData struct {
	CreatedAt            time.Time                          `json:"created_at"`
	EnvironmentId        string                             `json:"environment_id"`
	Feature              *FeatureResponseData               `json:"feature,omitempty"`
	FeatureId            string                             `json:"feature_id"`
	Id                   string                             `json:"id"`
	MetricPeriod         NullableString                     `json:"metric_period,omitempty"`
	Plan                 *PlanResponseData                  `json:"plan,omitempty"`
	PlanId               string                             `json:"plan_id"`
	RuleId               string                             `json:"rule_id"`
	UpdatedAt            time.Time                          `json:"updated_at"`
	ValueBool            NullableBool                       `json:"value_bool,omitempty"`
	ValueNumeric         NullableInt32                      `json:"value_numeric,omitempty"`
	ValueTrait           *EntityTraitDefinitionResponseData `json:"value_trait,omitempty"`
	ValueTraitId         NullableString                     `json:"value_trait_id,omitempty"`
	ValueType            string                             `json:"value_type"`
	AdditionalProperties map[string]interface{}
}

type _PlanEntitlementResponseData PlanEntitlementResponseData

// NewPlanEntitlementResponseData instantiates a new PlanEntitlementResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanEntitlementResponseData(createdAt time.Time, environmentId string, featureId string, id string, planId string, ruleId string, updatedAt time.Time, valueType string) *PlanEntitlementResponseData {
	this := PlanEntitlementResponseData{}
	this.CreatedAt = createdAt
	this.EnvironmentId = environmentId
	this.FeatureId = featureId
	this.Id = id
	this.PlanId = planId
	this.RuleId = ruleId
	this.UpdatedAt = updatedAt
	this.ValueType = valueType
	return &this
}

// NewPlanEntitlementResponseDataWithDefaults instantiates a new PlanEntitlementResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanEntitlementResponseDataWithDefaults() *PlanEntitlementResponseData {
	this := PlanEntitlementResponseData{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *PlanEntitlementResponseData) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *PlanEntitlementResponseData) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *PlanEntitlementResponseData) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetEnvironmentId returns the EnvironmentId field value
func (o *PlanEntitlementResponseData) GetEnvironmentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnvironmentId
}

// GetEnvironmentIdOk returns a tuple with the EnvironmentId field value
// and a boolean to check if the value has been set.
func (o *PlanEntitlementResponseData) GetEnvironmentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnvironmentId, true
}

// SetEnvironmentId sets field value
func (o *PlanEntitlementResponseData) SetEnvironmentId(v string) {
	o.EnvironmentId = v
}

// GetFeature returns the Feature field value if set, zero value otherwise.
func (o *PlanEntitlementResponseData) GetFeature() FeatureResponseData {
	if o == nil || IsNil(o.Feature) {
		var ret FeatureResponseData
		return ret
	}
	return *o.Feature
}

// GetFeatureOk returns a tuple with the Feature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanEntitlementResponseData) GetFeatureOk() (*FeatureResponseData, bool) {
	if o == nil || IsNil(o.Feature) {
		return nil, false
	}
	return o.Feature, true
}

// HasFeature returns a boolean if a field has been set.
func (o *PlanEntitlementResponseData) HasFeature() bool {
	if o != nil && !IsNil(o.Feature) {
		return true
	}

	return false
}

// SetFeature gets a reference to the given FeatureResponseData and assigns it to the Feature field.
func (o *PlanEntitlementResponseData) SetFeature(v FeatureResponseData) {
	o.Feature = &v
}

// GetFeatureId returns the FeatureId field value
func (o *PlanEntitlementResponseData) GetFeatureId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FeatureId
}

// GetFeatureIdOk returns a tuple with the FeatureId field value
// and a boolean to check if the value has been set.
func (o *PlanEntitlementResponseData) GetFeatureIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeatureId, true
}

// SetFeatureId sets field value
func (o *PlanEntitlementResponseData) SetFeatureId(v string) {
	o.FeatureId = v
}

// GetId returns the Id field value
func (o *PlanEntitlementResponseData) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PlanEntitlementResponseData) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PlanEntitlementResponseData) SetId(v string) {
	o.Id = v
}

// GetMetricPeriod returns the MetricPeriod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlanEntitlementResponseData) GetMetricPeriod() string {
	if o == nil || IsNil(o.MetricPeriod.Get()) {
		var ret string
		return ret
	}
	return *o.MetricPeriod.Get()
}

// GetMetricPeriodOk returns a tuple with the MetricPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlanEntitlementResponseData) GetMetricPeriodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MetricPeriod.Get(), o.MetricPeriod.IsSet()
}

// HasMetricPeriod returns a boolean if a field has been set.
func (o *PlanEntitlementResponseData) HasMetricPeriod() bool {
	if o != nil && o.MetricPeriod.IsSet() {
		return true
	}

	return false
}

// SetMetricPeriod gets a reference to the given NullableString and assigns it to the MetricPeriod field.
func (o *PlanEntitlementResponseData) SetMetricPeriod(v string) {
	o.MetricPeriod.Set(&v)
}

// SetMetricPeriodNil sets the value for MetricPeriod to be an explicit nil
func (o *PlanEntitlementResponseData) SetMetricPeriodNil() {
	o.MetricPeriod.Set(nil)
}

// UnsetMetricPeriod ensures that no value is present for MetricPeriod, not even an explicit nil
func (o *PlanEntitlementResponseData) UnsetMetricPeriod() {
	o.MetricPeriod.Unset()
}

// GetPlan returns the Plan field value if set, zero value otherwise.
func (o *PlanEntitlementResponseData) GetPlan() PlanResponseData {
	if o == nil || IsNil(o.Plan) {
		var ret PlanResponseData
		return ret
	}
	return *o.Plan
}

// GetPlanOk returns a tuple with the Plan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanEntitlementResponseData) GetPlanOk() (*PlanResponseData, bool) {
	if o == nil || IsNil(o.Plan) {
		return nil, false
	}
	return o.Plan, true
}

// HasPlan returns a boolean if a field has been set.
func (o *PlanEntitlementResponseData) HasPlan() bool {
	if o != nil && !IsNil(o.Plan) {
		return true
	}

	return false
}

// SetPlan gets a reference to the given PlanResponseData and assigns it to the Plan field.
func (o *PlanEntitlementResponseData) SetPlan(v PlanResponseData) {
	o.Plan = &v
}

// GetPlanId returns the PlanId field value
func (o *PlanEntitlementResponseData) GetPlanId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PlanId
}

// GetPlanIdOk returns a tuple with the PlanId field value
// and a boolean to check if the value has been set.
func (o *PlanEntitlementResponseData) GetPlanIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlanId, true
}

// SetPlanId sets field value
func (o *PlanEntitlementResponseData) SetPlanId(v string) {
	o.PlanId = v
}

// GetRuleId returns the RuleId field value
func (o *PlanEntitlementResponseData) GetRuleId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RuleId
}

// GetRuleIdOk returns a tuple with the RuleId field value
// and a boolean to check if the value has been set.
func (o *PlanEntitlementResponseData) GetRuleIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RuleId, true
}

// SetRuleId sets field value
func (o *PlanEntitlementResponseData) SetRuleId(v string) {
	o.RuleId = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *PlanEntitlementResponseData) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *PlanEntitlementResponseData) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *PlanEntitlementResponseData) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetValueBool returns the ValueBool field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlanEntitlementResponseData) GetValueBool() bool {
	if o == nil || IsNil(o.ValueBool.Get()) {
		var ret bool
		return ret
	}
	return *o.ValueBool.Get()
}

// GetValueBoolOk returns a tuple with the ValueBool field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlanEntitlementResponseData) GetValueBoolOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ValueBool.Get(), o.ValueBool.IsSet()
}

// HasValueBool returns a boolean if a field has been set.
func (o *PlanEntitlementResponseData) HasValueBool() bool {
	if o != nil && o.ValueBool.IsSet() {
		return true
	}

	return false
}

// SetValueBool gets a reference to the given NullableBool and assigns it to the ValueBool field.
func (o *PlanEntitlementResponseData) SetValueBool(v bool) {
	o.ValueBool.Set(&v)
}

// SetValueBoolNil sets the value for ValueBool to be an explicit nil
func (o *PlanEntitlementResponseData) SetValueBoolNil() {
	o.ValueBool.Set(nil)
}

// UnsetValueBool ensures that no value is present for ValueBool, not even an explicit nil
func (o *PlanEntitlementResponseData) UnsetValueBool() {
	o.ValueBool.Unset()
}

// GetValueNumeric returns the ValueNumeric field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlanEntitlementResponseData) GetValueNumeric() int32 {
	if o == nil || IsNil(o.ValueNumeric.Get()) {
		var ret int32
		return ret
	}
	return *o.ValueNumeric.Get()
}

// GetValueNumericOk returns a tuple with the ValueNumeric field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlanEntitlementResponseData) GetValueNumericOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ValueNumeric.Get(), o.ValueNumeric.IsSet()
}

// HasValueNumeric returns a boolean if a field has been set.
func (o *PlanEntitlementResponseData) HasValueNumeric() bool {
	if o != nil && o.ValueNumeric.IsSet() {
		return true
	}

	return false
}

// SetValueNumeric gets a reference to the given NullableInt32 and assigns it to the ValueNumeric field.
func (o *PlanEntitlementResponseData) SetValueNumeric(v int32) {
	o.ValueNumeric.Set(&v)
}

// SetValueNumericNil sets the value for ValueNumeric to be an explicit nil
func (o *PlanEntitlementResponseData) SetValueNumericNil() {
	o.ValueNumeric.Set(nil)
}

// UnsetValueNumeric ensures that no value is present for ValueNumeric, not even an explicit nil
func (o *PlanEntitlementResponseData) UnsetValueNumeric() {
	o.ValueNumeric.Unset()
}

// GetValueTrait returns the ValueTrait field value if set, zero value otherwise.
func (o *PlanEntitlementResponseData) GetValueTrait() EntityTraitDefinitionResponseData {
	if o == nil || IsNil(o.ValueTrait) {
		var ret EntityTraitDefinitionResponseData
		return ret
	}
	return *o.ValueTrait
}

// GetValueTraitOk returns a tuple with the ValueTrait field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanEntitlementResponseData) GetValueTraitOk() (*EntityTraitDefinitionResponseData, bool) {
	if o == nil || IsNil(o.ValueTrait) {
		return nil, false
	}
	return o.ValueTrait, true
}

// HasValueTrait returns a boolean if a field has been set.
func (o *PlanEntitlementResponseData) HasValueTrait() bool {
	if o != nil && !IsNil(o.ValueTrait) {
		return true
	}

	return false
}

// SetValueTrait gets a reference to the given EntityTraitDefinitionResponseData and assigns it to the ValueTrait field.
func (o *PlanEntitlementResponseData) SetValueTrait(v EntityTraitDefinitionResponseData) {
	o.ValueTrait = &v
}

// GetValueTraitId returns the ValueTraitId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlanEntitlementResponseData) GetValueTraitId() string {
	if o == nil || IsNil(o.ValueTraitId.Get()) {
		var ret string
		return ret
	}
	return *o.ValueTraitId.Get()
}

// GetValueTraitIdOk returns a tuple with the ValueTraitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlanEntitlementResponseData) GetValueTraitIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ValueTraitId.Get(), o.ValueTraitId.IsSet()
}

// HasValueTraitId returns a boolean if a field has been set.
func (o *PlanEntitlementResponseData) HasValueTraitId() bool {
	if o != nil && o.ValueTraitId.IsSet() {
		return true
	}

	return false
}

// SetValueTraitId gets a reference to the given NullableString and assigns it to the ValueTraitId field.
func (o *PlanEntitlementResponseData) SetValueTraitId(v string) {
	o.ValueTraitId.Set(&v)
}

// SetValueTraitIdNil sets the value for ValueTraitId to be an explicit nil
func (o *PlanEntitlementResponseData) SetValueTraitIdNil() {
	o.ValueTraitId.Set(nil)
}

// UnsetValueTraitId ensures that no value is present for ValueTraitId, not even an explicit nil
func (o *PlanEntitlementResponseData) UnsetValueTraitId() {
	o.ValueTraitId.Unset()
}

// GetValueType returns the ValueType field value
func (o *PlanEntitlementResponseData) GetValueType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ValueType
}

// GetValueTypeOk returns a tuple with the ValueType field value
// and a boolean to check if the value has been set.
func (o *PlanEntitlementResponseData) GetValueTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValueType, true
}

// SetValueType sets field value
func (o *PlanEntitlementResponseData) SetValueType(v string) {
	o.ValueType = v
}

func (o PlanEntitlementResponseData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanEntitlementResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["environment_id"] = o.EnvironmentId
	if !IsNil(o.Feature) {
		toSerialize["feature"] = o.Feature
	}
	toSerialize["feature_id"] = o.FeatureId
	toSerialize["id"] = o.Id
	if o.MetricPeriod.IsSet() {
		toSerialize["metric_period"] = o.MetricPeriod.Get()
	}
	if !IsNil(o.Plan) {
		toSerialize["plan"] = o.Plan
	}
	toSerialize["plan_id"] = o.PlanId
	toSerialize["rule_id"] = o.RuleId
	toSerialize["updated_at"] = o.UpdatedAt
	if o.ValueBool.IsSet() {
		toSerialize["value_bool"] = o.ValueBool.Get()
	}
	if o.ValueNumeric.IsSet() {
		toSerialize["value_numeric"] = o.ValueNumeric.Get()
	}
	if !IsNil(o.ValueTrait) {
		toSerialize["value_trait"] = o.ValueTrait
	}
	if o.ValueTraitId.IsSet() {
		toSerialize["value_trait_id"] = o.ValueTraitId.Get()
	}
	toSerialize["value_type"] = o.ValueType

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PlanEntitlementResponseData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created_at",
		"environment_id",
		"feature_id",
		"id",
		"plan_id",
		"rule_id",
		"updated_at",
		"value_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPlanEntitlementResponseData := _PlanEntitlementResponseData{}

	err = json.Unmarshal(data, &varPlanEntitlementResponseData)

	if err != nil {
		return err
	}

	*o = PlanEntitlementResponseData(varPlanEntitlementResponseData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "environment_id")
		delete(additionalProperties, "feature")
		delete(additionalProperties, "feature_id")
		delete(additionalProperties, "id")
		delete(additionalProperties, "metric_period")
		delete(additionalProperties, "plan")
		delete(additionalProperties, "plan_id")
		delete(additionalProperties, "rule_id")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "value_bool")
		delete(additionalProperties, "value_numeric")
		delete(additionalProperties, "value_trait")
		delete(additionalProperties, "value_trait_id")
		delete(additionalProperties, "value_type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePlanEntitlementResponseData struct {
	value *PlanEntitlementResponseData
	isSet bool
}

func (v NullablePlanEntitlementResponseData) Get() *PlanEntitlementResponseData {
	return v.value
}

func (v *NullablePlanEntitlementResponseData) Set(val *PlanEntitlementResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanEntitlementResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanEntitlementResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanEntitlementResponseData(val *PlanEntitlementResponseData) *NullablePlanEntitlementResponseData {
	return &NullablePlanEntitlementResponseData{value: val, isSet: true}
}

func (v NullablePlanEntitlementResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanEntitlementResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
