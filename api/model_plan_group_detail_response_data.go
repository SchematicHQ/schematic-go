/*
Schematic API

Schematic API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// checks if the PlanGroupDetailResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanGroupDetailResponseData{}

// PlanGroupDetailResponseData The returned resource
type PlanGroupDetailResponseData struct {
	DefaultPlan          *PlanGroupPlanDetailResponseData  `json:"default_plan,omitempty"`
	DefaultPlanId        NullableString                    `json:"default_plan_id,omitempty"`
	Id                   string                            `json:"id"`
	Plans                []PlanGroupPlanDetailResponseData `json:"plans"`
	AdditionalProperties map[string]interface{}
}

type _PlanGroupDetailResponseData PlanGroupDetailResponseData

// NewPlanGroupDetailResponseData instantiates a new PlanGroupDetailResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanGroupDetailResponseData(id string, plans []PlanGroupPlanDetailResponseData) *PlanGroupDetailResponseData {
	this := PlanGroupDetailResponseData{}
	this.Id = id
	this.Plans = plans
	return &this
}

// NewPlanGroupDetailResponseDataWithDefaults instantiates a new PlanGroupDetailResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanGroupDetailResponseDataWithDefaults() *PlanGroupDetailResponseData {
	this := PlanGroupDetailResponseData{}
	return &this
}

// GetDefaultPlan returns the DefaultPlan field value if set, zero value otherwise.
func (o *PlanGroupDetailResponseData) GetDefaultPlan() PlanGroupPlanDetailResponseData {
	if o == nil || IsNil(o.DefaultPlan) {
		var ret PlanGroupPlanDetailResponseData
		return ret
	}
	return *o.DefaultPlan
}

// GetDefaultPlanOk returns a tuple with the DefaultPlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanGroupDetailResponseData) GetDefaultPlanOk() (*PlanGroupPlanDetailResponseData, bool) {
	if o == nil || IsNil(o.DefaultPlan) {
		return nil, false
	}
	return o.DefaultPlan, true
}

// HasDefaultPlan returns a boolean if a field has been set.
func (o *PlanGroupDetailResponseData) HasDefaultPlan() bool {
	if o != nil && !IsNil(o.DefaultPlan) {
		return true
	}

	return false
}

// SetDefaultPlan gets a reference to the given PlanGroupPlanDetailResponseData and assigns it to the DefaultPlan field.
func (o *PlanGroupDetailResponseData) SetDefaultPlan(v PlanGroupPlanDetailResponseData) {
	o.DefaultPlan = &v
}

// GetDefaultPlanId returns the DefaultPlanId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlanGroupDetailResponseData) GetDefaultPlanId() string {
	if o == nil || IsNil(o.DefaultPlanId.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultPlanId.Get()
}

// GetDefaultPlanIdOk returns a tuple with the DefaultPlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlanGroupDetailResponseData) GetDefaultPlanIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultPlanId.Get(), o.DefaultPlanId.IsSet()
}

// HasDefaultPlanId returns a boolean if a field has been set.
func (o *PlanGroupDetailResponseData) HasDefaultPlanId() bool {
	if o != nil && o.DefaultPlanId.IsSet() {
		return true
	}

	return false
}

// SetDefaultPlanId gets a reference to the given NullableString and assigns it to the DefaultPlanId field.
func (o *PlanGroupDetailResponseData) SetDefaultPlanId(v string) {
	o.DefaultPlanId.Set(&v)
}

// SetDefaultPlanIdNil sets the value for DefaultPlanId to be an explicit nil
func (o *PlanGroupDetailResponseData) SetDefaultPlanIdNil() {
	o.DefaultPlanId.Set(nil)
}

// UnsetDefaultPlanId ensures that no value is present for DefaultPlanId, not even an explicit nil
func (o *PlanGroupDetailResponseData) UnsetDefaultPlanId() {
	o.DefaultPlanId.Unset()
}

// GetId returns the Id field value
func (o *PlanGroupDetailResponseData) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PlanGroupDetailResponseData) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PlanGroupDetailResponseData) SetId(v string) {
	o.Id = v
}

// GetPlans returns the Plans field value
func (o *PlanGroupDetailResponseData) GetPlans() []PlanGroupPlanDetailResponseData {
	if o == nil {
		var ret []PlanGroupPlanDetailResponseData
		return ret
	}

	return o.Plans
}

// GetPlansOk returns a tuple with the Plans field value
// and a boolean to check if the value has been set.
func (o *PlanGroupDetailResponseData) GetPlansOk() ([]PlanGroupPlanDetailResponseData, bool) {
	if o == nil {
		return nil, false
	}
	return o.Plans, true
}

// SetPlans sets field value
func (o *PlanGroupDetailResponseData) SetPlans(v []PlanGroupPlanDetailResponseData) {
	o.Plans = v
}

func (o PlanGroupDetailResponseData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanGroupDetailResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DefaultPlan) {
		toSerialize["default_plan"] = o.DefaultPlan
	}
	if o.DefaultPlanId.IsSet() {
		toSerialize["default_plan_id"] = o.DefaultPlanId.Get()
	}
	toSerialize["id"] = o.Id
	toSerialize["plans"] = o.Plans

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PlanGroupDetailResponseData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"plans",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPlanGroupDetailResponseData := _PlanGroupDetailResponseData{}

	err = json.Unmarshal(data, &varPlanGroupDetailResponseData)

	if err != nil {
		return err
	}

	*o = PlanGroupDetailResponseData(varPlanGroupDetailResponseData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "default_plan")
		delete(additionalProperties, "default_plan_id")
		delete(additionalProperties, "id")
		delete(additionalProperties, "plans")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePlanGroupDetailResponseData struct {
	value *PlanGroupDetailResponseData
	isSet bool
}

func (v NullablePlanGroupDetailResponseData) Get() *PlanGroupDetailResponseData {
	return v.value
}

func (v *NullablePlanGroupDetailResponseData) Set(val *PlanGroupDetailResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanGroupDetailResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanGroupDetailResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanGroupDetailResponseData(val *PlanGroupDetailResponseData) *NullablePlanGroupDetailResponseData {
	return &NullablePlanGroupDetailResponseData{value: val, isSet: true}
}

func (v NullablePlanGroupDetailResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanGroupDetailResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
