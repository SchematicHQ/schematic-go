/*
Schematic API

Schematic API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the RawEventResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RawEventResponseData{}

// RawEventResponseData struct for RawEventResponseData
type RawEventResponseData struct {
	CapturedAt           time.Time      `json:"captured_at"`
	EventId              NullableString `json:"event_id,omitempty"`
	RemoteAddr           string         `json:"remote_addr"`
	RemoteIp             string         `json:"remote_ip"`
	UserAgent            string         `json:"user_agent"`
	AdditionalProperties map[string]interface{}
}

type _RawEventResponseData RawEventResponseData

// NewRawEventResponseData instantiates a new RawEventResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRawEventResponseData(capturedAt time.Time, remoteAddr string, remoteIp string, userAgent string) *RawEventResponseData {
	this := RawEventResponseData{}
	this.CapturedAt = capturedAt
	this.RemoteAddr = remoteAddr
	this.RemoteIp = remoteIp
	this.UserAgent = userAgent
	return &this
}

// NewRawEventResponseDataWithDefaults instantiates a new RawEventResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRawEventResponseDataWithDefaults() *RawEventResponseData {
	this := RawEventResponseData{}
	return &this
}

// GetCapturedAt returns the CapturedAt field value
func (o *RawEventResponseData) GetCapturedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CapturedAt
}

// GetCapturedAtOk returns a tuple with the CapturedAt field value
// and a boolean to check if the value has been set.
func (o *RawEventResponseData) GetCapturedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CapturedAt, true
}

// SetCapturedAt sets field value
func (o *RawEventResponseData) SetCapturedAt(v time.Time) {
	o.CapturedAt = v
}

// GetEventId returns the EventId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RawEventResponseData) GetEventId() string {
	if o == nil || IsNil(o.EventId.Get()) {
		var ret string
		return ret
	}
	return *o.EventId.Get()
}

// GetEventIdOk returns a tuple with the EventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RawEventResponseData) GetEventIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventId.Get(), o.EventId.IsSet()
}

// HasEventId returns a boolean if a field has been set.
func (o *RawEventResponseData) HasEventId() bool {
	if o != nil && o.EventId.IsSet() {
		return true
	}

	return false
}

// SetEventId gets a reference to the given NullableString and assigns it to the EventId field.
func (o *RawEventResponseData) SetEventId(v string) {
	o.EventId.Set(&v)
}

// SetEventIdNil sets the value for EventId to be an explicit nil
func (o *RawEventResponseData) SetEventIdNil() {
	o.EventId.Set(nil)
}

// UnsetEventId ensures that no value is present for EventId, not even an explicit nil
func (o *RawEventResponseData) UnsetEventId() {
	o.EventId.Unset()
}

// GetRemoteAddr returns the RemoteAddr field value
func (o *RawEventResponseData) GetRemoteAddr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RemoteAddr
}

// GetRemoteAddrOk returns a tuple with the RemoteAddr field value
// and a boolean to check if the value has been set.
func (o *RawEventResponseData) GetRemoteAddrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoteAddr, true
}

// SetRemoteAddr sets field value
func (o *RawEventResponseData) SetRemoteAddr(v string) {
	o.RemoteAddr = v
}

// GetRemoteIp returns the RemoteIp field value
func (o *RawEventResponseData) GetRemoteIp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RemoteIp
}

// GetRemoteIpOk returns a tuple with the RemoteIp field value
// and a boolean to check if the value has been set.
func (o *RawEventResponseData) GetRemoteIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoteIp, true
}

// SetRemoteIp sets field value
func (o *RawEventResponseData) SetRemoteIp(v string) {
	o.RemoteIp = v
}

// GetUserAgent returns the UserAgent field value
func (o *RawEventResponseData) GetUserAgent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserAgent
}

// GetUserAgentOk returns a tuple with the UserAgent field value
// and a boolean to check if the value has been set.
func (o *RawEventResponseData) GetUserAgentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserAgent, true
}

// SetUserAgent sets field value
func (o *RawEventResponseData) SetUserAgent(v string) {
	o.UserAgent = v
}

func (o RawEventResponseData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RawEventResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["captured_at"] = o.CapturedAt
	if o.EventId.IsSet() {
		toSerialize["event_id"] = o.EventId.Get()
	}
	toSerialize["remote_addr"] = o.RemoteAddr
	toSerialize["remote_ip"] = o.RemoteIp
	toSerialize["user_agent"] = o.UserAgent

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RawEventResponseData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"captured_at",
		"remote_addr",
		"remote_ip",
		"user_agent",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRawEventResponseData := _RawEventResponseData{}

	err = json.Unmarshal(data, &varRawEventResponseData)

	if err != nil {
		return err
	}

	*o = RawEventResponseData(varRawEventResponseData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "captured_at")
		delete(additionalProperties, "event_id")
		delete(additionalProperties, "remote_addr")
		delete(additionalProperties, "remote_ip")
		delete(additionalProperties, "user_agent")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRawEventResponseData struct {
	value *RawEventResponseData
	isSet bool
}

func (v NullableRawEventResponseData) Get() *RawEventResponseData {
	return v.value
}

func (v *NullableRawEventResponseData) Set(val *RawEventResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableRawEventResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableRawEventResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRawEventResponseData(val *RawEventResponseData) *NullableRawEventResponseData {
	return &NullableRawEventResponseData{value: val, isSet: true}
}

func (v NullableRawEventResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRawEventResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
