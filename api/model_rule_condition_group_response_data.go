/*
Schematic API

Schematic API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the RuleConditionGroupResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RuleConditionGroupResponseData{}

// RuleConditionGroupResponseData struct for RuleConditionGroupResponseData
type RuleConditionGroupResponseData struct {
	CreatedAt            time.Time      `json:"created_at"`
	EnvironmentId        string         `json:"environment_id"`
	FlagId               NullableString `json:"flag_id,omitempty"`
	Id                   string         `json:"id"`
	PlanId               NullableString `json:"plan_id,omitempty"`
	RuleId               string         `json:"rule_id"`
	UpdatedAt            time.Time      `json:"updated_at"`
	AdditionalProperties map[string]interface{}
}

type _RuleConditionGroupResponseData RuleConditionGroupResponseData

// NewRuleConditionGroupResponseData instantiates a new RuleConditionGroupResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleConditionGroupResponseData(createdAt time.Time, environmentId string, id string, ruleId string, updatedAt time.Time) *RuleConditionGroupResponseData {
	this := RuleConditionGroupResponseData{}
	this.CreatedAt = createdAt
	this.EnvironmentId = environmentId
	this.Id = id
	this.RuleId = ruleId
	this.UpdatedAt = updatedAt
	return &this
}

// NewRuleConditionGroupResponseDataWithDefaults instantiates a new RuleConditionGroupResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleConditionGroupResponseDataWithDefaults() *RuleConditionGroupResponseData {
	this := RuleConditionGroupResponseData{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *RuleConditionGroupResponseData) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *RuleConditionGroupResponseData) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *RuleConditionGroupResponseData) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetEnvironmentId returns the EnvironmentId field value
func (o *RuleConditionGroupResponseData) GetEnvironmentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnvironmentId
}

// GetEnvironmentIdOk returns a tuple with the EnvironmentId field value
// and a boolean to check if the value has been set.
func (o *RuleConditionGroupResponseData) GetEnvironmentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnvironmentId, true
}

// SetEnvironmentId sets field value
func (o *RuleConditionGroupResponseData) SetEnvironmentId(v string) {
	o.EnvironmentId = v
}

// GetFlagId returns the FlagId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RuleConditionGroupResponseData) GetFlagId() string {
	if o == nil || IsNil(o.FlagId.Get()) {
		var ret string
		return ret
	}
	return *o.FlagId.Get()
}

// GetFlagIdOk returns a tuple with the FlagId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RuleConditionGroupResponseData) GetFlagIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FlagId.Get(), o.FlagId.IsSet()
}

// HasFlagId returns a boolean if a field has been set.
func (o *RuleConditionGroupResponseData) HasFlagId() bool {
	if o != nil && o.FlagId.IsSet() {
		return true
	}

	return false
}

// SetFlagId gets a reference to the given NullableString and assigns it to the FlagId field.
func (o *RuleConditionGroupResponseData) SetFlagId(v string) {
	o.FlagId.Set(&v)
}

// SetFlagIdNil sets the value for FlagId to be an explicit nil
func (o *RuleConditionGroupResponseData) SetFlagIdNil() {
	o.FlagId.Set(nil)
}

// UnsetFlagId ensures that no value is present for FlagId, not even an explicit nil
func (o *RuleConditionGroupResponseData) UnsetFlagId() {
	o.FlagId.Unset()
}

// GetId returns the Id field value
func (o *RuleConditionGroupResponseData) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RuleConditionGroupResponseData) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RuleConditionGroupResponseData) SetId(v string) {
	o.Id = v
}

// GetPlanId returns the PlanId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RuleConditionGroupResponseData) GetPlanId() string {
	if o == nil || IsNil(o.PlanId.Get()) {
		var ret string
		return ret
	}
	return *o.PlanId.Get()
}

// GetPlanIdOk returns a tuple with the PlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RuleConditionGroupResponseData) GetPlanIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlanId.Get(), o.PlanId.IsSet()
}

// HasPlanId returns a boolean if a field has been set.
func (o *RuleConditionGroupResponseData) HasPlanId() bool {
	if o != nil && o.PlanId.IsSet() {
		return true
	}

	return false
}

// SetPlanId gets a reference to the given NullableString and assigns it to the PlanId field.
func (o *RuleConditionGroupResponseData) SetPlanId(v string) {
	o.PlanId.Set(&v)
}

// SetPlanIdNil sets the value for PlanId to be an explicit nil
func (o *RuleConditionGroupResponseData) SetPlanIdNil() {
	o.PlanId.Set(nil)
}

// UnsetPlanId ensures that no value is present for PlanId, not even an explicit nil
func (o *RuleConditionGroupResponseData) UnsetPlanId() {
	o.PlanId.Unset()
}

// GetRuleId returns the RuleId field value
func (o *RuleConditionGroupResponseData) GetRuleId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RuleId
}

// GetRuleIdOk returns a tuple with the RuleId field value
// and a boolean to check if the value has been set.
func (o *RuleConditionGroupResponseData) GetRuleIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RuleId, true
}

// SetRuleId sets field value
func (o *RuleConditionGroupResponseData) SetRuleId(v string) {
	o.RuleId = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *RuleConditionGroupResponseData) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *RuleConditionGroupResponseData) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *RuleConditionGroupResponseData) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o RuleConditionGroupResponseData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RuleConditionGroupResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["environment_id"] = o.EnvironmentId
	if o.FlagId.IsSet() {
		toSerialize["flag_id"] = o.FlagId.Get()
	}
	toSerialize["id"] = o.Id
	if o.PlanId.IsSet() {
		toSerialize["plan_id"] = o.PlanId.Get()
	}
	toSerialize["rule_id"] = o.RuleId
	toSerialize["updated_at"] = o.UpdatedAt

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RuleConditionGroupResponseData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created_at",
		"environment_id",
		"id",
		"rule_id",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRuleConditionGroupResponseData := _RuleConditionGroupResponseData{}

	err = json.Unmarshal(data, &varRuleConditionGroupResponseData)

	if err != nil {
		return err
	}

	*o = RuleConditionGroupResponseData(varRuleConditionGroupResponseData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "environment_id")
		delete(additionalProperties, "flag_id")
		delete(additionalProperties, "id")
		delete(additionalProperties, "plan_id")
		delete(additionalProperties, "rule_id")
		delete(additionalProperties, "updated_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRuleConditionGroupResponseData struct {
	value *RuleConditionGroupResponseData
	isSet bool
}

func (v NullableRuleConditionGroupResponseData) Get() *RuleConditionGroupResponseData {
	return v.value
}

func (v *NullableRuleConditionGroupResponseData) Set(val *RuleConditionGroupResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleConditionGroupResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleConditionGroupResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleConditionGroupResponseData(val *RuleConditionGroupResponseData) *NullableRuleConditionGroupResponseData {
	return &NullableRuleConditionGroupResponseData{value: val, isSet: true}
}

func (v NullableRuleConditionGroupResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleConditionGroupResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
