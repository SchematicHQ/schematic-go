/*
Schematic API

Schematic API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// checks if the RulesDetailResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RulesDetailResponseData{}

// RulesDetailResponseData The updated resource
type RulesDetailResponseData struct {
	Flag                 *FlagResponseData        `json:"Flag,omitempty"`
	Rules                []RuleDetailResponseData `json:"rules"`
	AdditionalProperties map[string]interface{}
}

type _RulesDetailResponseData RulesDetailResponseData

// NewRulesDetailResponseData instantiates a new RulesDetailResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRulesDetailResponseData(rules []RuleDetailResponseData) *RulesDetailResponseData {
	this := RulesDetailResponseData{}
	this.Rules = rules
	return &this
}

// NewRulesDetailResponseDataWithDefaults instantiates a new RulesDetailResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRulesDetailResponseDataWithDefaults() *RulesDetailResponseData {
	this := RulesDetailResponseData{}
	return &this
}

// GetFlag returns the Flag field value if set, zero value otherwise.
func (o *RulesDetailResponseData) GetFlag() FlagResponseData {
	if o == nil || IsNil(o.Flag) {
		var ret FlagResponseData
		return ret
	}
	return *o.Flag
}

// GetFlagOk returns a tuple with the Flag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RulesDetailResponseData) GetFlagOk() (*FlagResponseData, bool) {
	if o == nil || IsNil(o.Flag) {
		return nil, false
	}
	return o.Flag, true
}

// HasFlag returns a boolean if a field has been set.
func (o *RulesDetailResponseData) HasFlag() bool {
	if o != nil && !IsNil(o.Flag) {
		return true
	}

	return false
}

// SetFlag gets a reference to the given FlagResponseData and assigns it to the Flag field.
func (o *RulesDetailResponseData) SetFlag(v FlagResponseData) {
	o.Flag = &v
}

// GetRules returns the Rules field value
func (o *RulesDetailResponseData) GetRules() []RuleDetailResponseData {
	if o == nil {
		var ret []RuleDetailResponseData
		return ret
	}

	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value
// and a boolean to check if the value has been set.
func (o *RulesDetailResponseData) GetRulesOk() ([]RuleDetailResponseData, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rules, true
}

// SetRules sets field value
func (o *RulesDetailResponseData) SetRules(v []RuleDetailResponseData) {
	o.Rules = v
}

func (o RulesDetailResponseData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RulesDetailResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Flag) {
		toSerialize["Flag"] = o.Flag
	}
	toSerialize["rules"] = o.Rules

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RulesDetailResponseData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rules",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRulesDetailResponseData := _RulesDetailResponseData{}

	err = json.Unmarshal(data, &varRulesDetailResponseData)

	if err != nil {
		return err
	}

	*o = RulesDetailResponseData(varRulesDetailResponseData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "Flag")
		delete(additionalProperties, "rules")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRulesDetailResponseData struct {
	value *RulesDetailResponseData
	isSet bool
}

func (v NullableRulesDetailResponseData) Get() *RulesDetailResponseData {
	return v.value
}

func (v *NullableRulesDetailResponseData) Set(val *RulesDetailResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableRulesDetailResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableRulesDetailResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRulesDetailResponseData(val *RulesDetailResponseData) *NullableRulesDetailResponseData {
	return &NullableRulesDetailResponseData{value: val, isSet: true}
}

func (v NullableRulesDetailResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRulesDetailResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
