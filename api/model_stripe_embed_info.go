/*
Schematic API

Schematic API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// checks if the StripeEmbedInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StripeEmbedInfo{}

// StripeEmbedInfo struct for StripeEmbedInfo
type StripeEmbedInfo struct {
	CustomerEkey            NullableString `json:"customer_ekey,omitempty"`
	PublishableKey          string         `json:"publishable_key"`
	SetupIntentClientSecret NullableString `json:"setup_intent_client_secret,omitempty"`
	AdditionalProperties    map[string]interface{}
}

type _StripeEmbedInfo StripeEmbedInfo

// NewStripeEmbedInfo instantiates a new StripeEmbedInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStripeEmbedInfo(publishableKey string) *StripeEmbedInfo {
	this := StripeEmbedInfo{}
	this.PublishableKey = publishableKey
	return &this
}

// NewStripeEmbedInfoWithDefaults instantiates a new StripeEmbedInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStripeEmbedInfoWithDefaults() *StripeEmbedInfo {
	this := StripeEmbedInfo{}
	return &this
}

// GetCustomerEkey returns the CustomerEkey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StripeEmbedInfo) GetCustomerEkey() string {
	if o == nil || IsNil(o.CustomerEkey.Get()) {
		var ret string
		return ret
	}
	return *o.CustomerEkey.Get()
}

// GetCustomerEkeyOk returns a tuple with the CustomerEkey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StripeEmbedInfo) GetCustomerEkeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CustomerEkey.Get(), o.CustomerEkey.IsSet()
}

// HasCustomerEkey returns a boolean if a field has been set.
func (o *StripeEmbedInfo) HasCustomerEkey() bool {
	if o != nil && o.CustomerEkey.IsSet() {
		return true
	}

	return false
}

// SetCustomerEkey gets a reference to the given NullableString and assigns it to the CustomerEkey field.
func (o *StripeEmbedInfo) SetCustomerEkey(v string) {
	o.CustomerEkey.Set(&v)
}

// SetCustomerEkeyNil sets the value for CustomerEkey to be an explicit nil
func (o *StripeEmbedInfo) SetCustomerEkeyNil() {
	o.CustomerEkey.Set(nil)
}

// UnsetCustomerEkey ensures that no value is present for CustomerEkey, not even an explicit nil
func (o *StripeEmbedInfo) UnsetCustomerEkey() {
	o.CustomerEkey.Unset()
}

// GetPublishableKey returns the PublishableKey field value
func (o *StripeEmbedInfo) GetPublishableKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublishableKey
}

// GetPublishableKeyOk returns a tuple with the PublishableKey field value
// and a boolean to check if the value has been set.
func (o *StripeEmbedInfo) GetPublishableKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublishableKey, true
}

// SetPublishableKey sets field value
func (o *StripeEmbedInfo) SetPublishableKey(v string) {
	o.PublishableKey = v
}

// GetSetupIntentClientSecret returns the SetupIntentClientSecret field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StripeEmbedInfo) GetSetupIntentClientSecret() string {
	if o == nil || IsNil(o.SetupIntentClientSecret.Get()) {
		var ret string
		return ret
	}
	return *o.SetupIntentClientSecret.Get()
}

// GetSetupIntentClientSecretOk returns a tuple with the SetupIntentClientSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StripeEmbedInfo) GetSetupIntentClientSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SetupIntentClientSecret.Get(), o.SetupIntentClientSecret.IsSet()
}

// HasSetupIntentClientSecret returns a boolean if a field has been set.
func (o *StripeEmbedInfo) HasSetupIntentClientSecret() bool {
	if o != nil && o.SetupIntentClientSecret.IsSet() {
		return true
	}

	return false
}

// SetSetupIntentClientSecret gets a reference to the given NullableString and assigns it to the SetupIntentClientSecret field.
func (o *StripeEmbedInfo) SetSetupIntentClientSecret(v string) {
	o.SetupIntentClientSecret.Set(&v)
}

// SetSetupIntentClientSecretNil sets the value for SetupIntentClientSecret to be an explicit nil
func (o *StripeEmbedInfo) SetSetupIntentClientSecretNil() {
	o.SetupIntentClientSecret.Set(nil)
}

// UnsetSetupIntentClientSecret ensures that no value is present for SetupIntentClientSecret, not even an explicit nil
func (o *StripeEmbedInfo) UnsetSetupIntentClientSecret() {
	o.SetupIntentClientSecret.Unset()
}

func (o StripeEmbedInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StripeEmbedInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CustomerEkey.IsSet() {
		toSerialize["customer_ekey"] = o.CustomerEkey.Get()
	}
	toSerialize["publishable_key"] = o.PublishableKey
	if o.SetupIntentClientSecret.IsSet() {
		toSerialize["setup_intent_client_secret"] = o.SetupIntentClientSecret.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StripeEmbedInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"publishable_key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStripeEmbedInfo := _StripeEmbedInfo{}

	err = json.Unmarshal(data, &varStripeEmbedInfo)

	if err != nil {
		return err
	}

	*o = StripeEmbedInfo(varStripeEmbedInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "customer_ekey")
		delete(additionalProperties, "publishable_key")
		delete(additionalProperties, "setup_intent_client_secret")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStripeEmbedInfo struct {
	value *StripeEmbedInfo
	isSet bool
}

func (v NullableStripeEmbedInfo) Get() *StripeEmbedInfo {
	return v.value
}

func (v *NullableStripeEmbedInfo) Set(val *StripeEmbedInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableStripeEmbedInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableStripeEmbedInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStripeEmbedInfo(val *StripeEmbedInfo) *NullableStripeEmbedInfo {
	return &NullableStripeEmbedInfo{value: val, isSet: true}
}

func (v NullableStripeEmbedInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStripeEmbedInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
