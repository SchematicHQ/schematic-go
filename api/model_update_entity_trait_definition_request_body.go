/*
Schematic API

Schematic API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// checks if the UpdateEntityTraitDefinitionRequestBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateEntityTraitDefinitionRequestBody{}

// UpdateEntityTraitDefinitionRequestBody struct for UpdateEntityTraitDefinitionRequestBody
type UpdateEntityTraitDefinitionRequestBody struct {
	DisplayName          NullableString `json:"display_name,omitempty"`
	TraitType            string         `json:"trait_type"`
	AdditionalProperties map[string]interface{}
}

type _UpdateEntityTraitDefinitionRequestBody UpdateEntityTraitDefinitionRequestBody

// NewUpdateEntityTraitDefinitionRequestBody instantiates a new UpdateEntityTraitDefinitionRequestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateEntityTraitDefinitionRequestBody(traitType string) *UpdateEntityTraitDefinitionRequestBody {
	this := UpdateEntityTraitDefinitionRequestBody{}
	this.TraitType = traitType
	return &this
}

// NewUpdateEntityTraitDefinitionRequestBodyWithDefaults instantiates a new UpdateEntityTraitDefinitionRequestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateEntityTraitDefinitionRequestBodyWithDefaults() *UpdateEntityTraitDefinitionRequestBody {
	this := UpdateEntityTraitDefinitionRequestBody{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateEntityTraitDefinitionRequestBody) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName.Get()) {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateEntityTraitDefinitionRequestBody) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *UpdateEntityTraitDefinitionRequestBody) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *UpdateEntityTraitDefinitionRequestBody) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}

// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *UpdateEntityTraitDefinitionRequestBody) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *UpdateEntityTraitDefinitionRequestBody) UnsetDisplayName() {
	o.DisplayName.Unset()
}

// GetTraitType returns the TraitType field value
func (o *UpdateEntityTraitDefinitionRequestBody) GetTraitType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TraitType
}

// GetTraitTypeOk returns a tuple with the TraitType field value
// and a boolean to check if the value has been set.
func (o *UpdateEntityTraitDefinitionRequestBody) GetTraitTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TraitType, true
}

// SetTraitType sets field value
func (o *UpdateEntityTraitDefinitionRequestBody) SetTraitType(v string) {
	o.TraitType = v
}

func (o UpdateEntityTraitDefinitionRequestBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateEntityTraitDefinitionRequestBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DisplayName.IsSet() {
		toSerialize["display_name"] = o.DisplayName.Get()
	}
	toSerialize["trait_type"] = o.TraitType

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateEntityTraitDefinitionRequestBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"trait_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateEntityTraitDefinitionRequestBody := _UpdateEntityTraitDefinitionRequestBody{}

	err = json.Unmarshal(data, &varUpdateEntityTraitDefinitionRequestBody)

	if err != nil {
		return err
	}

	*o = UpdateEntityTraitDefinitionRequestBody(varUpdateEntityTraitDefinitionRequestBody)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "display_name")
		delete(additionalProperties, "trait_type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateEntityTraitDefinitionRequestBody struct {
	value *UpdateEntityTraitDefinitionRequestBody
	isSet bool
}

func (v NullableUpdateEntityTraitDefinitionRequestBody) Get() *UpdateEntityTraitDefinitionRequestBody {
	return v.value
}

func (v *NullableUpdateEntityTraitDefinitionRequestBody) Set(val *UpdateEntityTraitDefinitionRequestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateEntityTraitDefinitionRequestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateEntityTraitDefinitionRequestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateEntityTraitDefinitionRequestBody(val *UpdateEntityTraitDefinitionRequestBody) *NullableUpdateEntityTraitDefinitionRequestBody {
	return &NullableUpdateEntityTraitDefinitionRequestBody{value: val, isSet: true}
}

func (v NullableUpdateEntityTraitDefinitionRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateEntityTraitDefinitionRequestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
