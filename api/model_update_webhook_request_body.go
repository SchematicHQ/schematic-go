/*
Schematic API

Schematic API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the UpdateWebhookRequestBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateWebhookRequestBody{}

// UpdateWebhookRequestBody struct for UpdateWebhookRequestBody
type UpdateWebhookRequestBody struct {
	Name                 NullableString `json:"name,omitempty"`
	RequestTypes         []string       `json:"request_types,omitempty"`
	Status               NullableString `json:"status,omitempty"`
	Url                  NullableString `json:"url,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateWebhookRequestBody UpdateWebhookRequestBody

// NewUpdateWebhookRequestBody instantiates a new UpdateWebhookRequestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateWebhookRequestBody() *UpdateWebhookRequestBody {
	this := UpdateWebhookRequestBody{}
	return &this
}

// NewUpdateWebhookRequestBodyWithDefaults instantiates a new UpdateWebhookRequestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateWebhookRequestBodyWithDefaults() *UpdateWebhookRequestBody {
	this := UpdateWebhookRequestBody{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateWebhookRequestBody) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateWebhookRequestBody) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *UpdateWebhookRequestBody) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *UpdateWebhookRequestBody) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *UpdateWebhookRequestBody) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *UpdateWebhookRequestBody) UnsetName() {
	o.Name.Unset()
}

// GetRequestTypes returns the RequestTypes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateWebhookRequestBody) GetRequestTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.RequestTypes
}

// GetRequestTypesOk returns a tuple with the RequestTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateWebhookRequestBody) GetRequestTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.RequestTypes) {
		return nil, false
	}
	return o.RequestTypes, true
}

// HasRequestTypes returns a boolean if a field has been set.
func (o *UpdateWebhookRequestBody) HasRequestTypes() bool {
	if o != nil && !IsNil(o.RequestTypes) {
		return true
	}

	return false
}

// SetRequestTypes gets a reference to the given []string and assigns it to the RequestTypes field.
func (o *UpdateWebhookRequestBody) SetRequestTypes(v []string) {
	o.RequestTypes = v
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateWebhookRequestBody) GetStatus() string {
	if o == nil || IsNil(o.Status.Get()) {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateWebhookRequestBody) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *UpdateWebhookRequestBody) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *UpdateWebhookRequestBody) SetStatus(v string) {
	o.Status.Set(&v)
}

// SetStatusNil sets the value for Status to be an explicit nil
func (o *UpdateWebhookRequestBody) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *UpdateWebhookRequestBody) UnsetStatus() {
	o.Status.Unset()
}

// GetUrl returns the Url field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateWebhookRequestBody) GetUrl() string {
	if o == nil || IsNil(o.Url.Get()) {
		var ret string
		return ret
	}
	return *o.Url.Get()
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateWebhookRequestBody) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Url.Get(), o.Url.IsSet()
}

// HasUrl returns a boolean if a field has been set.
func (o *UpdateWebhookRequestBody) HasUrl() bool {
	if o != nil && o.Url.IsSet() {
		return true
	}

	return false
}

// SetUrl gets a reference to the given NullableString and assigns it to the Url field.
func (o *UpdateWebhookRequestBody) SetUrl(v string) {
	o.Url.Set(&v)
}

// SetUrlNil sets the value for Url to be an explicit nil
func (o *UpdateWebhookRequestBody) SetUrlNil() {
	o.Url.Set(nil)
}

// UnsetUrl ensures that no value is present for Url, not even an explicit nil
func (o *UpdateWebhookRequestBody) UnsetUrl() {
	o.Url.Unset()
}

func (o UpdateWebhookRequestBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateWebhookRequestBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.RequestTypes != nil {
		toSerialize["request_types"] = o.RequestTypes
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.Url.IsSet() {
		toSerialize["url"] = o.Url.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateWebhookRequestBody) UnmarshalJSON(data []byte) (err error) {
	varUpdateWebhookRequestBody := _UpdateWebhookRequestBody{}

	err = json.Unmarshal(data, &varUpdateWebhookRequestBody)

	if err != nil {
		return err
	}

	*o = UpdateWebhookRequestBody(varUpdateWebhookRequestBody)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "request_types")
		delete(additionalProperties, "status")
		delete(additionalProperties, "url")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateWebhookRequestBody struct {
	value *UpdateWebhookRequestBody
	isSet bool
}

func (v NullableUpdateWebhookRequestBody) Get() *UpdateWebhookRequestBody {
	return v.value
}

func (v *NullableUpdateWebhookRequestBody) Set(val *UpdateWebhookRequestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateWebhookRequestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateWebhookRequestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateWebhookRequestBody(val *UpdateWebhookRequestBody) *NullableUpdateWebhookRequestBody {
	return &NullableUpdateWebhookRequestBody{value: val, isSet: true}
}

func (v NullableUpdateWebhookRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateWebhookRequestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
