/*
Schematic API

Schematic API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UpsertBillingProductResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpsertBillingProductResponse{}

// UpsertBillingProductResponse struct for UpsertBillingProductResponse
type UpsertBillingProductResponse struct {
	Data BillingProductResponseData `json:"data"`
	// Input parameters
	Params map[string]interface{} `json:"params"`
}

type _UpsertBillingProductResponse UpsertBillingProductResponse

// NewUpsertBillingProductResponse instantiates a new UpsertBillingProductResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpsertBillingProductResponse(data BillingProductResponseData, params map[string]interface{}) *UpsertBillingProductResponse {
	this := UpsertBillingProductResponse{}
	this.Data = data
	this.Params = params
	return &this
}

// NewUpsertBillingProductResponseWithDefaults instantiates a new UpsertBillingProductResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpsertBillingProductResponseWithDefaults() *UpsertBillingProductResponse {
	this := UpsertBillingProductResponse{}
	return &this
}

// GetData returns the Data field value
func (o *UpsertBillingProductResponse) GetData() BillingProductResponseData {
	if o == nil {
		var ret BillingProductResponseData
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *UpsertBillingProductResponse) GetDataOk() (*BillingProductResponseData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *UpsertBillingProductResponse) SetData(v BillingProductResponseData) {
	o.Data = v
}

// GetParams returns the Params field value
func (o *UpsertBillingProductResponse) GetParams() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Params
}

// GetParamsOk returns a tuple with the Params field value
// and a boolean to check if the value has been set.
func (o *UpsertBillingProductResponse) GetParamsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Params, true
}

// SetParams sets field value
func (o *UpsertBillingProductResponse) SetParams(v map[string]interface{}) {
	o.Params = v
}

func (o UpsertBillingProductResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpsertBillingProductResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["params"] = o.Params
	return toSerialize, nil
}

func (o *UpsertBillingProductResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"params",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpsertBillingProductResponse := _UpsertBillingProductResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpsertBillingProductResponse)

	if err != nil {
		return err
	}

	*o = UpsertBillingProductResponse(varUpsertBillingProductResponse)

	return err
}

type NullableUpsertBillingProductResponse struct {
	value *UpsertBillingProductResponse
	isSet bool
}

func (v NullableUpsertBillingProductResponse) Get() *UpsertBillingProductResponse {
	return v.value
}

func (v *NullableUpsertBillingProductResponse) Set(val *UpsertBillingProductResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpsertBillingProductResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpsertBillingProductResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpsertBillingProductResponse(val *UpsertBillingProductResponse) *NullableUpsertBillingProductResponse {
	return &NullableUpsertBillingProductResponse{value: val, isSet: true}
}

func (v NullableUpsertBillingProductResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpsertBillingProductResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
