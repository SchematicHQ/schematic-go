/*
Schematic API

Schematic API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UpsertTraitRequestBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpsertTraitRequestBody{}

// UpsertTraitRequestBody struct for UpsertTraitRequestBody
type UpsertTraitRequestBody struct {
	// Amount to increment the trait by (positive or negative)
	Incr NullableInt32 `json:"incr,omitempty"`
	// Key/value pairs too identify a company or user
	Keys map[string]interface{} `json:"keys"`
	// Value to set the trait to
	Set NullableString `json:"set,omitempty"`
	// DealName of the trait to update
	Trait string `json:"trait"`
	// Unless this is set, the company or user will be created if it does not already exist
	UpdateOnly NullableBool `json:"update_only,omitempty"`
}

type _UpsertTraitRequestBody UpsertTraitRequestBody

// NewUpsertTraitRequestBody instantiates a new UpsertTraitRequestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpsertTraitRequestBody(keys map[string]interface{}, trait string) *UpsertTraitRequestBody {
	this := UpsertTraitRequestBody{}
	this.Keys = keys
	this.Trait = trait
	return &this
}

// NewUpsertTraitRequestBodyWithDefaults instantiates a new UpsertTraitRequestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpsertTraitRequestBodyWithDefaults() *UpsertTraitRequestBody {
	this := UpsertTraitRequestBody{}
	return &this
}

// GetIncr returns the Incr field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpsertTraitRequestBody) GetIncr() int32 {
	if o == nil || IsNil(o.Incr.Get()) {
		var ret int32
		return ret
	}
	return *o.Incr.Get()
}

// GetIncrOk returns a tuple with the Incr field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpsertTraitRequestBody) GetIncrOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Incr.Get(), o.Incr.IsSet()
}

// HasIncr returns a boolean if a field has been set.
func (o *UpsertTraitRequestBody) HasIncr() bool {
	if o != nil && o.Incr.IsSet() {
		return true
	}

	return false
}

// SetIncr gets a reference to the given NullableInt32 and assigns it to the Incr field.
func (o *UpsertTraitRequestBody) SetIncr(v int32) {
	o.Incr.Set(&v)
}

// SetIncrNil sets the value for Incr to be an explicit nil
func (o *UpsertTraitRequestBody) SetIncrNil() {
	o.Incr.Set(nil)
}

// UnsetIncr ensures that no value is present for Incr, not even an explicit nil
func (o *UpsertTraitRequestBody) UnsetIncr() {
	o.Incr.Unset()
}

// GetKeys returns the Keys field value
func (o *UpsertTraitRequestBody) GetKeys() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Keys
}

// GetKeysOk returns a tuple with the Keys field value
// and a boolean to check if the value has been set.
func (o *UpsertTraitRequestBody) GetKeysOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Keys, true
}

// SetKeys sets field value
func (o *UpsertTraitRequestBody) SetKeys(v map[string]interface{}) {
	o.Keys = v
}

// GetSet returns the Set field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpsertTraitRequestBody) GetSet() string {
	if o == nil || IsNil(o.Set.Get()) {
		var ret string
		return ret
	}
	return *o.Set.Get()
}

// GetSetOk returns a tuple with the Set field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpsertTraitRequestBody) GetSetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Set.Get(), o.Set.IsSet()
}

// HasSet returns a boolean if a field has been set.
func (o *UpsertTraitRequestBody) HasSet() bool {
	if o != nil && o.Set.IsSet() {
		return true
	}

	return false
}

// SetSet gets a reference to the given NullableString and assigns it to the Set field.
func (o *UpsertTraitRequestBody) SetSet(v string) {
	o.Set.Set(&v)
}

// SetSetNil sets the value for Set to be an explicit nil
func (o *UpsertTraitRequestBody) SetSetNil() {
	o.Set.Set(nil)
}

// UnsetSet ensures that no value is present for Set, not even an explicit nil
func (o *UpsertTraitRequestBody) UnsetSet() {
	o.Set.Unset()
}

// GetTrait returns the Trait field value
func (o *UpsertTraitRequestBody) GetTrait() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Trait
}

// GetTraitOk returns a tuple with the Trait field value
// and a boolean to check if the value has been set.
func (o *UpsertTraitRequestBody) GetTraitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Trait, true
}

// SetTrait sets field value
func (o *UpsertTraitRequestBody) SetTrait(v string) {
	o.Trait = v
}

// GetUpdateOnly returns the UpdateOnly field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpsertTraitRequestBody) GetUpdateOnly() bool {
	if o == nil || IsNil(o.UpdateOnly.Get()) {
		var ret bool
		return ret
	}
	return *o.UpdateOnly.Get()
}

// GetUpdateOnlyOk returns a tuple with the UpdateOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpsertTraitRequestBody) GetUpdateOnlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdateOnly.Get(), o.UpdateOnly.IsSet()
}

// HasUpdateOnly returns a boolean if a field has been set.
func (o *UpsertTraitRequestBody) HasUpdateOnly() bool {
	if o != nil && o.UpdateOnly.IsSet() {
		return true
	}

	return false
}

// SetUpdateOnly gets a reference to the given NullableBool and assigns it to the UpdateOnly field.
func (o *UpsertTraitRequestBody) SetUpdateOnly(v bool) {
	o.UpdateOnly.Set(&v)
}

// SetUpdateOnlyNil sets the value for UpdateOnly to be an explicit nil
func (o *UpsertTraitRequestBody) SetUpdateOnlyNil() {
	o.UpdateOnly.Set(nil)
}

// UnsetUpdateOnly ensures that no value is present for UpdateOnly, not even an explicit nil
func (o *UpsertTraitRequestBody) UnsetUpdateOnly() {
	o.UpdateOnly.Unset()
}

func (o UpsertTraitRequestBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpsertTraitRequestBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Incr.IsSet() {
		toSerialize["incr"] = o.Incr.Get()
	}
	toSerialize["keys"] = o.Keys
	if o.Set.IsSet() {
		toSerialize["set"] = o.Set.Get()
	}
	toSerialize["trait"] = o.Trait
	if o.UpdateOnly.IsSet() {
		toSerialize["update_only"] = o.UpdateOnly.Get()
	}
	return toSerialize, nil
}

func (o *UpsertTraitRequestBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"keys",
		"trait",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpsertTraitRequestBody := _UpsertTraitRequestBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpsertTraitRequestBody)

	if err != nil {
		return err
	}

	*o = UpsertTraitRequestBody(varUpsertTraitRequestBody)

	return err
}

type NullableUpsertTraitRequestBody struct {
	value *UpsertTraitRequestBody
	isSet bool
}

func (v NullableUpsertTraitRequestBody) Get() *UpsertTraitRequestBody {
	return v.value
}

func (v *NullableUpsertTraitRequestBody) Set(val *UpsertTraitRequestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableUpsertTraitRequestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableUpsertTraitRequestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpsertTraitRequestBody(val *UpsertTraitRequestBody) *NullableUpsertTraitRequestBody {
	return &NullableUpsertTraitRequestBody{value: val, isSet: true}
}

func (v NullableUpsertTraitRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpsertTraitRequestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
