/*
Schematic API

Testing EntitlementsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	schematicapi "github.com/schematichq/schematic-go/api"
)

func Test_api_EntitlementsAPIService(t *testing.T) {

	configuration := schematicapi.NewConfiguration()
	apiClient := schematicapi.NewAPIClient(configuration)

	t.Run("Test EntitlementsAPIService CreateCompanyOverride", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EntitlementsAPI.CreateCompanyOverride(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EntitlementsAPIService CreatePlanEntitlement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EntitlementsAPI.CreatePlanEntitlement(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EntitlementsAPIService DeleteCompanyOverride", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyOverrideId string

		resp, httpRes, err := apiClient.EntitlementsAPI.DeleteCompanyOverride(context.Background(), companyOverrideId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EntitlementsAPIService DeletePlanEntitlement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var planEntitlementId string

		resp, httpRes, err := apiClient.EntitlementsAPI.DeletePlanEntitlement(context.Background(), planEntitlementId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EntitlementsAPIService GetCompanyOverride", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyOverrideId string

		resp, httpRes, err := apiClient.EntitlementsAPI.GetCompanyOverride(context.Background(), companyOverrideId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EntitlementsAPIService GetPlanEntitlement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var planEntitlementId string

		resp, httpRes, err := apiClient.EntitlementsAPI.GetPlanEntitlement(context.Background(), planEntitlementId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EntitlementsAPIService ListCompanyOverrides", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EntitlementsAPI.ListCompanyOverrides(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EntitlementsAPIService ListPlanEntitlements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EntitlementsAPI.ListPlanEntitlements(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EntitlementsAPIService UpdateCompanyOverride", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyOverrideId string

		resp, httpRes, err := apiClient.EntitlementsAPI.UpdateCompanyOverride(context.Background(), companyOverrideId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EntitlementsAPIService UpdatePlanEntitlement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var planEntitlementId string

		resp, httpRes, err := apiClient.EntitlementsAPI.UpdatePlanEntitlement(context.Background(), planEntitlementId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
