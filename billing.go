// This file was auto-generated by Fern from our API Definition.

package schematichq

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/schematichq/schematic-go/core"
	time "time"
)

type CountCustomersRequest struct {
	Name           *string `json:"-" url:"name,omitempty"`
	FailedToImport *bool   `json:"-" url:"failed_to_import,omitempty"`
	Q              *string `json:"-" url:"q,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type ListBillingProductsRequest struct {
	IDs  []*string `json:"-" url:"ids,omitempty"`
	Name *string   `json:"-" url:"name,omitempty"`
	Q    *string   `json:"-" url:"q,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type ListCustomersRequest struct {
	Name           *string `json:"-" url:"name,omitempty"`
	FailedToImport *bool   `json:"-" url:"failed_to_import,omitempty"`
	Q              *string `json:"-" url:"q,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type ListInvoicesRequest struct {
	CompanyID              *string `json:"-" url:"company_id,omitempty"`
	CustomerExternalID     string  `json:"-" url:"customer_external_id"`
	SubscriptionExternalID *string `json:"-" url:"subscription_external_id,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type ListPaymentMethodsRequest struct {
	CompanyID              *string `json:"-" url:"company_id,omitempty"`
	CustomerExternalID     string  `json:"-" url:"customer_external_id"`
	InvoiceExternalID      *string `json:"-" url:"invoice_external_id,omitempty"`
	SubscriptionExternalID *string `json:"-" url:"subscription_external_id,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type ListProductPricesRequest struct {
	IDs  []*string `json:"-" url:"ids,omitempty"`
	Name *string   `json:"-" url:"name,omitempty"`
	Q    *string   `json:"-" url:"q,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type CountCustomersResponse struct {
	Data *CountResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *CountCustomersParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CountCustomersResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountCustomersResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CountCustomersResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountCustomersResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountCustomersResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ListBillingProductsResponse struct {
	// The returned resources
	Data []*BillingProductDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListBillingProductsParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListBillingProductsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListBillingProductsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListBillingProductsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListBillingProductsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListBillingProductsResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListCustomersResponse struct {
	// The returned resources
	Data []*BillingCustomerWithSubscriptionsResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListCustomersParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListCustomersResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListCustomersResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListCustomersResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListCustomersResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListCustomersResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListInvoicesResponse struct {
	// The returned resources
	Data []*InvoiceResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListInvoicesParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListInvoicesResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListInvoicesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListInvoicesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListInvoicesResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListInvoicesResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListPaymentMethodsResponse struct {
	// The returned resources
	Data []*PaymentMethodResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListPaymentMethodsParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListPaymentMethodsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListPaymentMethodsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListPaymentMethodsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListPaymentMethodsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListPaymentMethodsResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListProductPricesResponse struct {
	// The returned resources
	Data []*BillingPriceResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListProductPricesParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListProductPricesResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListProductPricesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListProductPricesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListProductPricesResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListProductPricesResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type UpsertBillingCustomerResponse struct {
	Data *BillingCustomerResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpsertBillingCustomerResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertBillingCustomerResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpsertBillingCustomerResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpsertBillingCustomerResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertBillingCustomerResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpsertBillingPriceResponse struct {
	Data *BillingPriceResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpsertBillingPriceResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertBillingPriceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpsertBillingPriceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpsertBillingPriceResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertBillingPriceResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpsertBillingProductResponse struct {
	Data *BillingProductResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpsertBillingProductResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertBillingProductResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpsertBillingProductResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpsertBillingProductResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertBillingProductResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpsertBillingSubscriptionResponse struct {
	Data *BillingSubscriptionResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpsertBillingSubscriptionResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertBillingSubscriptionResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpsertBillingSubscriptionResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpsertBillingSubscriptionResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertBillingSubscriptionResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpsertInvoiceResponse struct {
	Data *InvoiceResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpsertInvoiceResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertInvoiceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpsertInvoiceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpsertInvoiceResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertInvoiceResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpsertPaymentMethodResponse struct {
	Data *PaymentMethodResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpsertPaymentMethodResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertPaymentMethodResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpsertPaymentMethodResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpsertPaymentMethodResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertPaymentMethodResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type CreateBillingCustomerRequestBody struct {
	CompanyID      *core.Optional[string] `json:"company_id,omitempty" url:"-"`
	Email          string                 `json:"email" url:"-"`
	ExternalID     string                 `json:"external_id" url:"-"`
	FailedToImport bool                   `json:"failed_to_import" url:"-"`
	Meta           map[string]string      `json:"meta,omitempty" url:"-"`
	Name           string                 `json:"name" url:"-"`
}

type CreateBillingPriceRequestBody struct {
	Interval          string `json:"interval" url:"-"`
	Price             int    `json:"price" url:"-"`
	PriceExternalID   string `json:"price_external_id" url:"-"`
	ProductExternalID string `json:"product_external_id" url:"-"`
}

type CreateBillingProductRequestBody struct {
	Currency   string  `json:"currency" url:"-"`
	ExternalID string  `json:"external_id" url:"-"`
	Name       string  `json:"name" url:"-"`
	Price      float64 `json:"price" url:"-"`
	Quantity   int     `json:"quantity" url:"-"`
}

type CreateBillingSubscriptionsRequestBody struct {
	CustomerExternalID     string                                 `json:"customer_external_id" url:"-"`
	ExpiredAt              time.Time                              `json:"expired_at" url:"-"`
	Interval               *core.Optional[string]                 `json:"interval,omitempty" url:"-"`
	Metadata               *core.Optional[map[string]interface{}] `json:"metadata,omitempty" url:"-"`
	ProductExternalIDs     []*BillingProductPricing               `json:"product_external_ids,omitempty" url:"-"`
	Status                 *core.Optional[string]                 `json:"status,omitempty" url:"-"`
	SubscriptionExternalID string                                 `json:"subscription_external_id" url:"-"`
	TotalPrice             int                                    `json:"total_price" url:"-"`
}

func (c *CreateBillingSubscriptionsRequestBody) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateBillingSubscriptionsRequestBody
	var body unmarshaler
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	*c = CreateBillingSubscriptionsRequestBody(body)
	return nil
}

func (c *CreateBillingSubscriptionsRequestBody) MarshalJSON() ([]byte, error) {
	type embed CreateBillingSubscriptionsRequestBody
	var marshaler = struct {
		embed
		ExpiredAt *core.DateTime `json:"expired_at"`
	}{
		embed:     embed(*c),
		ExpiredAt: core.NewDateTime(c.ExpiredAt),
	}
	return json.Marshal(marshaler)
}

type CreateInvoiceRequestBody struct {
	AmountDue              int                       `json:"amount_due" url:"-"`
	AmountPaid             int                       `json:"amount_paid" url:"-"`
	AmountRemaining        int                       `json:"amount_remaining" url:"-"`
	CollectionMethod       string                    `json:"collection_method" url:"-"`
	Currency               string                    `json:"currency" url:"-"`
	CustomerExternalID     string                    `json:"customer_external_id" url:"-"`
	DueDate                *core.Optional[time.Time] `json:"due_date,omitempty" url:"-"`
	ExternalID             string                    `json:"external_id" url:"-"`
	SubscriptionExternalID *core.Optional[string]    `json:"subscription_external_id,omitempty" url:"-"`
	Subtotal               int                       `json:"subtotal" url:"-"`
}

func (c *CreateInvoiceRequestBody) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateInvoiceRequestBody
	var body unmarshaler
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	*c = CreateInvoiceRequestBody(body)
	return nil
}

func (c *CreateInvoiceRequestBody) MarshalJSON() ([]byte, error) {
	type embed CreateInvoiceRequestBody
	var marshaler = struct {
		embed
		DueDate *core.DateTime `json:"due_date,omitempty"`
	}{
		embed:   embed(*c),
		DueDate: core.NewOptionalDateTime(c.DueDate),
	}
	return json.Marshal(marshaler)
}

type CreatePaymentMethodRequestBody struct {
	CardBrand              *core.Optional[string] `json:"card_brand,omitempty" url:"-"`
	CardExpMonth           *core.Optional[int]    `json:"card_exp_month,omitempty" url:"-"`
	CardExpYear            *core.Optional[int]    `json:"card_exp_year,omitempty" url:"-"`
	CardLast4              *core.Optional[string] `json:"card_last4,omitempty" url:"-"`
	CustomerExternalID     string                 `json:"customer_external_id" url:"-"`
	ExternalID             string                 `json:"external_id" url:"-"`
	InvoiceExternalID      *core.Optional[string] `json:"invoice_external_id,omitempty" url:"-"`
	PaymentMethodType      string                 `json:"payment_method_type" url:"-"`
	SubscriptionExternalID *core.Optional[string] `json:"subscription_external_id,omitempty" url:"-"`
}
