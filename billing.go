// This file was auto-generated by Fern from our API Definition.

package schematichq

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/schematichq/schematic-go/internal"
	time "time"
)

type CountBillingProductsRequest struct {
	IDs            []*string `json:"-" url:"ids,omitempty"`
	Name           *string   `json:"-" url:"name,omitempty"`
	Q              *string   `json:"-" url:"q,omitempty"`
	PriceUsageType *string   `json:"-" url:"price_usage_type,omitempty"`
	// Filter products that are not linked to any plan
	WithoutLinkedToPlan *bool `json:"-" url:"without_linked_to_plan,omitempty"`
	// Filter products that have zero price for free subscription type
	WithZeroPrice *bool `json:"-" url:"with_zero_price,omitempty"`
	// Filter products that have prices
	WithPricesOnly *bool `json:"-" url:"with_prices_only,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type CountCustomersRequest struct {
	Name           *string `json:"-" url:"name,omitempty"`
	FailedToImport *bool   `json:"-" url:"failed_to_import,omitempty"`
	Q              *string `json:"-" url:"q,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type ListBillingProductsRequest struct {
	IDs            []*string `json:"-" url:"ids,omitempty"`
	Name           *string   `json:"-" url:"name,omitempty"`
	Q              *string   `json:"-" url:"q,omitempty"`
	PriceUsageType *string   `json:"-" url:"price_usage_type,omitempty"`
	// Filter products that are not linked to any plan
	WithoutLinkedToPlan *bool `json:"-" url:"without_linked_to_plan,omitempty"`
	// Filter products that have zero price for free subscription type
	WithZeroPrice *bool `json:"-" url:"with_zero_price,omitempty"`
	// Filter products that have prices
	WithPricesOnly *bool `json:"-" url:"with_prices_only,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type ListCustomersRequest struct {
	Name           *string `json:"-" url:"name,omitempty"`
	FailedToImport *bool   `json:"-" url:"failed_to_import,omitempty"`
	Q              *string `json:"-" url:"q,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type ListInvoicesRequest struct {
	CompanyID              *string `json:"-" url:"company_id,omitempty"`
	CustomerExternalID     string  `json:"-" url:"customer_external_id"`
	SubscriptionExternalID *string `json:"-" url:"subscription_external_id,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type ListMetersRequest struct {
	DisplayName *string `json:"-" url:"display_name,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type ListPaymentMethodsRequest struct {
	CompanyID              *string `json:"-" url:"company_id,omitempty"`
	CustomerExternalID     string  `json:"-" url:"customer_external_id"`
	SubscriptionExternalID *string `json:"-" url:"subscription_external_id,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type ListProductPricesRequest struct {
	IDs            []*string `json:"-" url:"ids,omitempty"`
	Name           *string   `json:"-" url:"name,omitempty"`
	Q              *string   `json:"-" url:"q,omitempty"`
	PriceUsageType *string   `json:"-" url:"price_usage_type,omitempty"`
	// Filter products that are not linked to any plan
	WithoutLinkedToPlan *bool `json:"-" url:"without_linked_to_plan,omitempty"`
	// Filter products that have zero price for free subscription type
	WithZeroPrice *bool `json:"-" url:"with_zero_price,omitempty"`
	// Filter products that have prices
	WithPricesOnly *bool `json:"-" url:"with_prices_only,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type SearchBillingPricesRequest struct {
	IDs       []*string `json:"-" url:"ids,omitempty"`
	Interval  *string   `json:"-" url:"interval,omitempty"`
	UsageType *string   `json:"-" url:"usage_type,omitempty"`
	Price     *int      `json:"-" url:"price,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

// The created resource
type BillingCouponResponseData struct {
	AccountID        string                 `json:"account_id" url:"account_id"`
	AmountOff        *int                   `json:"amount_off,omitempty" url:"amount_off,omitempty"`
	Currency         *string                `json:"currency,omitempty" url:"currency,omitempty"`
	Duration         *string                `json:"duration,omitempty" url:"duration,omitempty"`
	DurationInMonths *int                   `json:"duration_in_months,omitempty" url:"duration_in_months,omitempty"`
	EnvironmentID    string                 `json:"environment_id" url:"environment_id"`
	ExternalID       string                 `json:"external_id" url:"external_id"`
	ID               string                 `json:"id" url:"id"`
	IsActive         bool                   `json:"is_active" url:"is_active"`
	MaxRedemptions   *int                   `json:"max_redemptions,omitempty" url:"max_redemptions,omitempty"`
	Metadata         map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	Name             string                 `json:"name" url:"name"`
	PercentOff       *int                   `json:"percent_off,omitempty" url:"percent_off,omitempty"`
	TimesRedeemed    int                    `json:"times_redeemed" url:"times_redeemed"`
	ValidFrom        *time.Time             `json:"valid_from,omitempty" url:"valid_from,omitempty"`
	ValidUntil       *time.Time             `json:"valid_until,omitempty" url:"valid_until,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BillingCouponResponseData) GetAccountID() string {
	if b == nil {
		return ""
	}
	return b.AccountID
}

func (b *BillingCouponResponseData) GetAmountOff() *int {
	if b == nil {
		return nil
	}
	return b.AmountOff
}

func (b *BillingCouponResponseData) GetCurrency() *string {
	if b == nil {
		return nil
	}
	return b.Currency
}

func (b *BillingCouponResponseData) GetDuration() *string {
	if b == nil {
		return nil
	}
	return b.Duration
}

func (b *BillingCouponResponseData) GetDurationInMonths() *int {
	if b == nil {
		return nil
	}
	return b.DurationInMonths
}

func (b *BillingCouponResponseData) GetEnvironmentID() string {
	if b == nil {
		return ""
	}
	return b.EnvironmentID
}

func (b *BillingCouponResponseData) GetExternalID() string {
	if b == nil {
		return ""
	}
	return b.ExternalID
}

func (b *BillingCouponResponseData) GetID() string {
	if b == nil {
		return ""
	}
	return b.ID
}

func (b *BillingCouponResponseData) GetIsActive() bool {
	if b == nil {
		return false
	}
	return b.IsActive
}

func (b *BillingCouponResponseData) GetMaxRedemptions() *int {
	if b == nil {
		return nil
	}
	return b.MaxRedemptions
}

func (b *BillingCouponResponseData) GetMetadata() map[string]interface{} {
	if b == nil {
		return nil
	}
	return b.Metadata
}

func (b *BillingCouponResponseData) GetName() string {
	if b == nil {
		return ""
	}
	return b.Name
}

func (b *BillingCouponResponseData) GetPercentOff() *int {
	if b == nil {
		return nil
	}
	return b.PercentOff
}

func (b *BillingCouponResponseData) GetTimesRedeemed() int {
	if b == nil {
		return 0
	}
	return b.TimesRedeemed
}

func (b *BillingCouponResponseData) GetValidFrom() *time.Time {
	if b == nil {
		return nil
	}
	return b.ValidFrom
}

func (b *BillingCouponResponseData) GetValidUntil() *time.Time {
	if b == nil {
		return nil
	}
	return b.ValidUntil
}

func (b *BillingCouponResponseData) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillingCouponResponseData) UnmarshalJSON(data []byte) error {
	type embed BillingCouponResponseData
	var unmarshaler = struct {
		embed
		ValidFrom  *internal.DateTime `json:"valid_from,omitempty"`
		ValidUntil *internal.DateTime `json:"valid_until,omitempty"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BillingCouponResponseData(unmarshaler.embed)
	b.ValidFrom = unmarshaler.ValidFrom.TimePtr()
	b.ValidUntil = unmarshaler.ValidUntil.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillingCouponResponseData) MarshalJSON() ([]byte, error) {
	type embed BillingCouponResponseData
	var marshaler = struct {
		embed
		ValidFrom  *internal.DateTime `json:"valid_from,omitempty"`
		ValidUntil *internal.DateTime `json:"valid_until,omitempty"`
	}{
		embed:      embed(*b),
		ValidFrom:  internal.NewOptionalDateTime(b.ValidFrom),
		ValidUntil: internal.NewOptionalDateTime(b.ValidUntil),
	}
	return json.Marshal(marshaler)
}

func (b *BillingCouponResponseData) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// The created resource
type BillingCustomerResponseData struct {
	CompanyID      *string    `json:"company_id,omitempty" url:"company_id,omitempty"`
	DeletedAt      *time.Time `json:"deleted_at,omitempty" url:"deleted_at,omitempty"`
	Email          string     `json:"email" url:"email"`
	ExternalID     string     `json:"external_id" url:"external_id"`
	FailedToImport bool       `json:"failed_to_import" url:"failed_to_import"`
	ID             string     `json:"id" url:"id"`
	Name           string     `json:"name" url:"name"`
	UpdatedAt      time.Time  `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BillingCustomerResponseData) GetCompanyID() *string {
	if b == nil {
		return nil
	}
	return b.CompanyID
}

func (b *BillingCustomerResponseData) GetDeletedAt() *time.Time {
	if b == nil {
		return nil
	}
	return b.DeletedAt
}

func (b *BillingCustomerResponseData) GetEmail() string {
	if b == nil {
		return ""
	}
	return b.Email
}

func (b *BillingCustomerResponseData) GetExternalID() string {
	if b == nil {
		return ""
	}
	return b.ExternalID
}

func (b *BillingCustomerResponseData) GetFailedToImport() bool {
	if b == nil {
		return false
	}
	return b.FailedToImport
}

func (b *BillingCustomerResponseData) GetID() string {
	if b == nil {
		return ""
	}
	return b.ID
}

func (b *BillingCustomerResponseData) GetName() string {
	if b == nil {
		return ""
	}
	return b.Name
}

func (b *BillingCustomerResponseData) GetUpdatedAt() time.Time {
	if b == nil {
		return time.Time{}
	}
	return b.UpdatedAt
}

func (b *BillingCustomerResponseData) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillingCustomerResponseData) UnmarshalJSON(data []byte) error {
	type embed BillingCustomerResponseData
	var unmarshaler = struct {
		embed
		DeletedAt *internal.DateTime `json:"deleted_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BillingCustomerResponseData(unmarshaler.embed)
	b.DeletedAt = unmarshaler.DeletedAt.TimePtr()
	b.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillingCustomerResponseData) MarshalJSON() ([]byte, error) {
	type embed BillingCustomerResponseData
	var marshaler = struct {
		embed
		DeletedAt *internal.DateTime `json:"deleted_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*b),
		DeletedAt: internal.NewOptionalDateTime(b.DeletedAt),
		UpdatedAt: internal.NewDateTime(b.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (b *BillingCustomerResponseData) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BillingCustomerSubscription struct {
	Currency     string     `json:"currency" url:"currency"`
	ExpiredAt    *time.Time `json:"expired_at,omitempty" url:"expired_at,omitempty"`
	Interval     string     `json:"interval" url:"interval"`
	MeteredUsage bool       `json:"metered_usage" url:"metered_usage"`
	PerUnitPrice int        `json:"per_unit_price" url:"per_unit_price"`
	TotalPrice   int        `json:"total_price" url:"total_price"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BillingCustomerSubscription) GetCurrency() string {
	if b == nil {
		return ""
	}
	return b.Currency
}

func (b *BillingCustomerSubscription) GetExpiredAt() *time.Time {
	if b == nil {
		return nil
	}
	return b.ExpiredAt
}

func (b *BillingCustomerSubscription) GetInterval() string {
	if b == nil {
		return ""
	}
	return b.Interval
}

func (b *BillingCustomerSubscription) GetMeteredUsage() bool {
	if b == nil {
		return false
	}
	return b.MeteredUsage
}

func (b *BillingCustomerSubscription) GetPerUnitPrice() int {
	if b == nil {
		return 0
	}
	return b.PerUnitPrice
}

func (b *BillingCustomerSubscription) GetTotalPrice() int {
	if b == nil {
		return 0
	}
	return b.TotalPrice
}

func (b *BillingCustomerSubscription) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillingCustomerSubscription) UnmarshalJSON(data []byte) error {
	type embed BillingCustomerSubscription
	var unmarshaler = struct {
		embed
		ExpiredAt *internal.DateTime `json:"expired_at,omitempty"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BillingCustomerSubscription(unmarshaler.embed)
	b.ExpiredAt = unmarshaler.ExpiredAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillingCustomerSubscription) MarshalJSON() ([]byte, error) {
	type embed BillingCustomerSubscription
	var marshaler = struct {
		embed
		ExpiredAt *internal.DateTime `json:"expired_at,omitempty"`
	}{
		embed:     embed(*b),
		ExpiredAt: internal.NewOptionalDateTime(b.ExpiredAt),
	}
	return json.Marshal(marshaler)
}

func (b *BillingCustomerSubscription) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BillingCustomerWithSubscriptionsResponseData struct {
	CompanyID      *string                        `json:"company_id,omitempty" url:"company_id,omitempty"`
	DeletedAt      *time.Time                     `json:"deleted_at,omitempty" url:"deleted_at,omitempty"`
	Email          string                         `json:"email" url:"email"`
	ExternalID     string                         `json:"external_id" url:"external_id"`
	FailedToImport bool                           `json:"failed_to_import" url:"failed_to_import"`
	ID             string                         `json:"id" url:"id"`
	Name           string                         `json:"name" url:"name"`
	Subscriptions  []*BillingCustomerSubscription `json:"subscriptions,omitempty" url:"subscriptions,omitempty"`
	UpdatedAt      time.Time                      `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BillingCustomerWithSubscriptionsResponseData) GetCompanyID() *string {
	if b == nil {
		return nil
	}
	return b.CompanyID
}

func (b *BillingCustomerWithSubscriptionsResponseData) GetDeletedAt() *time.Time {
	if b == nil {
		return nil
	}
	return b.DeletedAt
}

func (b *BillingCustomerWithSubscriptionsResponseData) GetEmail() string {
	if b == nil {
		return ""
	}
	return b.Email
}

func (b *BillingCustomerWithSubscriptionsResponseData) GetExternalID() string {
	if b == nil {
		return ""
	}
	return b.ExternalID
}

func (b *BillingCustomerWithSubscriptionsResponseData) GetFailedToImport() bool {
	if b == nil {
		return false
	}
	return b.FailedToImport
}

func (b *BillingCustomerWithSubscriptionsResponseData) GetID() string {
	if b == nil {
		return ""
	}
	return b.ID
}

func (b *BillingCustomerWithSubscriptionsResponseData) GetName() string {
	if b == nil {
		return ""
	}
	return b.Name
}

func (b *BillingCustomerWithSubscriptionsResponseData) GetSubscriptions() []*BillingCustomerSubscription {
	if b == nil {
		return nil
	}
	return b.Subscriptions
}

func (b *BillingCustomerWithSubscriptionsResponseData) GetUpdatedAt() time.Time {
	if b == nil {
		return time.Time{}
	}
	return b.UpdatedAt
}

func (b *BillingCustomerWithSubscriptionsResponseData) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillingCustomerWithSubscriptionsResponseData) UnmarshalJSON(data []byte) error {
	type embed BillingCustomerWithSubscriptionsResponseData
	var unmarshaler = struct {
		embed
		DeletedAt *internal.DateTime `json:"deleted_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BillingCustomerWithSubscriptionsResponseData(unmarshaler.embed)
	b.DeletedAt = unmarshaler.DeletedAt.TimePtr()
	b.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillingCustomerWithSubscriptionsResponseData) MarshalJSON() ([]byte, error) {
	type embed BillingCustomerWithSubscriptionsResponseData
	var marshaler = struct {
		embed
		DeletedAt *internal.DateTime `json:"deleted_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*b),
		DeletedAt: internal.NewOptionalDateTime(b.DeletedAt),
		UpdatedAt: internal.NewDateTime(b.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (b *BillingCustomerWithSubscriptionsResponseData) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BillingMeterResponseData struct {
	DispalyName     string `json:"dispaly_name" url:"dispaly_name"`
	EventName       string `json:"event_name" url:"event_name"`
	EventPayloadKey string `json:"event_payload_key" url:"event_payload_key"`
	ExternalPriceID string `json:"external_price_id" url:"external_price_id"`
	ID              string `json:"id" url:"id"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BillingMeterResponseData) GetDispalyName() string {
	if b == nil {
		return ""
	}
	return b.DispalyName
}

func (b *BillingMeterResponseData) GetEventName() string {
	if b == nil {
		return ""
	}
	return b.EventName
}

func (b *BillingMeterResponseData) GetEventPayloadKey() string {
	if b == nil {
		return ""
	}
	return b.EventPayloadKey
}

func (b *BillingMeterResponseData) GetExternalPriceID() string {
	if b == nil {
		return ""
	}
	return b.ExternalPriceID
}

func (b *BillingMeterResponseData) GetID() string {
	if b == nil {
		return ""
	}
	return b.ID
}

func (b *BillingMeterResponseData) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillingMeterResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler BillingMeterResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BillingMeterResponseData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillingMeterResponseData) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BillingProductPricing struct {
	Currency          string  `json:"currency" url:"currency"`
	Interval          string  `json:"interval" url:"interval"`
	MeterID           *string `json:"meter_id,omitempty" url:"meter_id,omitempty"`
	Price             int     `json:"price" url:"price"`
	PriceExternalID   string  `json:"price_external_id" url:"price_external_id"`
	ProductExternalID string  `json:"product_external_id" url:"product_external_id"`
	Quantity          int     `json:"quantity" url:"quantity"`
	UsageType         string  `json:"usage_type" url:"usage_type"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BillingProductPricing) GetCurrency() string {
	if b == nil {
		return ""
	}
	return b.Currency
}

func (b *BillingProductPricing) GetInterval() string {
	if b == nil {
		return ""
	}
	return b.Interval
}

func (b *BillingProductPricing) GetMeterID() *string {
	if b == nil {
		return nil
	}
	return b.MeterID
}

func (b *BillingProductPricing) GetPrice() int {
	if b == nil {
		return 0
	}
	return b.Price
}

func (b *BillingProductPricing) GetPriceExternalID() string {
	if b == nil {
		return ""
	}
	return b.PriceExternalID
}

func (b *BillingProductPricing) GetProductExternalID() string {
	if b == nil {
		return ""
	}
	return b.ProductExternalID
}

func (b *BillingProductPricing) GetQuantity() int {
	if b == nil {
		return 0
	}
	return b.Quantity
}

func (b *BillingProductPricing) GetUsageType() string {
	if b == nil {
		return ""
	}
	return b.UsageType
}

func (b *BillingProductPricing) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillingProductPricing) UnmarshalJSON(data []byte) error {
	type unmarshaler BillingProductPricing
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BillingProductPricing(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillingProductPricing) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BillingProductResponseData struct {
	AccountID     string    `json:"account_id" url:"account_id"`
	CreatedAt     time.Time `json:"created_at" url:"created_at"`
	Currency      string    `json:"currency" url:"currency"`
	EnvironmentID string    `json:"environment_id" url:"environment_id"`
	ExternalID    string    `json:"external_id" url:"external_id"`
	Name          string    `json:"name" url:"name"`
	Price         float64   `json:"price" url:"price"`
	ProductID     string    `json:"product_id" url:"product_id"`
	Quantity      float64   `json:"quantity" url:"quantity"`
	UpdatedAt     time.Time `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BillingProductResponseData) GetAccountID() string {
	if b == nil {
		return ""
	}
	return b.AccountID
}

func (b *BillingProductResponseData) GetCreatedAt() time.Time {
	if b == nil {
		return time.Time{}
	}
	return b.CreatedAt
}

func (b *BillingProductResponseData) GetCurrency() string {
	if b == nil {
		return ""
	}
	return b.Currency
}

func (b *BillingProductResponseData) GetEnvironmentID() string {
	if b == nil {
		return ""
	}
	return b.EnvironmentID
}

func (b *BillingProductResponseData) GetExternalID() string {
	if b == nil {
		return ""
	}
	return b.ExternalID
}

func (b *BillingProductResponseData) GetName() string {
	if b == nil {
		return ""
	}
	return b.Name
}

func (b *BillingProductResponseData) GetPrice() float64 {
	if b == nil {
		return 0
	}
	return b.Price
}

func (b *BillingProductResponseData) GetProductID() string {
	if b == nil {
		return ""
	}
	return b.ProductID
}

func (b *BillingProductResponseData) GetQuantity() float64 {
	if b == nil {
		return 0
	}
	return b.Quantity
}

func (b *BillingProductResponseData) GetUpdatedAt() time.Time {
	if b == nil {
		return time.Time{}
	}
	return b.UpdatedAt
}

func (b *BillingProductResponseData) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillingProductResponseData) UnmarshalJSON(data []byte) error {
	type embed BillingProductResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BillingProductResponseData(unmarshaler.embed)
	b.CreatedAt = unmarshaler.CreatedAt.Time()
	b.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillingProductResponseData) MarshalJSON() ([]byte, error) {
	type embed BillingProductResponseData
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*b),
		CreatedAt: internal.NewDateTime(b.CreatedAt),
		UpdatedAt: internal.NewDateTime(b.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (b *BillingProductResponseData) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BillingSubscriptionDiscount struct {
	CouponExternalID    string     `json:"coupon_external_id" url:"coupon_external_id"`
	CustomerFacingCode  *string    `json:"customer_facing_code,omitempty" url:"customer_facing_code,omitempty"`
	EndedAt             *time.Time `json:"ended_at,omitempty" url:"ended_at,omitempty"`
	ExternalID          string     `json:"external_id" url:"external_id"`
	IsActive            bool       `json:"is_active" url:"is_active"`
	PromoCodeExternalID *string    `json:"promo_code_external_id,omitempty" url:"promo_code_external_id,omitempty"`
	StartedAt           time.Time  `json:"started_at" url:"started_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BillingSubscriptionDiscount) GetCouponExternalID() string {
	if b == nil {
		return ""
	}
	return b.CouponExternalID
}

func (b *BillingSubscriptionDiscount) GetCustomerFacingCode() *string {
	if b == nil {
		return nil
	}
	return b.CustomerFacingCode
}

func (b *BillingSubscriptionDiscount) GetEndedAt() *time.Time {
	if b == nil {
		return nil
	}
	return b.EndedAt
}

func (b *BillingSubscriptionDiscount) GetExternalID() string {
	if b == nil {
		return ""
	}
	return b.ExternalID
}

func (b *BillingSubscriptionDiscount) GetIsActive() bool {
	if b == nil {
		return false
	}
	return b.IsActive
}

func (b *BillingSubscriptionDiscount) GetPromoCodeExternalID() *string {
	if b == nil {
		return nil
	}
	return b.PromoCodeExternalID
}

func (b *BillingSubscriptionDiscount) GetStartedAt() time.Time {
	if b == nil {
		return time.Time{}
	}
	return b.StartedAt
}

func (b *BillingSubscriptionDiscount) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillingSubscriptionDiscount) UnmarshalJSON(data []byte) error {
	type embed BillingSubscriptionDiscount
	var unmarshaler = struct {
		embed
		EndedAt   *internal.DateTime `json:"ended_at,omitempty"`
		StartedAt *internal.DateTime `json:"started_at"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BillingSubscriptionDiscount(unmarshaler.embed)
	b.EndedAt = unmarshaler.EndedAt.TimePtr()
	b.StartedAt = unmarshaler.StartedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillingSubscriptionDiscount) MarshalJSON() ([]byte, error) {
	type embed BillingSubscriptionDiscount
	var marshaler = struct {
		embed
		EndedAt   *internal.DateTime `json:"ended_at,omitempty"`
		StartedAt *internal.DateTime `json:"started_at"`
	}{
		embed:     embed(*b),
		EndedAt:   internal.NewOptionalDateTime(b.EndedAt),
		StartedAt: internal.NewDateTime(b.StartedAt),
	}
	return json.Marshal(marshaler)
}

func (b *BillingSubscriptionDiscount) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Input parameters
type CountBillingProductsParams struct {
	IDs []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int    `json:"limit,omitempty" url:"limit,omitempty"`
	Name  *string `json:"name,omitempty" url:"name,omitempty"`
	// Page offset (default 0)
	Offset         *int    `json:"offset,omitempty" url:"offset,omitempty"`
	PriceUsageType *string `json:"price_usage_type,omitempty" url:"price_usage_type,omitempty"`
	Q              *string `json:"q,omitempty" url:"q,omitempty"`
	// Filter products that have prices
	WithPricesOnly *bool `json:"with_prices_only,omitempty" url:"with_prices_only,omitempty"`
	// Filter products that have zero price for free subscription type
	WithZeroPrice *bool `json:"with_zero_price,omitempty" url:"with_zero_price,omitempty"`
	// Filter products that are not linked to any plan
	WithoutLinkedToPlan *bool `json:"without_linked_to_plan,omitempty" url:"without_linked_to_plan,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CountBillingProductsParams) GetIDs() []string {
	if c == nil {
		return nil
	}
	return c.IDs
}

func (c *CountBillingProductsParams) GetLimit() *int {
	if c == nil {
		return nil
	}
	return c.Limit
}

func (c *CountBillingProductsParams) GetName() *string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *CountBillingProductsParams) GetOffset() *int {
	if c == nil {
		return nil
	}
	return c.Offset
}

func (c *CountBillingProductsParams) GetPriceUsageType() *string {
	if c == nil {
		return nil
	}
	return c.PriceUsageType
}

func (c *CountBillingProductsParams) GetQ() *string {
	if c == nil {
		return nil
	}
	return c.Q
}

func (c *CountBillingProductsParams) GetWithPricesOnly() *bool {
	if c == nil {
		return nil
	}
	return c.WithPricesOnly
}

func (c *CountBillingProductsParams) GetWithZeroPrice() *bool {
	if c == nil {
		return nil
	}
	return c.WithZeroPrice
}

func (c *CountBillingProductsParams) GetWithoutLinkedToPlan() *bool {
	if c == nil {
		return nil
	}
	return c.WithoutLinkedToPlan
}

func (c *CountBillingProductsParams) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountBillingProductsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler CountBillingProductsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountBillingProductsParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountBillingProductsParams) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CountBillingProductsResponse struct {
	Data *CountResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *CountBillingProductsParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CountBillingProductsResponse) GetData() *CountResponse {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *CountBillingProductsResponse) GetParams() *CountBillingProductsParams {
	if c == nil {
		return nil
	}
	return c.Params
}

func (c *CountBillingProductsResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountBillingProductsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CountBillingProductsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountBillingProductsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountBillingProductsResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Input parameters
type CountCustomersParams struct {
	FailedToImport *bool `json:"failed_to_import,omitempty" url:"failed_to_import,omitempty"`
	// Page limit (default 100)
	Limit *int    `json:"limit,omitempty" url:"limit,omitempty"`
	Name  *string `json:"name,omitempty" url:"name,omitempty"`
	// Page offset (default 0)
	Offset *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Q      *string `json:"q,omitempty" url:"q,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CountCustomersParams) GetFailedToImport() *bool {
	if c == nil {
		return nil
	}
	return c.FailedToImport
}

func (c *CountCustomersParams) GetLimit() *int {
	if c == nil {
		return nil
	}
	return c.Limit
}

func (c *CountCustomersParams) GetName() *string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *CountCustomersParams) GetOffset() *int {
	if c == nil {
		return nil
	}
	return c.Offset
}

func (c *CountCustomersParams) GetQ() *string {
	if c == nil {
		return nil
	}
	return c.Q
}

func (c *CountCustomersParams) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountCustomersParams) UnmarshalJSON(data []byte) error {
	type unmarshaler CountCustomersParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountCustomersParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountCustomersParams) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CountCustomersResponse struct {
	Data *CountResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *CountCustomersParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CountCustomersResponse) GetData() *CountResponse {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *CountCustomersResponse) GetParams() *CountCustomersParams {
	if c == nil {
		return nil
	}
	return c.Params
}

func (c *CountCustomersResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountCustomersResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CountCustomersResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountCustomersResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountCustomersResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DeleteProductPriceResponse struct {
	Data *DeleteResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeleteProductPriceResponse) GetData() *DeleteResponse {
	if d == nil {
		return nil
	}
	return d.Data
}

func (d *DeleteProductPriceResponse) GetParams() map[string]interface{} {
	if d == nil {
		return nil
	}
	return d.Params
}

func (d *DeleteProductPriceResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteProductPriceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteProductPriceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteProductPriceResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteProductPriceResponse) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Input parameters
type ListBillingProductsParams struct {
	IDs []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int    `json:"limit,omitempty" url:"limit,omitempty"`
	Name  *string `json:"name,omitempty" url:"name,omitempty"`
	// Page offset (default 0)
	Offset         *int    `json:"offset,omitempty" url:"offset,omitempty"`
	PriceUsageType *string `json:"price_usage_type,omitempty" url:"price_usage_type,omitempty"`
	Q              *string `json:"q,omitempty" url:"q,omitempty"`
	// Filter products that have prices
	WithPricesOnly *bool `json:"with_prices_only,omitempty" url:"with_prices_only,omitempty"`
	// Filter products that have zero price for free subscription type
	WithZeroPrice *bool `json:"with_zero_price,omitempty" url:"with_zero_price,omitempty"`
	// Filter products that are not linked to any plan
	WithoutLinkedToPlan *bool `json:"without_linked_to_plan,omitempty" url:"without_linked_to_plan,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListBillingProductsParams) GetIDs() []string {
	if l == nil {
		return nil
	}
	return l.IDs
}

func (l *ListBillingProductsParams) GetLimit() *int {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListBillingProductsParams) GetName() *string {
	if l == nil {
		return nil
	}
	return l.Name
}

func (l *ListBillingProductsParams) GetOffset() *int {
	if l == nil {
		return nil
	}
	return l.Offset
}

func (l *ListBillingProductsParams) GetPriceUsageType() *string {
	if l == nil {
		return nil
	}
	return l.PriceUsageType
}

func (l *ListBillingProductsParams) GetQ() *string {
	if l == nil {
		return nil
	}
	return l.Q
}

func (l *ListBillingProductsParams) GetWithPricesOnly() *bool {
	if l == nil {
		return nil
	}
	return l.WithPricesOnly
}

func (l *ListBillingProductsParams) GetWithZeroPrice() *bool {
	if l == nil {
		return nil
	}
	return l.WithZeroPrice
}

func (l *ListBillingProductsParams) GetWithoutLinkedToPlan() *bool {
	if l == nil {
		return nil
	}
	return l.WithoutLinkedToPlan
}

func (l *ListBillingProductsParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListBillingProductsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListBillingProductsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListBillingProductsParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListBillingProductsParams) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListBillingProductsResponse struct {
	// The returned resources
	Data []*BillingProductDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListBillingProductsParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListBillingProductsResponse) GetData() []*BillingProductDetailResponseData {
	if l == nil {
		return nil
	}
	return l.Data
}

func (l *ListBillingProductsResponse) GetParams() *ListBillingProductsParams {
	if l == nil {
		return nil
	}
	return l.Params
}

func (l *ListBillingProductsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListBillingProductsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListBillingProductsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListBillingProductsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListBillingProductsResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type ListCustomersParams struct {
	FailedToImport *bool `json:"failed_to_import,omitempty" url:"failed_to_import,omitempty"`
	// Page limit (default 100)
	Limit *int    `json:"limit,omitempty" url:"limit,omitempty"`
	Name  *string `json:"name,omitempty" url:"name,omitempty"`
	// Page offset (default 0)
	Offset *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Q      *string `json:"q,omitempty" url:"q,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListCustomersParams) GetFailedToImport() *bool {
	if l == nil {
		return nil
	}
	return l.FailedToImport
}

func (l *ListCustomersParams) GetLimit() *int {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListCustomersParams) GetName() *string {
	if l == nil {
		return nil
	}
	return l.Name
}

func (l *ListCustomersParams) GetOffset() *int {
	if l == nil {
		return nil
	}
	return l.Offset
}

func (l *ListCustomersParams) GetQ() *string {
	if l == nil {
		return nil
	}
	return l.Q
}

func (l *ListCustomersParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListCustomersParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListCustomersParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListCustomersParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListCustomersParams) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListCustomersResponse struct {
	// The returned resources
	Data []*BillingCustomerWithSubscriptionsResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListCustomersParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListCustomersResponse) GetData() []*BillingCustomerWithSubscriptionsResponseData {
	if l == nil {
		return nil
	}
	return l.Data
}

func (l *ListCustomersResponse) GetParams() *ListCustomersParams {
	if l == nil {
		return nil
	}
	return l.Params
}

func (l *ListCustomersResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListCustomersResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListCustomersResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListCustomersResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListCustomersResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type ListInvoicesParams struct {
	CompanyID          *string `json:"company_id,omitempty" url:"company_id,omitempty"`
	CustomerExternalID *string `json:"customer_external_id,omitempty" url:"customer_external_id,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset                 *int    `json:"offset,omitempty" url:"offset,omitempty"`
	SubscriptionExternalID *string `json:"subscription_external_id,omitempty" url:"subscription_external_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListInvoicesParams) GetCompanyID() *string {
	if l == nil {
		return nil
	}
	return l.CompanyID
}

func (l *ListInvoicesParams) GetCustomerExternalID() *string {
	if l == nil {
		return nil
	}
	return l.CustomerExternalID
}

func (l *ListInvoicesParams) GetLimit() *int {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListInvoicesParams) GetOffset() *int {
	if l == nil {
		return nil
	}
	return l.Offset
}

func (l *ListInvoicesParams) GetSubscriptionExternalID() *string {
	if l == nil {
		return nil
	}
	return l.SubscriptionExternalID
}

func (l *ListInvoicesParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListInvoicesParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListInvoicesParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListInvoicesParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListInvoicesParams) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListInvoicesResponse struct {
	// The returned resources
	Data []*InvoiceResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListInvoicesParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListInvoicesResponse) GetData() []*InvoiceResponseData {
	if l == nil {
		return nil
	}
	return l.Data
}

func (l *ListInvoicesResponse) GetParams() *ListInvoicesParams {
	if l == nil {
		return nil
	}
	return l.Params
}

func (l *ListInvoicesResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListInvoicesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListInvoicesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListInvoicesResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListInvoicesResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type ListMetersParams struct {
	DisplayName *string `json:"display_name,omitempty" url:"display_name,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"offset,omitempty" url:"offset,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListMetersParams) GetDisplayName() *string {
	if l == nil {
		return nil
	}
	return l.DisplayName
}

func (l *ListMetersParams) GetLimit() *int {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListMetersParams) GetOffset() *int {
	if l == nil {
		return nil
	}
	return l.Offset
}

func (l *ListMetersParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListMetersParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListMetersParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListMetersParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListMetersParams) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListMetersResponse struct {
	// The returned resources
	Data []*BillingMeterResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListMetersParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListMetersResponse) GetData() []*BillingMeterResponseData {
	if l == nil {
		return nil
	}
	return l.Data
}

func (l *ListMetersResponse) GetParams() *ListMetersParams {
	if l == nil {
		return nil
	}
	return l.Params
}

func (l *ListMetersResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListMetersResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListMetersResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListMetersResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListMetersResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type ListPaymentMethodsParams struct {
	CompanyID          *string `json:"company_id,omitempty" url:"company_id,omitempty"`
	CustomerExternalID *string `json:"customer_external_id,omitempty" url:"customer_external_id,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset                 *int    `json:"offset,omitempty" url:"offset,omitempty"`
	SubscriptionExternalID *string `json:"subscription_external_id,omitempty" url:"subscription_external_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListPaymentMethodsParams) GetCompanyID() *string {
	if l == nil {
		return nil
	}
	return l.CompanyID
}

func (l *ListPaymentMethodsParams) GetCustomerExternalID() *string {
	if l == nil {
		return nil
	}
	return l.CustomerExternalID
}

func (l *ListPaymentMethodsParams) GetLimit() *int {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListPaymentMethodsParams) GetOffset() *int {
	if l == nil {
		return nil
	}
	return l.Offset
}

func (l *ListPaymentMethodsParams) GetSubscriptionExternalID() *string {
	if l == nil {
		return nil
	}
	return l.SubscriptionExternalID
}

func (l *ListPaymentMethodsParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListPaymentMethodsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListPaymentMethodsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListPaymentMethodsParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListPaymentMethodsParams) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListPaymentMethodsResponse struct {
	// The returned resources
	Data []*PaymentMethodResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListPaymentMethodsParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListPaymentMethodsResponse) GetData() []*PaymentMethodResponseData {
	if l == nil {
		return nil
	}
	return l.Data
}

func (l *ListPaymentMethodsResponse) GetParams() *ListPaymentMethodsParams {
	if l == nil {
		return nil
	}
	return l.Params
}

func (l *ListPaymentMethodsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListPaymentMethodsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListPaymentMethodsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListPaymentMethodsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListPaymentMethodsResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type ListProductPricesParams struct {
	IDs []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int    `json:"limit,omitempty" url:"limit,omitempty"`
	Name  *string `json:"name,omitempty" url:"name,omitempty"`
	// Page offset (default 0)
	Offset         *int    `json:"offset,omitempty" url:"offset,omitempty"`
	PriceUsageType *string `json:"price_usage_type,omitempty" url:"price_usage_type,omitempty"`
	Q              *string `json:"q,omitempty" url:"q,omitempty"`
	// Filter products that have prices
	WithPricesOnly *bool `json:"with_prices_only,omitempty" url:"with_prices_only,omitempty"`
	// Filter products that have zero price for free subscription type
	WithZeroPrice *bool `json:"with_zero_price,omitempty" url:"with_zero_price,omitempty"`
	// Filter products that are not linked to any plan
	WithoutLinkedToPlan *bool `json:"without_linked_to_plan,omitempty" url:"without_linked_to_plan,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListProductPricesParams) GetIDs() []string {
	if l == nil {
		return nil
	}
	return l.IDs
}

func (l *ListProductPricesParams) GetLimit() *int {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListProductPricesParams) GetName() *string {
	if l == nil {
		return nil
	}
	return l.Name
}

func (l *ListProductPricesParams) GetOffset() *int {
	if l == nil {
		return nil
	}
	return l.Offset
}

func (l *ListProductPricesParams) GetPriceUsageType() *string {
	if l == nil {
		return nil
	}
	return l.PriceUsageType
}

func (l *ListProductPricesParams) GetQ() *string {
	if l == nil {
		return nil
	}
	return l.Q
}

func (l *ListProductPricesParams) GetWithPricesOnly() *bool {
	if l == nil {
		return nil
	}
	return l.WithPricesOnly
}

func (l *ListProductPricesParams) GetWithZeroPrice() *bool {
	if l == nil {
		return nil
	}
	return l.WithZeroPrice
}

func (l *ListProductPricesParams) GetWithoutLinkedToPlan() *bool {
	if l == nil {
		return nil
	}
	return l.WithoutLinkedToPlan
}

func (l *ListProductPricesParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListProductPricesParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListProductPricesParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListProductPricesParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListProductPricesParams) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListProductPricesResponse struct {
	// The returned resources
	Data []*BillingPriceResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListProductPricesParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListProductPricesResponse) GetData() []*BillingPriceResponseData {
	if l == nil {
		return nil
	}
	return l.Data
}

func (l *ListProductPricesResponse) GetParams() *ListProductPricesParams {
	if l == nil {
		return nil
	}
	return l.Params
}

func (l *ListProductPricesResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListProductPricesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListProductPricesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListProductPricesResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListProductPricesResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type SearchBillingPricesParams struct {
	IDs      []string `json:"ids,omitempty" url:"ids,omitempty"`
	Interval *string  `json:"interval,omitempty" url:"interval,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset    *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Price     *int    `json:"price,omitempty" url:"price,omitempty"`
	UsageType *string `json:"usage_type,omitempty" url:"usage_type,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SearchBillingPricesParams) GetIDs() []string {
	if s == nil {
		return nil
	}
	return s.IDs
}

func (s *SearchBillingPricesParams) GetInterval() *string {
	if s == nil {
		return nil
	}
	return s.Interval
}

func (s *SearchBillingPricesParams) GetLimit() *int {
	if s == nil {
		return nil
	}
	return s.Limit
}

func (s *SearchBillingPricesParams) GetOffset() *int {
	if s == nil {
		return nil
	}
	return s.Offset
}

func (s *SearchBillingPricesParams) GetPrice() *int {
	if s == nil {
		return nil
	}
	return s.Price
}

func (s *SearchBillingPricesParams) GetUsageType() *string {
	if s == nil {
		return nil
	}
	return s.UsageType
}

func (s *SearchBillingPricesParams) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchBillingPricesParams) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchBillingPricesParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchBillingPricesParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchBillingPricesParams) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchBillingPricesResponse struct {
	// The returned resources
	Data []*BillingPriceView `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *SearchBillingPricesParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SearchBillingPricesResponse) GetData() []*BillingPriceView {
	if s == nil {
		return nil
	}
	return s.Data
}

func (s *SearchBillingPricesResponse) GetParams() *SearchBillingPricesParams {
	if s == nil {
		return nil
	}
	return s.Params
}

func (s *SearchBillingPricesResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchBillingPricesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchBillingPricesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchBillingPricesResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchBillingPricesResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type UpsertBillingCouponResponse struct {
	Data *BillingCouponResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpsertBillingCouponResponse) GetData() *BillingCouponResponseData {
	if u == nil {
		return nil
	}
	return u.Data
}

func (u *UpsertBillingCouponResponse) GetParams() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.Params
}

func (u *UpsertBillingCouponResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertBillingCouponResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpsertBillingCouponResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpsertBillingCouponResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertBillingCouponResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpsertBillingCustomerResponse struct {
	Data *BillingCustomerResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpsertBillingCustomerResponse) GetData() *BillingCustomerResponseData {
	if u == nil {
		return nil
	}
	return u.Data
}

func (u *UpsertBillingCustomerResponse) GetParams() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.Params
}

func (u *UpsertBillingCustomerResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertBillingCustomerResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpsertBillingCustomerResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpsertBillingCustomerResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertBillingCustomerResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpsertBillingMeterResponse struct {
	Data *BillingMeterResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpsertBillingMeterResponse) GetData() *BillingMeterResponseData {
	if u == nil {
		return nil
	}
	return u.Data
}

func (u *UpsertBillingMeterResponse) GetParams() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.Params
}

func (u *UpsertBillingMeterResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertBillingMeterResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpsertBillingMeterResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpsertBillingMeterResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertBillingMeterResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpsertBillingPriceResponse struct {
	Data *BillingPriceResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpsertBillingPriceResponse) GetData() *BillingPriceResponseData {
	if u == nil {
		return nil
	}
	return u.Data
}

func (u *UpsertBillingPriceResponse) GetParams() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.Params
}

func (u *UpsertBillingPriceResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertBillingPriceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpsertBillingPriceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpsertBillingPriceResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertBillingPriceResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpsertBillingProductResponse struct {
	Data *BillingProductResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpsertBillingProductResponse) GetData() *BillingProductResponseData {
	if u == nil {
		return nil
	}
	return u.Data
}

func (u *UpsertBillingProductResponse) GetParams() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.Params
}

func (u *UpsertBillingProductResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertBillingProductResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpsertBillingProductResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpsertBillingProductResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertBillingProductResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpsertBillingSubscriptionResponse struct {
	Data *BillingSubscriptionResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpsertBillingSubscriptionResponse) GetData() *BillingSubscriptionResponseData {
	if u == nil {
		return nil
	}
	return u.Data
}

func (u *UpsertBillingSubscriptionResponse) GetParams() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.Params
}

func (u *UpsertBillingSubscriptionResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertBillingSubscriptionResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpsertBillingSubscriptionResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpsertBillingSubscriptionResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertBillingSubscriptionResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpsertInvoiceResponse struct {
	Data *InvoiceResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpsertInvoiceResponse) GetData() *InvoiceResponseData {
	if u == nil {
		return nil
	}
	return u.Data
}

func (u *UpsertInvoiceResponse) GetParams() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.Params
}

func (u *UpsertInvoiceResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertInvoiceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpsertInvoiceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpsertInvoiceResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertInvoiceResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpsertPaymentMethodResponse struct {
	Data *PaymentMethodResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpsertPaymentMethodResponse) GetData() *PaymentMethodResponseData {
	if u == nil {
		return nil
	}
	return u.Data
}

func (u *UpsertPaymentMethodResponse) GetParams() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.Params
}

func (u *UpsertPaymentMethodResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertPaymentMethodResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpsertPaymentMethodResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpsertPaymentMethodResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertPaymentMethodResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type CreateCouponRequestBody struct {
	AmountOff        int     `json:"amount_off" url:"-"`
	Currency         *string `json:"currency,omitempty" url:"-"`
	Duration         string  `json:"duration" url:"-"`
	DurationInMonths int     `json:"duration_in_months" url:"-"`
	ExternalID       string  `json:"external_id" url:"-"`
	MaxRedemptions   int     `json:"max_redemptions" url:"-"`
	Name             string  `json:"name" url:"-"`
	PercentOff       float64 `json:"percent_off" url:"-"`
	TimesRedeemed    int     `json:"times_redeemed" url:"-"`
}

type CreateBillingCustomerRequestBody struct {
	CompanyID      *string           `json:"company_id,omitempty" url:"-"`
	Email          string            `json:"email" url:"-"`
	ExternalID     string            `json:"external_id" url:"-"`
	FailedToImport bool              `json:"failed_to_import" url:"-"`
	Meta           map[string]string `json:"meta,omitempty" url:"-"`
	Name           string            `json:"name" url:"-"`
}

type CreateMeterRequestBody struct {
	DisplayName     string `json:"display_name" url:"-"`
	EventName       string `json:"event_name" url:"-"`
	EventPayloadKey string `json:"event_payload_key" url:"-"`
	ExternalID      string `json:"external_id" url:"-"`
}

type CreateBillingPriceRequestBody struct {
	Currency          string  `json:"currency" url:"-"`
	Interval          string  `json:"interval" url:"-"`
	IsActive          bool    `json:"is_active" url:"-"`
	MeterID           *string `json:"meter_id,omitempty" url:"-"`
	Price             int     `json:"price" url:"-"`
	PriceExternalID   string  `json:"price_external_id" url:"-"`
	ProductExternalID string  `json:"product_external_id" url:"-"`
	UsageType         string  `json:"usage_type" url:"-"`
}

type CreateBillingProductRequestBody struct {
	Currency   string  `json:"currency" url:"-"`
	ExternalID string  `json:"external_id" url:"-"`
	Name       string  `json:"name" url:"-"`
	Price      float64 `json:"price" url:"-"`
	Quantity   int     `json:"quantity" url:"-"`
}

type CreateBillingSubscriptionsRequestBody struct {
	Currency               string                         `json:"currency" url:"-"`
	CustomerExternalID     string                         `json:"customer_external_id" url:"-"`
	Discounts              []*BillingSubscriptionDiscount `json:"discounts,omitempty" url:"-"`
	ExpiredAt              time.Time                      `json:"expired_at" url:"-"`
	Interval               *string                        `json:"interval,omitempty" url:"-"`
	Metadata               map[string]interface{}         `json:"metadata,omitempty" url:"-"`
	PeriodEnd              *int                           `json:"period_end,omitempty" url:"-"`
	PeriodStart            *int                           `json:"period_start,omitempty" url:"-"`
	ProductExternalIDs     []*BillingProductPricing       `json:"product_external_ids,omitempty" url:"-"`
	Status                 *string                        `json:"status,omitempty" url:"-"`
	SubscriptionExternalID string                         `json:"subscription_external_id" url:"-"`
	TotalPrice             int                            `json:"total_price" url:"-"`
	TrialEnd               *int                           `json:"trial_end,omitempty" url:"-"`
	TrialEndSetting        *string                        `json:"trial_end_setting,omitempty" url:"-"`
}

func (c *CreateBillingSubscriptionsRequestBody) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateBillingSubscriptionsRequestBody
	var body unmarshaler
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	*c = CreateBillingSubscriptionsRequestBody(body)
	return nil
}

func (c *CreateBillingSubscriptionsRequestBody) MarshalJSON() ([]byte, error) {
	type embed CreateBillingSubscriptionsRequestBody
	var marshaler = struct {
		embed
		ExpiredAt *internal.DateTime `json:"expired_at"`
	}{
		embed:     embed(*c),
		ExpiredAt: internal.NewDateTime(c.ExpiredAt),
	}
	return json.Marshal(marshaler)
}

type CreateInvoiceRequestBody struct {
	AmountDue               int        `json:"amount_due" url:"-"`
	AmountPaid              int        `json:"amount_paid" url:"-"`
	AmountRemaining         int        `json:"amount_remaining" url:"-"`
	CollectionMethod        string     `json:"collection_method" url:"-"`
	Currency                string     `json:"currency" url:"-"`
	CustomerExternalID      string     `json:"customer_external_id" url:"-"`
	DueDate                 *time.Time `json:"due_date,omitempty" url:"-"`
	ExternalID              *string    `json:"external_id,omitempty" url:"-"`
	PaymentMethodExternalID *string    `json:"payment_method_external_id,omitempty" url:"-"`
	SubscriptionExternalID  *string    `json:"subscription_external_id,omitempty" url:"-"`
	Subtotal                int        `json:"subtotal" url:"-"`
	URL                     *string    `json:"url,omitempty" url:"-"`
}

func (c *CreateInvoiceRequestBody) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateInvoiceRequestBody
	var body unmarshaler
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	*c = CreateInvoiceRequestBody(body)
	return nil
}

func (c *CreateInvoiceRequestBody) MarshalJSON() ([]byte, error) {
	type embed CreateInvoiceRequestBody
	var marshaler = struct {
		embed
		DueDate *internal.DateTime `json:"due_date,omitempty"`
	}{
		embed:   embed(*c),
		DueDate: internal.NewOptionalDateTime(c.DueDate),
	}
	return json.Marshal(marshaler)
}

type CreatePaymentMethodRequestBody struct {
	AccountLast4           *string `json:"account_last4,omitempty" url:"-"`
	AccountName            *string `json:"account_name,omitempty" url:"-"`
	BankName               *string `json:"bank_name,omitempty" url:"-"`
	BillingEmail           *string `json:"billing_email,omitempty" url:"-"`
	BillingName            *string `json:"billing_name,omitempty" url:"-"`
	CardBrand              *string `json:"card_brand,omitempty" url:"-"`
	CardExpMonth           *int    `json:"card_exp_month,omitempty" url:"-"`
	CardExpYear            *int    `json:"card_exp_year,omitempty" url:"-"`
	CardLast4              *string `json:"card_last4,omitempty" url:"-"`
	CustomerExternalID     string  `json:"customer_external_id" url:"-"`
	ExternalID             string  `json:"external_id" url:"-"`
	PaymentMethodType      string  `json:"payment_method_type" url:"-"`
	SubscriptionExternalID *string `json:"subscription_external_id,omitempty" url:"-"`
}
