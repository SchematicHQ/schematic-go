// This file was auto-generated by Fern from our API Definition.

package schematichq

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/schematichq/schematic-go/internal"
	time "time"
)

type CheckoutDataRequestBody struct {
	CompanyID      string  `json:"company_id" url:"-"`
	SelectedPlanID *string `json:"selected_plan_id,omitempty" url:"-"`
}

type ChangeSubscriptionInternalRequestBody struct {
	AddOnIDs         []*UpdateAddOnRequestBody        `json:"add_on_ids,omitempty" url:"add_on_ids,omitempty"`
	CompanyID        string                           `json:"company_id" url:"company_id"`
	CouponExternalID *string                          `json:"coupon_external_id,omitempty" url:"coupon_external_id,omitempty"`
	CreditBundles    []*UpdateCreditBundleRequestBody `json:"credit_bundles,omitempty" url:"credit_bundles,omitempty"`
	NewPlanID        string                           `json:"new_plan_id" url:"new_plan_id"`
	NewPriceID       string                           `json:"new_price_id" url:"new_price_id"`
	PayInAdvance     []*UpdatePayInAdvanceRequestBody `json:"pay_in_advance,omitempty" url:"pay_in_advance,omitempty"`
	PaymentMethodID  *string                          `json:"payment_method_id,omitempty" url:"payment_method_id,omitempty"`
	PromoCode        *string                          `json:"promo_code,omitempty" url:"promo_code,omitempty"`
	SkipTrial        bool                             `json:"skip_trial" url:"skip_trial"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ChangeSubscriptionInternalRequestBody) GetAddOnIDs() []*UpdateAddOnRequestBody {
	if c == nil {
		return nil
	}
	return c.AddOnIDs
}

func (c *ChangeSubscriptionInternalRequestBody) GetCompanyID() string {
	if c == nil {
		return ""
	}
	return c.CompanyID
}

func (c *ChangeSubscriptionInternalRequestBody) GetCouponExternalID() *string {
	if c == nil {
		return nil
	}
	return c.CouponExternalID
}

func (c *ChangeSubscriptionInternalRequestBody) GetCreditBundles() []*UpdateCreditBundleRequestBody {
	if c == nil {
		return nil
	}
	return c.CreditBundles
}

func (c *ChangeSubscriptionInternalRequestBody) GetNewPlanID() string {
	if c == nil {
		return ""
	}
	return c.NewPlanID
}

func (c *ChangeSubscriptionInternalRequestBody) GetNewPriceID() string {
	if c == nil {
		return ""
	}
	return c.NewPriceID
}

func (c *ChangeSubscriptionInternalRequestBody) GetPayInAdvance() []*UpdatePayInAdvanceRequestBody {
	if c == nil {
		return nil
	}
	return c.PayInAdvance
}

func (c *ChangeSubscriptionInternalRequestBody) GetPaymentMethodID() *string {
	if c == nil {
		return nil
	}
	return c.PaymentMethodID
}

func (c *ChangeSubscriptionInternalRequestBody) GetPromoCode() *string {
	if c == nil {
		return nil
	}
	return c.PromoCode
}

func (c *ChangeSubscriptionInternalRequestBody) GetSkipTrial() bool {
	if c == nil {
		return false
	}
	return c.SkipTrial
}

func (c *ChangeSubscriptionInternalRequestBody) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ChangeSubscriptionInternalRequestBody) UnmarshalJSON(data []byte) error {
	type unmarshaler ChangeSubscriptionInternalRequestBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ChangeSubscriptionInternalRequestBody(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ChangeSubscriptionInternalRequestBody) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CheckoutDataResponseData struct {
	ActiveAddOns                   []*PlanDetailResponseData            `json:"active_add_ons,omitempty" url:"active_add_ons,omitempty"`
	ActivePlan                     *PlanDetailResponseData              `json:"active_plan,omitempty" url:"active_plan,omitempty"`
	ActiveUsageBasedEntitlements   []*UsageBasedEntitlementResponseData `json:"active_usage_based_entitlements,omitempty" url:"active_usage_based_entitlements,omitempty"`
	AvailableCreditBundles         []*BillingCreditBundleResponseData   `json:"available_credit_bundles,omitempty" url:"available_credit_bundles,omitempty"`
	Company                        *CompanyDetailResponseData           `json:"company,omitempty" url:"company,omitempty"`
	FeatureUsage                   *FeatureUsageDetailResponseData      `json:"feature_usage,omitempty" url:"feature_usage,omitempty"`
	SelectedCreditBundles          []*CreditBundlePurchaseResponseData  `json:"selected_credit_bundles,omitempty" url:"selected_credit_bundles,omitempty"`
	SelectedPlan                   *PlanDetailResponseData              `json:"selected_plan,omitempty" url:"selected_plan,omitempty"`
	SelectedUsageBasedEntitlements []*UsageBasedEntitlementResponseData `json:"selected_usage_based_entitlements,omitempty" url:"selected_usage_based_entitlements,omitempty"`
	Subscription                   *CompanySubscriptionResponseData     `json:"subscription,omitempty" url:"subscription,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CheckoutDataResponseData) GetActiveAddOns() []*PlanDetailResponseData {
	if c == nil {
		return nil
	}
	return c.ActiveAddOns
}

func (c *CheckoutDataResponseData) GetActivePlan() *PlanDetailResponseData {
	if c == nil {
		return nil
	}
	return c.ActivePlan
}

func (c *CheckoutDataResponseData) GetActiveUsageBasedEntitlements() []*UsageBasedEntitlementResponseData {
	if c == nil {
		return nil
	}
	return c.ActiveUsageBasedEntitlements
}

func (c *CheckoutDataResponseData) GetAvailableCreditBundles() []*BillingCreditBundleResponseData {
	if c == nil {
		return nil
	}
	return c.AvailableCreditBundles
}

func (c *CheckoutDataResponseData) GetCompany() *CompanyDetailResponseData {
	if c == nil {
		return nil
	}
	return c.Company
}

func (c *CheckoutDataResponseData) GetFeatureUsage() *FeatureUsageDetailResponseData {
	if c == nil {
		return nil
	}
	return c.FeatureUsage
}

func (c *CheckoutDataResponseData) GetSelectedCreditBundles() []*CreditBundlePurchaseResponseData {
	if c == nil {
		return nil
	}
	return c.SelectedCreditBundles
}

func (c *CheckoutDataResponseData) GetSelectedPlan() *PlanDetailResponseData {
	if c == nil {
		return nil
	}
	return c.SelectedPlan
}

func (c *CheckoutDataResponseData) GetSelectedUsageBasedEntitlements() []*UsageBasedEntitlementResponseData {
	if c == nil {
		return nil
	}
	return c.SelectedUsageBasedEntitlements
}

func (c *CheckoutDataResponseData) GetSubscription() *CompanySubscriptionResponseData {
	if c == nil {
		return nil
	}
	return c.Subscription
}

func (c *CheckoutDataResponseData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CheckoutDataResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler CheckoutDataResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CheckoutDataResponseData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CheckoutDataResponseData) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CheckoutSubscription struct {
	CancelAt                         *int                   `json:"cancel_at,omitempty" url:"cancel_at,omitempty"`
	CancelAtPeriodEnd                bool                   `json:"cancel_at_period_end" url:"cancel_at_period_end"`
	CompanyID                        *string                `json:"company_id,omitempty" url:"company_id,omitempty"`
	ConfirmPaymentIntentClientSecret *string                `json:"confirm_payment_intent_client_secret,omitempty" url:"confirm_payment_intent_client_secret,omitempty"`
	ConfirmPaymentIntentID           *string                `json:"confirm_payment_intent_id,omitempty" url:"confirm_payment_intent_id,omitempty"`
	CreatedAt                        time.Time              `json:"created_at" url:"created_at"`
	Currency                         string                 `json:"currency" url:"currency"`
	CustomerExternalID               string                 `json:"customer_external_id" url:"customer_external_id"`
	DefaultPaymentMethodID           *string                `json:"default_payment_method_id,omitempty" url:"default_payment_method_id,omitempty"`
	ExpiredAt                        *time.Time             `json:"expired_at,omitempty" url:"expired_at,omitempty"`
	ID                               string                 `json:"id" url:"id"`
	Interval                         string                 `json:"interval" url:"interval"`
	Metadata                         map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	PeriodEnd                        int                    `json:"period_end" url:"period_end"`
	PeriodStart                      int                    `json:"period_start" url:"period_start"`
	Status                           string                 `json:"status" url:"status"`
	SubscriptionExternalID           string                 `json:"subscription_external_id" url:"subscription_external_id"`
	TotalPrice                       int                    `json:"total_price" url:"total_price"`
	TrialEnd                         *int                   `json:"trial_end,omitempty" url:"trial_end,omitempty"`
	TrialEndSetting                  *string                `json:"trial_end_setting,omitempty" url:"trial_end_setting,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CheckoutSubscription) GetCancelAt() *int {
	if c == nil {
		return nil
	}
	return c.CancelAt
}

func (c *CheckoutSubscription) GetCancelAtPeriodEnd() bool {
	if c == nil {
		return false
	}
	return c.CancelAtPeriodEnd
}

func (c *CheckoutSubscription) GetCompanyID() *string {
	if c == nil {
		return nil
	}
	return c.CompanyID
}

func (c *CheckoutSubscription) GetConfirmPaymentIntentClientSecret() *string {
	if c == nil {
		return nil
	}
	return c.ConfirmPaymentIntentClientSecret
}

func (c *CheckoutSubscription) GetConfirmPaymentIntentID() *string {
	if c == nil {
		return nil
	}
	return c.ConfirmPaymentIntentID
}

func (c *CheckoutSubscription) GetCreatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.CreatedAt
}

func (c *CheckoutSubscription) GetCurrency() string {
	if c == nil {
		return ""
	}
	return c.Currency
}

func (c *CheckoutSubscription) GetCustomerExternalID() string {
	if c == nil {
		return ""
	}
	return c.CustomerExternalID
}

func (c *CheckoutSubscription) GetDefaultPaymentMethodID() *string {
	if c == nil {
		return nil
	}
	return c.DefaultPaymentMethodID
}

func (c *CheckoutSubscription) GetExpiredAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.ExpiredAt
}

func (c *CheckoutSubscription) GetID() string {
	if c == nil {
		return ""
	}
	return c.ID
}

func (c *CheckoutSubscription) GetInterval() string {
	if c == nil {
		return ""
	}
	return c.Interval
}

func (c *CheckoutSubscription) GetMetadata() map[string]interface{} {
	if c == nil {
		return nil
	}
	return c.Metadata
}

func (c *CheckoutSubscription) GetPeriodEnd() int {
	if c == nil {
		return 0
	}
	return c.PeriodEnd
}

func (c *CheckoutSubscription) GetPeriodStart() int {
	if c == nil {
		return 0
	}
	return c.PeriodStart
}

func (c *CheckoutSubscription) GetStatus() string {
	if c == nil {
		return ""
	}
	return c.Status
}

func (c *CheckoutSubscription) GetSubscriptionExternalID() string {
	if c == nil {
		return ""
	}
	return c.SubscriptionExternalID
}

func (c *CheckoutSubscription) GetTotalPrice() int {
	if c == nil {
		return 0
	}
	return c.TotalPrice
}

func (c *CheckoutSubscription) GetTrialEnd() *int {
	if c == nil {
		return nil
	}
	return c.TrialEnd
}

func (c *CheckoutSubscription) GetTrialEndSetting() *string {
	if c == nil {
		return nil
	}
	return c.TrialEndSetting
}

func (c *CheckoutSubscription) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CheckoutSubscription) UnmarshalJSON(data []byte) error {
	type embed CheckoutSubscription
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		ExpiredAt *internal.DateTime `json:"expired_at,omitempty"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CheckoutSubscription(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.ExpiredAt = unmarshaler.ExpiredAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CheckoutSubscription) MarshalJSON() ([]byte, error) {
	type embed CheckoutSubscription
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		ExpiredAt *internal.DateTime `json:"expired_at,omitempty"`
	}{
		embed:     embed(*c),
		CreatedAt: internal.NewDateTime(c.CreatedAt),
		ExpiredAt: internal.NewOptionalDateTime(c.ExpiredAt),
	}
	return json.Marshal(marshaler)
}

func (c *CheckoutSubscription) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreditBundlePurchaseResponseData struct {
	Bundle   *BillingCreditBundleResponseData `json:"bundle,omitempty" url:"bundle,omitempty"`
	Quantity int                              `json:"quantity" url:"quantity"`
	Total    int                              `json:"total" url:"total"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreditBundlePurchaseResponseData) GetBundle() *BillingCreditBundleResponseData {
	if c == nil {
		return nil
	}
	return c.Bundle
}

func (c *CreditBundlePurchaseResponseData) GetQuantity() int {
	if c == nil {
		return 0
	}
	return c.Quantity
}

func (c *CreditBundlePurchaseResponseData) GetTotal() int {
	if c == nil {
		return 0
	}
	return c.Total
}

func (c *CreditBundlePurchaseResponseData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreditBundlePurchaseResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler CreditBundlePurchaseResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreditBundlePurchaseResponseData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreditBundlePurchaseResponseData) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ManagePlanPreviewResponseResponseData struct {
	SubscriptionChangePreview *PreviewSubscriptionChangeResponseData `json:"subscription_change_preview,omitempty" url:"subscription_change_preview,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *ManagePlanPreviewResponseResponseData) GetSubscriptionChangePreview() *PreviewSubscriptionChangeResponseData {
	if m == nil {
		return nil
	}
	return m.SubscriptionChangePreview
}

func (m *ManagePlanPreviewResponseResponseData) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *ManagePlanPreviewResponseResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler ManagePlanPreviewResponseResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = ManagePlanPreviewResponseResponseData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *ManagePlanPreviewResponseResponseData) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type ManagePlanRequest struct {
	AddOnSelections          []*PlanSelection                 `json:"add_on_selections,omitempty" url:"add_on_selections,omitempty"`
	BasePlanID               *string                          `json:"base_plan_id,omitempty" url:"base_plan_id,omitempty"`
	BasePlanPriceID          *string                          `json:"base_plan_price_id,omitempty" url:"base_plan_price_id,omitempty"`
	CompanyID                string                           `json:"company_id" url:"company_id"`
	CouponExternalID         *string                          `json:"coupon_external_id,omitempty" url:"coupon_external_id,omitempty"`
	CreditBundles            []*UpdateCreditBundleRequestBody `json:"credit_bundles,omitempty" url:"credit_bundles,omitempty"`
	PayInAdvanceEntitlements []*UpdatePayInAdvanceRequestBody `json:"pay_in_advance_entitlements,omitempty" url:"pay_in_advance_entitlements,omitempty"`
	PaymentMethodExternalID  *string                          `json:"payment_method_external_id,omitempty" url:"payment_method_external_id,omitempty"`
	PromoCode                *string                          `json:"promo_code,omitempty" url:"promo_code,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *ManagePlanRequest) GetAddOnSelections() []*PlanSelection {
	if m == nil {
		return nil
	}
	return m.AddOnSelections
}

func (m *ManagePlanRequest) GetBasePlanID() *string {
	if m == nil {
		return nil
	}
	return m.BasePlanID
}

func (m *ManagePlanRequest) GetBasePlanPriceID() *string {
	if m == nil {
		return nil
	}
	return m.BasePlanPriceID
}

func (m *ManagePlanRequest) GetCompanyID() string {
	if m == nil {
		return ""
	}
	return m.CompanyID
}

func (m *ManagePlanRequest) GetCouponExternalID() *string {
	if m == nil {
		return nil
	}
	return m.CouponExternalID
}

func (m *ManagePlanRequest) GetCreditBundles() []*UpdateCreditBundleRequestBody {
	if m == nil {
		return nil
	}
	return m.CreditBundles
}

func (m *ManagePlanRequest) GetPayInAdvanceEntitlements() []*UpdatePayInAdvanceRequestBody {
	if m == nil {
		return nil
	}
	return m.PayInAdvanceEntitlements
}

func (m *ManagePlanRequest) GetPaymentMethodExternalID() *string {
	if m == nil {
		return nil
	}
	return m.PaymentMethodExternalID
}

func (m *ManagePlanRequest) GetPromoCode() *string {
	if m == nil {
		return nil
	}
	return m.PromoCode
}

func (m *ManagePlanRequest) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *ManagePlanRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ManagePlanRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = ManagePlanRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *ManagePlanRequest) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type ManagePlanResponseResponseData struct {
	Company *CompanyDetailResponseData `json:"company,omitempty" url:"company,omitempty"`
	Success bool                       `json:"success" url:"success"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *ManagePlanResponseResponseData) GetCompany() *CompanyDetailResponseData {
	if m == nil {
		return nil
	}
	return m.Company
}

func (m *ManagePlanResponseResponseData) GetSuccess() bool {
	if m == nil {
		return false
	}
	return m.Success
}

func (m *ManagePlanResponseResponseData) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *ManagePlanResponseResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler ManagePlanResponseResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = ManagePlanResponseResponseData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *ManagePlanResponseResponseData) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type PlanSelection struct {
	PlanID  string  `json:"plan_id" url:"plan_id"`
	PriceID *string `json:"price_id,omitempty" url:"price_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PlanSelection) GetPlanID() string {
	if p == nil {
		return ""
	}
	return p.PlanID
}

func (p *PlanSelection) GetPriceID() *string {
	if p == nil {
		return nil
	}
	return p.PriceID
}

func (p *PlanSelection) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PlanSelection) UnmarshalJSON(data []byte) error {
	type unmarshaler PlanSelection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PlanSelection(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PlanSelection) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PreviewSubscriptionChangeResponseData struct {
	AmountOff             int                                     `json:"amount_off" url:"amount_off"`
	DueNow                int                                     `json:"due_now" url:"due_now"`
	Finance               *PreviewSubscriptionFinanceResponseData `json:"finance,omitempty" url:"finance,omitempty"`
	NewCharges            int                                     `json:"new_charges" url:"new_charges"`
	PaymentMethodRequired bool                                    `json:"payment_method_required" url:"payment_method_required"`
	PercentOff            float64                                 `json:"percent_off" url:"percent_off"`
	PeriodStart           time.Time                               `json:"period_start" url:"period_start"`
	PromoCodeApplied      bool                                    `json:"promo_code_applied" url:"promo_code_applied"`
	Proration             int                                     `json:"proration" url:"proration"`
	TrialEnd              *time.Time                              `json:"trial_end,omitempty" url:"trial_end,omitempty"`
	UsageViolations       []*FeatureUsageResponseData             `json:"usage_violations,omitempty" url:"usage_violations,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PreviewSubscriptionChangeResponseData) GetAmountOff() int {
	if p == nil {
		return 0
	}
	return p.AmountOff
}

func (p *PreviewSubscriptionChangeResponseData) GetDueNow() int {
	if p == nil {
		return 0
	}
	return p.DueNow
}

func (p *PreviewSubscriptionChangeResponseData) GetFinance() *PreviewSubscriptionFinanceResponseData {
	if p == nil {
		return nil
	}
	return p.Finance
}

func (p *PreviewSubscriptionChangeResponseData) GetNewCharges() int {
	if p == nil {
		return 0
	}
	return p.NewCharges
}

func (p *PreviewSubscriptionChangeResponseData) GetPaymentMethodRequired() bool {
	if p == nil {
		return false
	}
	return p.PaymentMethodRequired
}

func (p *PreviewSubscriptionChangeResponseData) GetPercentOff() float64 {
	if p == nil {
		return 0
	}
	return p.PercentOff
}

func (p *PreviewSubscriptionChangeResponseData) GetPeriodStart() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.PeriodStart
}

func (p *PreviewSubscriptionChangeResponseData) GetPromoCodeApplied() bool {
	if p == nil {
		return false
	}
	return p.PromoCodeApplied
}

func (p *PreviewSubscriptionChangeResponseData) GetProration() int {
	if p == nil {
		return 0
	}
	return p.Proration
}

func (p *PreviewSubscriptionChangeResponseData) GetTrialEnd() *time.Time {
	if p == nil {
		return nil
	}
	return p.TrialEnd
}

func (p *PreviewSubscriptionChangeResponseData) GetUsageViolations() []*FeatureUsageResponseData {
	if p == nil {
		return nil
	}
	return p.UsageViolations
}

func (p *PreviewSubscriptionChangeResponseData) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PreviewSubscriptionChangeResponseData) UnmarshalJSON(data []byte) error {
	type embed PreviewSubscriptionChangeResponseData
	var unmarshaler = struct {
		embed
		PeriodStart *internal.DateTime `json:"period_start"`
		TrialEnd    *internal.DateTime `json:"trial_end,omitempty"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PreviewSubscriptionChangeResponseData(unmarshaler.embed)
	p.PeriodStart = unmarshaler.PeriodStart.Time()
	p.TrialEnd = unmarshaler.TrialEnd.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PreviewSubscriptionChangeResponseData) MarshalJSON() ([]byte, error) {
	type embed PreviewSubscriptionChangeResponseData
	var marshaler = struct {
		embed
		PeriodStart *internal.DateTime `json:"period_start"`
		TrialEnd    *internal.DateTime `json:"trial_end,omitempty"`
	}{
		embed:       embed(*p),
		PeriodStart: internal.NewDateTime(p.PeriodStart),
		TrialEnd:    internal.NewOptionalDateTime(p.TrialEnd),
	}
	return json.Marshal(marshaler)
}

func (p *PreviewSubscriptionChangeResponseData) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PreviewSubscriptionFinanceResponseData struct {
	AmountOff                int                                            `json:"amount_off" url:"amount_off"`
	DueNow                   int                                            `json:"due_now" url:"due_now"`
	NewCharges               int                                            `json:"new_charges" url:"new_charges"`
	PercentOff               float64                                        `json:"percent_off" url:"percent_off"`
	PeriodStart              time.Time                                      `json:"period_start" url:"period_start"`
	PromoCodeApplied         bool                                           `json:"promo_code_applied" url:"promo_code_applied"`
	Proration                int                                            `json:"proration" url:"proration"`
	TaxAmount                *int                                           `json:"tax_amount,omitempty" url:"tax_amount,omitempty"`
	TaxDisplayName           *string                                        `json:"tax_display_name,omitempty" url:"tax_display_name,omitempty"`
	TaxRequireBillingDetails bool                                           `json:"tax_require_billing_details" url:"tax_require_billing_details"`
	TrialEnd                 *time.Time                                     `json:"trial_end,omitempty" url:"trial_end,omitempty"`
	UpcomingInvoiceLineItems []*PreviewSubscriptionUpcomingInvoiceLineItems `json:"upcoming_invoice_line_items,omitempty" url:"upcoming_invoice_line_items,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PreviewSubscriptionFinanceResponseData) GetAmountOff() int {
	if p == nil {
		return 0
	}
	return p.AmountOff
}

func (p *PreviewSubscriptionFinanceResponseData) GetDueNow() int {
	if p == nil {
		return 0
	}
	return p.DueNow
}

func (p *PreviewSubscriptionFinanceResponseData) GetNewCharges() int {
	if p == nil {
		return 0
	}
	return p.NewCharges
}

func (p *PreviewSubscriptionFinanceResponseData) GetPercentOff() float64 {
	if p == nil {
		return 0
	}
	return p.PercentOff
}

func (p *PreviewSubscriptionFinanceResponseData) GetPeriodStart() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.PeriodStart
}

func (p *PreviewSubscriptionFinanceResponseData) GetPromoCodeApplied() bool {
	if p == nil {
		return false
	}
	return p.PromoCodeApplied
}

func (p *PreviewSubscriptionFinanceResponseData) GetProration() int {
	if p == nil {
		return 0
	}
	return p.Proration
}

func (p *PreviewSubscriptionFinanceResponseData) GetTaxAmount() *int {
	if p == nil {
		return nil
	}
	return p.TaxAmount
}

func (p *PreviewSubscriptionFinanceResponseData) GetTaxDisplayName() *string {
	if p == nil {
		return nil
	}
	return p.TaxDisplayName
}

func (p *PreviewSubscriptionFinanceResponseData) GetTaxRequireBillingDetails() bool {
	if p == nil {
		return false
	}
	return p.TaxRequireBillingDetails
}

func (p *PreviewSubscriptionFinanceResponseData) GetTrialEnd() *time.Time {
	if p == nil {
		return nil
	}
	return p.TrialEnd
}

func (p *PreviewSubscriptionFinanceResponseData) GetUpcomingInvoiceLineItems() []*PreviewSubscriptionUpcomingInvoiceLineItems {
	if p == nil {
		return nil
	}
	return p.UpcomingInvoiceLineItems
}

func (p *PreviewSubscriptionFinanceResponseData) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PreviewSubscriptionFinanceResponseData) UnmarshalJSON(data []byte) error {
	type embed PreviewSubscriptionFinanceResponseData
	var unmarshaler = struct {
		embed
		PeriodStart *internal.DateTime `json:"period_start"`
		TrialEnd    *internal.DateTime `json:"trial_end,omitempty"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PreviewSubscriptionFinanceResponseData(unmarshaler.embed)
	p.PeriodStart = unmarshaler.PeriodStart.Time()
	p.TrialEnd = unmarshaler.TrialEnd.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PreviewSubscriptionFinanceResponseData) MarshalJSON() ([]byte, error) {
	type embed PreviewSubscriptionFinanceResponseData
	var marshaler = struct {
		embed
		PeriodStart *internal.DateTime `json:"period_start"`
		TrialEnd    *internal.DateTime `json:"trial_end,omitempty"`
	}{
		embed:       embed(*p),
		PeriodStart: internal.NewDateTime(p.PeriodStart),
		TrialEnd:    internal.NewOptionalDateTime(p.TrialEnd),
	}
	return json.Marshal(marshaler)
}

func (p *PreviewSubscriptionFinanceResponseData) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PreviewSubscriptionUpcomingInvoiceLineItems struct {
	Amount      int    `json:"amount" url:"amount"`
	Description string `json:"description" url:"description"`
	PriceID     string `json:"price_id" url:"price_id"`
	Proration   bool   `json:"proration" url:"proration"`
	Quantity    int    `json:"quantity" url:"quantity"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PreviewSubscriptionUpcomingInvoiceLineItems) GetAmount() int {
	if p == nil {
		return 0
	}
	return p.Amount
}

func (p *PreviewSubscriptionUpcomingInvoiceLineItems) GetDescription() string {
	if p == nil {
		return ""
	}
	return p.Description
}

func (p *PreviewSubscriptionUpcomingInvoiceLineItems) GetPriceID() string {
	if p == nil {
		return ""
	}
	return p.PriceID
}

func (p *PreviewSubscriptionUpcomingInvoiceLineItems) GetProration() bool {
	if p == nil {
		return false
	}
	return p.Proration
}

func (p *PreviewSubscriptionUpcomingInvoiceLineItems) GetQuantity() int {
	if p == nil {
		return 0
	}
	return p.Quantity
}

func (p *PreviewSubscriptionUpcomingInvoiceLineItems) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PreviewSubscriptionUpcomingInvoiceLineItems) UnmarshalJSON(data []byte) error {
	type unmarshaler PreviewSubscriptionUpcomingInvoiceLineItems
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PreviewSubscriptionUpcomingInvoiceLineItems(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PreviewSubscriptionUpcomingInvoiceLineItems) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type UpdateAddOnRequestBody struct {
	AddOnID string `json:"add_on_id" url:"add_on_id"`
	PriceID string `json:"price_id" url:"price_id"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateAddOnRequestBody) GetAddOnID() string {
	if u == nil {
		return ""
	}
	return u.AddOnID
}

func (u *UpdateAddOnRequestBody) GetPriceID() string {
	if u == nil {
		return ""
	}
	return u.PriceID
}

func (u *UpdateAddOnRequestBody) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateAddOnRequestBody) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateAddOnRequestBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateAddOnRequestBody(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateAddOnRequestBody) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateCreditBundleRequestBody struct {
	BundleID string `json:"bundle_id" url:"bundle_id"`
	Quantity int    `json:"quantity" url:"quantity"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateCreditBundleRequestBody) GetBundleID() string {
	if u == nil {
		return ""
	}
	return u.BundleID
}

func (u *UpdateCreditBundleRequestBody) GetQuantity() int {
	if u == nil {
		return 0
	}
	return u.Quantity
}

func (u *UpdateCreditBundleRequestBody) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateCreditBundleRequestBody) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateCreditBundleRequestBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateCreditBundleRequestBody(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateCreditBundleRequestBody) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdatePayInAdvanceRequestBody struct {
	PriceID  string `json:"price_id" url:"price_id"`
	Quantity int    `json:"quantity" url:"quantity"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdatePayInAdvanceRequestBody) GetPriceID() string {
	if u == nil {
		return ""
	}
	return u.PriceID
}

func (u *UpdatePayInAdvanceRequestBody) GetQuantity() int {
	if u == nil {
		return 0
	}
	return u.Quantity
}

func (u *UpdatePayInAdvanceRequestBody) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdatePayInAdvanceRequestBody) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdatePayInAdvanceRequestBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdatePayInAdvanceRequestBody(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdatePayInAdvanceRequestBody) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type CheckoutInternalResponse struct {
	Data *CheckoutSubscription `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CheckoutInternalResponse) GetData() *CheckoutSubscription {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *CheckoutInternalResponse) GetParams() map[string]interface{} {
	if c == nil {
		return nil
	}
	return c.Params
}

func (c *CheckoutInternalResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CheckoutInternalResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CheckoutInternalResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CheckoutInternalResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CheckoutInternalResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type GetCheckoutDataResponse struct {
	Data *CheckoutDataResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetCheckoutDataResponse) GetData() *CheckoutDataResponseData {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GetCheckoutDataResponse) GetParams() map[string]interface{} {
	if g == nil {
		return nil
	}
	return g.Params
}

func (g *GetCheckoutDataResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetCheckoutDataResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetCheckoutDataResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetCheckoutDataResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetCheckoutDataResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ManagePlanResponse struct {
	Data *ManagePlanResponseResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *ManagePlanResponse) GetData() *ManagePlanResponseResponseData {
	if m == nil {
		return nil
	}
	return m.Data
}

func (m *ManagePlanResponse) GetParams() map[string]interface{} {
	if m == nil {
		return nil
	}
	return m.Params
}

func (m *ManagePlanResponse) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *ManagePlanResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ManagePlanResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = ManagePlanResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *ManagePlanResponse) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type PreviewCheckoutInternalResponse struct {
	Data *PreviewSubscriptionChangeResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PreviewCheckoutInternalResponse) GetData() *PreviewSubscriptionChangeResponseData {
	if p == nil {
		return nil
	}
	return p.Data
}

func (p *PreviewCheckoutInternalResponse) GetParams() map[string]interface{} {
	if p == nil {
		return nil
	}
	return p.Params
}

func (p *PreviewCheckoutInternalResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PreviewCheckoutInternalResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PreviewCheckoutInternalResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PreviewCheckoutInternalResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PreviewCheckoutInternalResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PreviewManagePlanResponse struct {
	Data *ManagePlanPreviewResponseResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PreviewManagePlanResponse) GetData() *ManagePlanPreviewResponseResponseData {
	if p == nil {
		return nil
	}
	return p.Data
}

func (p *PreviewManagePlanResponse) GetParams() map[string]interface{} {
	if p == nil {
		return nil
	}
	return p.Params
}

func (p *PreviewManagePlanResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PreviewManagePlanResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PreviewManagePlanResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PreviewManagePlanResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PreviewManagePlanResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type UpdateCustomerSubscriptionTrialEndResponse struct {
	Data *BillingSubscriptionView `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateCustomerSubscriptionTrialEndResponse) GetData() *BillingSubscriptionView {
	if u == nil {
		return nil
	}
	return u.Data
}

func (u *UpdateCustomerSubscriptionTrialEndResponse) GetParams() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.Params
}

func (u *UpdateCustomerSubscriptionTrialEndResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateCustomerSubscriptionTrialEndResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateCustomerSubscriptionTrialEndResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateCustomerSubscriptionTrialEndResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateCustomerSubscriptionTrialEndResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateTrialEndRequestBody struct {
	TrialEnd *time.Time `json:"trial_end,omitempty" url:"-"`
}

func (u *UpdateTrialEndRequestBody) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateTrialEndRequestBody
	var body unmarshaler
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	*u = UpdateTrialEndRequestBody(body)
	return nil
}

func (u *UpdateTrialEndRequestBody) MarshalJSON() ([]byte, error) {
	type embed UpdateTrialEndRequestBody
	var marshaler = struct {
		embed
		TrialEnd *internal.DateTime `json:"trial_end,omitempty"`
	}{
		embed:    embed(*u),
		TrialEnd: internal.NewOptionalDateTime(u.TrialEnd),
	}
	return json.Marshal(marshaler)
}
