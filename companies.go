// This file was auto-generated by Fern from our API Definition.

package schematichq

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/schematichq/schematic-go/core"
)

type CountCompaniesRequest struct {
	// Filter companies by multiple company IDs (starts with comp\_)
	IDs []*string `json:"-" url:"ids,omitempty"`
	// Filter companies by plan ID (starts with plan\_)
	PlanID *string `json:"-" url:"plan_id,omitempty"`
	// Search for companies by name, keys or string traits
	Q *string `json:"-" url:"q,omitempty"`
	// Filter out companies that already have a company override for the specified feature ID
	WithoutFeatureOverrideFor *string `json:"-" url:"without_feature_override_for,omitempty"`
	// Filter out companies that have a plan
	WithoutPlan *bool `json:"-" url:"without_plan,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type CountEntityKeyDefinitionsRequest struct {
	EntityType *CountEntityKeyDefinitionsRequestEntityType `json:"-" url:"entity_type,omitempty"`
	IDs        []*string                                   `json:"-" url:"ids,omitempty"`
	Q          *string                                     `json:"-" url:"q,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type CountEntityTraitDefinitionsRequest struct {
	EntityType *CountEntityTraitDefinitionsRequestEntityType `json:"-" url:"entity_type,omitempty"`
	IDs        []*string                                     `json:"-" url:"ids,omitempty"`
	Q          *string                                       `json:"-" url:"q,omitempty"`
	TraitType  *CountEntityTraitDefinitionsRequestTraitType  `json:"-" url:"trait_type,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type CountUsersRequest struct {
	// Filter users by company ID (starts with comp\_)
	CompanyID *string `json:"-" url:"company_id,omitempty"`
	// Filter users by multiple user IDs (starts with user\_)
	IDs []*string `json:"-" url:"ids,omitempty"`
	// Filter users by plan ID (starts with plan\_)
	PlanID *string `json:"-" url:"plan_id,omitempty"`
	// Search for users by name, keys or string traits
	Q *string `json:"-" url:"q,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type GetActiveCompanySubscriptionRequest struct {
	CompanyID string `json:"-" url:"company_id"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type GetActiveDealsRequest struct {
	CompanyID string `json:"-" url:"company_id"`
	DealStage string `json:"-" url:"deal_stage"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type GetEntityTraitValuesRequest struct {
	DefinitionID string  `json:"-" url:"definition_id"`
	Q            *string `json:"-" url:"q,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type GetOrCreateCompanyMembershipRequestBody struct {
	CompanyID string `json:"company_id" url:"-"`
	UserID    string `json:"user_id" url:"-"`
}

type CreateEntityTraitDefinitionRequestBody struct {
	DisplayName *string                                          `json:"display_name,omitempty" url:"-"`
	EntityType  CreateEntityTraitDefinitionRequestBodyEntityType `json:"entity_type" url:"-"`
	Hierarchy   []string                                         `json:"hierarchy,omitempty" url:"-"`
	TraitType   CreateEntityTraitDefinitionRequestBodyTraitType  `json:"trait_type" url:"-"`
}

type ListCompaniesRequest struct {
	// Filter companies by multiple company IDs (starts with comp\_)
	IDs []*string `json:"-" url:"ids,omitempty"`
	// Filter companies by plan ID (starts with plan\_)
	PlanID *string `json:"-" url:"plan_id,omitempty"`
	// Search for companies by name, keys or string traits
	Q *string `json:"-" url:"q,omitempty"`
	// Filter out companies that already have a company override for the specified feature ID
	WithoutFeatureOverrideFor *string `json:"-" url:"without_feature_override_for,omitempty"`
	// Filter out companies that have a plan
	WithoutPlan *bool `json:"-" url:"without_plan,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type ListCompanyMembershipsRequest struct {
	CompanyID *string `json:"-" url:"company_id,omitempty"`
	UserID    *string `json:"-" url:"user_id,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type ListEntityKeyDefinitionsRequest struct {
	EntityType *ListEntityKeyDefinitionsRequestEntityType `json:"-" url:"entity_type,omitempty"`
	IDs        []*string                                  `json:"-" url:"ids,omitempty"`
	Q          *string                                    `json:"-" url:"q,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type ListEntityTraitDefinitionsRequest struct {
	EntityType *ListEntityTraitDefinitionsRequestEntityType `json:"-" url:"entity_type,omitempty"`
	IDs        []*string                                    `json:"-" url:"ids,omitempty"`
	Q          *string                                      `json:"-" url:"q,omitempty"`
	TraitType  *ListEntityTraitDefinitionsRequestTraitType  `json:"-" url:"trait_type,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type ListUsersRequest struct {
	// Filter users by company ID (starts with comp\_)
	CompanyID *string `json:"-" url:"company_id,omitempty"`
	// Filter users by multiple user IDs (starts with user\_)
	IDs []*string `json:"-" url:"ids,omitempty"`
	// Filter users by plan ID (starts with plan\_)
	PlanID *string `json:"-" url:"plan_id,omitempty"`
	// Search for users by name, keys or string traits
	Q *string `json:"-" url:"q,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type LookupCompanyRequest struct {
	// Key/value pairs
	Keys map[string]interface{} `json:"-" url:"keys,omitempty"`
}

type LookupUserRequest struct {
	// Key/value pairs
	Keys map[string]interface{} `json:"-" url:"keys,omitempty"`
}

type CountCompaniesResponse struct {
	Data *CountResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *CountCompaniesParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CountCompaniesResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountCompaniesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CountCompaniesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountCompaniesResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountCompaniesResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CountEntityKeyDefinitionsRequestEntityType string

const (
	CountEntityKeyDefinitionsRequestEntityTypeCompany CountEntityKeyDefinitionsRequestEntityType = "company"
	CountEntityKeyDefinitionsRequestEntityTypeUser    CountEntityKeyDefinitionsRequestEntityType = "user"
)

func NewCountEntityKeyDefinitionsRequestEntityTypeFromString(s string) (CountEntityKeyDefinitionsRequestEntityType, error) {
	switch s {
	case "company":
		return CountEntityKeyDefinitionsRequestEntityTypeCompany, nil
	case "user":
		return CountEntityKeyDefinitionsRequestEntityTypeUser, nil
	}
	var t CountEntityKeyDefinitionsRequestEntityType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CountEntityKeyDefinitionsRequestEntityType) Ptr() *CountEntityKeyDefinitionsRequestEntityType {
	return &c
}

type CountEntityKeyDefinitionsResponse struct {
	Data *CountResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *CountEntityKeyDefinitionsParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CountEntityKeyDefinitionsResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountEntityKeyDefinitionsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CountEntityKeyDefinitionsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountEntityKeyDefinitionsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountEntityKeyDefinitionsResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CountEntityTraitDefinitionsRequestEntityType string

const (
	CountEntityTraitDefinitionsRequestEntityTypeCompany CountEntityTraitDefinitionsRequestEntityType = "company"
	CountEntityTraitDefinitionsRequestEntityTypeUser    CountEntityTraitDefinitionsRequestEntityType = "user"
)

func NewCountEntityTraitDefinitionsRequestEntityTypeFromString(s string) (CountEntityTraitDefinitionsRequestEntityType, error) {
	switch s {
	case "company":
		return CountEntityTraitDefinitionsRequestEntityTypeCompany, nil
	case "user":
		return CountEntityTraitDefinitionsRequestEntityTypeUser, nil
	}
	var t CountEntityTraitDefinitionsRequestEntityType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CountEntityTraitDefinitionsRequestEntityType) Ptr() *CountEntityTraitDefinitionsRequestEntityType {
	return &c
}

type CountEntityTraitDefinitionsRequestTraitType string

const (
	CountEntityTraitDefinitionsRequestTraitTypeBoolean  CountEntityTraitDefinitionsRequestTraitType = "boolean"
	CountEntityTraitDefinitionsRequestTraitTypeCurrency CountEntityTraitDefinitionsRequestTraitType = "currency"
	CountEntityTraitDefinitionsRequestTraitTypeDate     CountEntityTraitDefinitionsRequestTraitType = "date"
	CountEntityTraitDefinitionsRequestTraitTypeNumber   CountEntityTraitDefinitionsRequestTraitType = "number"
	CountEntityTraitDefinitionsRequestTraitTypeString   CountEntityTraitDefinitionsRequestTraitType = "string"
	CountEntityTraitDefinitionsRequestTraitTypeURL      CountEntityTraitDefinitionsRequestTraitType = "url"
)

func NewCountEntityTraitDefinitionsRequestTraitTypeFromString(s string) (CountEntityTraitDefinitionsRequestTraitType, error) {
	switch s {
	case "boolean":
		return CountEntityTraitDefinitionsRequestTraitTypeBoolean, nil
	case "currency":
		return CountEntityTraitDefinitionsRequestTraitTypeCurrency, nil
	case "date":
		return CountEntityTraitDefinitionsRequestTraitTypeDate, nil
	case "number":
		return CountEntityTraitDefinitionsRequestTraitTypeNumber, nil
	case "string":
		return CountEntityTraitDefinitionsRequestTraitTypeString, nil
	case "url":
		return CountEntityTraitDefinitionsRequestTraitTypeURL, nil
	}
	var t CountEntityTraitDefinitionsRequestTraitType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CountEntityTraitDefinitionsRequestTraitType) Ptr() *CountEntityTraitDefinitionsRequestTraitType {
	return &c
}

type CountEntityTraitDefinitionsResponse struct {
	Data *CountResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *CountEntityTraitDefinitionsParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CountEntityTraitDefinitionsResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountEntityTraitDefinitionsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CountEntityTraitDefinitionsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountEntityTraitDefinitionsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountEntityTraitDefinitionsResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CountUsersResponse struct {
	Data *CountResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *CountUsersParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CountUsersResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountUsersResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CountUsersResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountUsersResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountUsersResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateCompanyResponse struct {
	Data *CompanyDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateCompanyResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateCompanyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateCompanyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateCompanyResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateCompanyResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateEntityTraitDefinitionRequestBodyEntityType string

const (
	CreateEntityTraitDefinitionRequestBodyEntityTypeCompany CreateEntityTraitDefinitionRequestBodyEntityType = "company"
	CreateEntityTraitDefinitionRequestBodyEntityTypeUser    CreateEntityTraitDefinitionRequestBodyEntityType = "user"
)

func NewCreateEntityTraitDefinitionRequestBodyEntityTypeFromString(s string) (CreateEntityTraitDefinitionRequestBodyEntityType, error) {
	switch s {
	case "company":
		return CreateEntityTraitDefinitionRequestBodyEntityTypeCompany, nil
	case "user":
		return CreateEntityTraitDefinitionRequestBodyEntityTypeUser, nil
	}
	var t CreateEntityTraitDefinitionRequestBodyEntityType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CreateEntityTraitDefinitionRequestBodyEntityType) Ptr() *CreateEntityTraitDefinitionRequestBodyEntityType {
	return &c
}

type CreateEntityTraitDefinitionRequestBodyTraitType string

const (
	CreateEntityTraitDefinitionRequestBodyTraitTypeBoolean  CreateEntityTraitDefinitionRequestBodyTraitType = "boolean"
	CreateEntityTraitDefinitionRequestBodyTraitTypeCurrency CreateEntityTraitDefinitionRequestBodyTraitType = "currency"
	CreateEntityTraitDefinitionRequestBodyTraitTypeDate     CreateEntityTraitDefinitionRequestBodyTraitType = "date"
	CreateEntityTraitDefinitionRequestBodyTraitTypeNumber   CreateEntityTraitDefinitionRequestBodyTraitType = "number"
	CreateEntityTraitDefinitionRequestBodyTraitTypeString   CreateEntityTraitDefinitionRequestBodyTraitType = "string"
	CreateEntityTraitDefinitionRequestBodyTraitTypeURL      CreateEntityTraitDefinitionRequestBodyTraitType = "url"
)

func NewCreateEntityTraitDefinitionRequestBodyTraitTypeFromString(s string) (CreateEntityTraitDefinitionRequestBodyTraitType, error) {
	switch s {
	case "boolean":
		return CreateEntityTraitDefinitionRequestBodyTraitTypeBoolean, nil
	case "currency":
		return CreateEntityTraitDefinitionRequestBodyTraitTypeCurrency, nil
	case "date":
		return CreateEntityTraitDefinitionRequestBodyTraitTypeDate, nil
	case "number":
		return CreateEntityTraitDefinitionRequestBodyTraitTypeNumber, nil
	case "string":
		return CreateEntityTraitDefinitionRequestBodyTraitTypeString, nil
	case "url":
		return CreateEntityTraitDefinitionRequestBodyTraitTypeURL, nil
	}
	var t CreateEntityTraitDefinitionRequestBodyTraitType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CreateEntityTraitDefinitionRequestBodyTraitType) Ptr() *CreateEntityTraitDefinitionRequestBodyTraitType {
	return &c
}

type CreateUserResponse struct {
	Data *UserDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateUserResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateUserResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateUserResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateUserResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateUserResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DeleteCompanyByKeysResponse struct {
	Data *CompanyResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DeleteCompanyByKeysResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteCompanyByKeysResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteCompanyByKeysResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteCompanyByKeysResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteCompanyByKeysResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DeleteCompanyMembershipResponse struct {
	Data *DeleteResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DeleteCompanyMembershipResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteCompanyMembershipResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteCompanyMembershipResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteCompanyMembershipResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteCompanyMembershipResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DeleteCompanyResponse struct {
	Data *DeleteResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DeleteCompanyResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteCompanyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteCompanyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteCompanyResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteCompanyResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DeleteUserByKeysResponse struct {
	Data *UserResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DeleteUserByKeysResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteUserByKeysResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteUserByKeysResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteUserByKeysResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteUserByKeysResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DeleteUserResponse struct {
	Data *DeleteResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DeleteUserResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteUserResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteUserResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteUserResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteUserResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type GetActiveCompanySubscriptionResponse struct {
	// The returned resources
	Data []*CompanySubscriptionResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *GetActiveCompanySubscriptionParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetActiveCompanySubscriptionResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetActiveCompanySubscriptionResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetActiveCompanySubscriptionResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetActiveCompanySubscriptionResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetActiveCompanySubscriptionResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetActiveDealsResponse struct {
	// The returned resources
	Data []*CompanyCrmDealsResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *GetActiveDealsParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetActiveDealsResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetActiveDealsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetActiveDealsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetActiveDealsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetActiveDealsResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetCompanyResponse struct {
	Data *CompanyDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetCompanyResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetCompanyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetCompanyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetCompanyResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetCompanyResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetEntityTraitDefinitionResponse struct {
	Data *EntityTraitDefinitionResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetEntityTraitDefinitionResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetEntityTraitDefinitionResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetEntityTraitDefinitionResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetEntityTraitDefinitionResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetEntityTraitDefinitionResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetEntityTraitValuesResponse struct {
	// The returned resources
	Data []*EntityTraitValue `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *GetEntityTraitValuesParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetEntityTraitValuesResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetEntityTraitValuesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetEntityTraitValuesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetEntityTraitValuesResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetEntityTraitValuesResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetOrCreateCompanyMembershipResponse struct {
	Data *CompanyMembershipDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetOrCreateCompanyMembershipResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetOrCreateCompanyMembershipResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetOrCreateCompanyMembershipResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetOrCreateCompanyMembershipResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetOrCreateCompanyMembershipResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetOrCreateEntityTraitDefinitionResponse struct {
	Data *EntityTraitDefinitionResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetOrCreateEntityTraitDefinitionResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetOrCreateEntityTraitDefinitionResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetOrCreateEntityTraitDefinitionResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetOrCreateEntityTraitDefinitionResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetOrCreateEntityTraitDefinitionResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetUserResponse struct {
	Data *UserDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetUserResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetUserResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetUserResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetUserResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetUserResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ListCompaniesResponse struct {
	// The returned resources
	Data []*CompanyDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListCompaniesParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListCompaniesResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListCompaniesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListCompaniesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListCompaniesResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListCompaniesResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListCompanyMembershipsResponse struct {
	// The returned resources
	Data []*CompanyMembershipDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListCompanyMembershipsParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListCompanyMembershipsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListCompanyMembershipsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListCompanyMembershipsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListCompanyMembershipsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListCompanyMembershipsResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListEntityKeyDefinitionsRequestEntityType string

const (
	ListEntityKeyDefinitionsRequestEntityTypeCompany ListEntityKeyDefinitionsRequestEntityType = "company"
	ListEntityKeyDefinitionsRequestEntityTypeUser    ListEntityKeyDefinitionsRequestEntityType = "user"
)

func NewListEntityKeyDefinitionsRequestEntityTypeFromString(s string) (ListEntityKeyDefinitionsRequestEntityType, error) {
	switch s {
	case "company":
		return ListEntityKeyDefinitionsRequestEntityTypeCompany, nil
	case "user":
		return ListEntityKeyDefinitionsRequestEntityTypeUser, nil
	}
	var t ListEntityKeyDefinitionsRequestEntityType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l ListEntityKeyDefinitionsRequestEntityType) Ptr() *ListEntityKeyDefinitionsRequestEntityType {
	return &l
}

type ListEntityKeyDefinitionsResponse struct {
	// The returned resources
	Data []*EntityKeyDefinitionResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListEntityKeyDefinitionsParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListEntityKeyDefinitionsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListEntityKeyDefinitionsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListEntityKeyDefinitionsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListEntityKeyDefinitionsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListEntityKeyDefinitionsResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListEntityTraitDefinitionsRequestEntityType string

const (
	ListEntityTraitDefinitionsRequestEntityTypeCompany ListEntityTraitDefinitionsRequestEntityType = "company"
	ListEntityTraitDefinitionsRequestEntityTypeUser    ListEntityTraitDefinitionsRequestEntityType = "user"
)

func NewListEntityTraitDefinitionsRequestEntityTypeFromString(s string) (ListEntityTraitDefinitionsRequestEntityType, error) {
	switch s {
	case "company":
		return ListEntityTraitDefinitionsRequestEntityTypeCompany, nil
	case "user":
		return ListEntityTraitDefinitionsRequestEntityTypeUser, nil
	}
	var t ListEntityTraitDefinitionsRequestEntityType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l ListEntityTraitDefinitionsRequestEntityType) Ptr() *ListEntityTraitDefinitionsRequestEntityType {
	return &l
}

type ListEntityTraitDefinitionsRequestTraitType string

const (
	ListEntityTraitDefinitionsRequestTraitTypeBoolean  ListEntityTraitDefinitionsRequestTraitType = "boolean"
	ListEntityTraitDefinitionsRequestTraitTypeCurrency ListEntityTraitDefinitionsRequestTraitType = "currency"
	ListEntityTraitDefinitionsRequestTraitTypeDate     ListEntityTraitDefinitionsRequestTraitType = "date"
	ListEntityTraitDefinitionsRequestTraitTypeNumber   ListEntityTraitDefinitionsRequestTraitType = "number"
	ListEntityTraitDefinitionsRequestTraitTypeString   ListEntityTraitDefinitionsRequestTraitType = "string"
	ListEntityTraitDefinitionsRequestTraitTypeURL      ListEntityTraitDefinitionsRequestTraitType = "url"
)

func NewListEntityTraitDefinitionsRequestTraitTypeFromString(s string) (ListEntityTraitDefinitionsRequestTraitType, error) {
	switch s {
	case "boolean":
		return ListEntityTraitDefinitionsRequestTraitTypeBoolean, nil
	case "currency":
		return ListEntityTraitDefinitionsRequestTraitTypeCurrency, nil
	case "date":
		return ListEntityTraitDefinitionsRequestTraitTypeDate, nil
	case "number":
		return ListEntityTraitDefinitionsRequestTraitTypeNumber, nil
	case "string":
		return ListEntityTraitDefinitionsRequestTraitTypeString, nil
	case "url":
		return ListEntityTraitDefinitionsRequestTraitTypeURL, nil
	}
	var t ListEntityTraitDefinitionsRequestTraitType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l ListEntityTraitDefinitionsRequestTraitType) Ptr() *ListEntityTraitDefinitionsRequestTraitType {
	return &l
}

type ListEntityTraitDefinitionsResponse struct {
	// The returned resources
	Data []*EntityTraitDefinitionResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListEntityTraitDefinitionsParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListEntityTraitDefinitionsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListEntityTraitDefinitionsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListEntityTraitDefinitionsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListEntityTraitDefinitionsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListEntityTraitDefinitionsResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListUsersResponse struct {
	// The returned resources
	Data []*UserDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListUsersParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListUsersResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListUsersResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListUsersResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListUsersResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListUsersResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type LookupCompanyResponse struct {
	Data *CompanyDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *LookupCompanyParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *LookupCompanyResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *LookupCompanyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler LookupCompanyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LookupCompanyResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *LookupCompanyResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type LookupUserResponse struct {
	Data *UserDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *LookupUserParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *LookupUserResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *LookupUserResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler LookupUserResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LookupUserResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *LookupUserResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type UpdateEntityTraitDefinitionRequestBodyTraitType string

const (
	UpdateEntityTraitDefinitionRequestBodyTraitTypeBoolean  UpdateEntityTraitDefinitionRequestBodyTraitType = "boolean"
	UpdateEntityTraitDefinitionRequestBodyTraitTypeCurrency UpdateEntityTraitDefinitionRequestBodyTraitType = "currency"
	UpdateEntityTraitDefinitionRequestBodyTraitTypeDate     UpdateEntityTraitDefinitionRequestBodyTraitType = "date"
	UpdateEntityTraitDefinitionRequestBodyTraitTypeNumber   UpdateEntityTraitDefinitionRequestBodyTraitType = "number"
	UpdateEntityTraitDefinitionRequestBodyTraitTypeString   UpdateEntityTraitDefinitionRequestBodyTraitType = "string"
	UpdateEntityTraitDefinitionRequestBodyTraitTypeURL      UpdateEntityTraitDefinitionRequestBodyTraitType = "url"
)

func NewUpdateEntityTraitDefinitionRequestBodyTraitTypeFromString(s string) (UpdateEntityTraitDefinitionRequestBodyTraitType, error) {
	switch s {
	case "boolean":
		return UpdateEntityTraitDefinitionRequestBodyTraitTypeBoolean, nil
	case "currency":
		return UpdateEntityTraitDefinitionRequestBodyTraitTypeCurrency, nil
	case "date":
		return UpdateEntityTraitDefinitionRequestBodyTraitTypeDate, nil
	case "number":
		return UpdateEntityTraitDefinitionRequestBodyTraitTypeNumber, nil
	case "string":
		return UpdateEntityTraitDefinitionRequestBodyTraitTypeString, nil
	case "url":
		return UpdateEntityTraitDefinitionRequestBodyTraitTypeURL, nil
	}
	var t UpdateEntityTraitDefinitionRequestBodyTraitType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UpdateEntityTraitDefinitionRequestBodyTraitType) Ptr() *UpdateEntityTraitDefinitionRequestBodyTraitType {
	return &u
}

type UpdateEntityTraitDefinitionResponse struct {
	Data *EntityTraitDefinitionResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpdateEntityTraitDefinitionResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateEntityTraitDefinitionResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateEntityTraitDefinitionResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateEntityTraitDefinitionResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateEntityTraitDefinitionResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpsertCompanyResponse struct {
	Data *CompanyDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpsertCompanyResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertCompanyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpsertCompanyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpsertCompanyResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertCompanyResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpsertCompanyTraitResponse struct {
	Data *CompanyDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpsertCompanyTraitResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertCompanyTraitResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpsertCompanyTraitResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpsertCompanyTraitResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertCompanyTraitResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpsertUserResponse struct {
	Data *UserDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpsertUserResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertUserResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpsertUserResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpsertUserResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertUserResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpsertUserTraitResponse struct {
	Data *UserDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpsertUserTraitResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertUserTraitResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpsertUserTraitResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpsertUserTraitResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertUserTraitResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateEntityTraitDefinitionRequestBody struct {
	DisplayName *string                                         `json:"display_name,omitempty" url:"-"`
	TraitType   UpdateEntityTraitDefinitionRequestBodyTraitType `json:"trait_type" url:"-"`
}
