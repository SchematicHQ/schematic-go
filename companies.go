// This file was auto-generated by Fern from our API Definition.

package schematichq

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/schematichq/schematic-go/internal"
	time "time"
)

type CountCompaniesRequest struct {
	// Filter companies by multiple company IDs (starts with comp_)
	IDs []*string `json:"-" url:"ids,omitempty"`
	// Filter companies by plan ID (starts with plan_)
	PlanID *string `json:"-" url:"plan_id,omitempty"`
	// Search for companies by name, keys or string traits
	Q *string `json:"-" url:"q,omitempty"`
	// Filter out companies that already have a company override for the specified feature ID
	WithoutFeatureOverrideFor *string `json:"-" url:"without_feature_override_for,omitempty"`
	// Filter out companies that have a plan
	WithoutPlan *bool `json:"-" url:"without_plan,omitempty"`
	// Filter companies that have a subscription
	WithSubscription *bool `json:"-" url:"with_subscription,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type CountCompaniesForAdvancedFilterRequest struct {
	// Filter companies by multiple company IDs (starts with comp_)
	IDs []*string `json:"-" url:"ids,omitempty"`
	// Filter companies by one or more plan IDs (each ID starts with plan_)
	PlanIDs []*string `json:"-" url:"plan_ids,omitempty"`
	// Filter companies by one or more feature IDs (each ID starts with feat_)
	FeatureIDs []*string `json:"-" url:"feature_ids,omitempty"`
	// Filter companies by one or more credit type IDs (each ID starts with bcrd_)
	CreditTypeIDs []*string `json:"-" url:"credit_type_ids,omitempty"`
	// Filter companies by one or more subscription statuses (active, canceled, expired, incomplete, incomplete_expired, past_due, paused, trialing, unpaid)
	SubscriptionStatuses []*string `json:"-" url:"subscription_statuses,omitempty"`
	// Filter companies by one or more subscription types (paid, free, trial)
	SubscriptionTypes []*string `json:"-" url:"subscription_types,omitempty"`
	// Filter companies that have monetized subscriptions
	MonetizedSubscriptions *bool `json:"-" url:"monetized_subscriptions,omitempty"`
	// Search for companies by name, keys or string traits
	Q *string `json:"-" url:"q,omitempty"`
	// Filter out companies that have a plan
	WithoutPlan *bool `json:"-" url:"without_plan,omitempty"`
	// Filter out companies that have a subscription
	WithoutSubscription *bool `json:"-" url:"without_subscription,omitempty"`
	// Column to sort by (e.g. name, created_at, last_seen_at)
	SortOrderColumn *string `json:"-" url:"sort_order_column,omitempty"`
	// Direction to sort by (asc or desc)
	SortOrderDirection *CountCompaniesForAdvancedFilterRequestSortOrderDirection `json:"-" url:"sort_order_direction,omitempty"`
	// Select the display columns to return (e.g. plan, subscription, users, last_seen_at)
	DisplayProperties []*string `json:"-" url:"display_properties,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type CountEntityKeyDefinitionsRequest struct {
	EntityType *CountEntityKeyDefinitionsRequestEntityType `json:"-" url:"entity_type,omitempty"`
	IDs        []*string                                   `json:"-" url:"ids,omitempty"`
	Q          *string                                     `json:"-" url:"q,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type CountEntityTraitDefinitionsRequest struct {
	EntityType *CountEntityTraitDefinitionsRequestEntityType `json:"-" url:"entity_type,omitempty"`
	IDs        []*string                                     `json:"-" url:"ids,omitempty"`
	Q          *string                                       `json:"-" url:"q,omitempty"`
	TraitType  *CountEntityTraitDefinitionsRequestTraitType  `json:"-" url:"trait_type,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type CountPlanTraitsRequest struct {
	IDs      []*string `json:"-" url:"ids,omitempty"`
	PlanID   *string   `json:"-" url:"plan_id,omitempty"`
	TraitID  *string   `json:"-" url:"trait_id,omitempty"`
	TraitIDs []*string `json:"-" url:"trait_ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type CountUsersRequest struct {
	// Filter users by company ID (starts with comp_)
	CompanyID *string `json:"-" url:"company_id,omitempty"`
	// Filter users by multiple user IDs (starts with user_)
	IDs []*string `json:"-" url:"ids,omitempty"`
	// Filter users by plan ID (starts with plan_)
	PlanID *string `json:"-" url:"plan_id,omitempty"`
	// Search for users by name, keys or string traits
	Q *string `json:"-" url:"q,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type CreatePlanTraitRequestBody struct {
	PlanID     string `json:"plan_id" url:"-"`
	TraitID    string `json:"trait_id" url:"-"`
	TraitValue string `json:"trait_value" url:"-"`
}

type GetActiveCompanySubscriptionRequest struct {
	CompanyID  *string   `json:"-" url:"company_id,omitempty"`
	CompanyIDs []*string `json:"-" url:"company_ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type GetActiveDealsRequest struct {
	CompanyID string `json:"-" url:"company_id"`
	DealStage string `json:"-" url:"deal_stage"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type GetEntityTraitValuesRequest struct {
	DefinitionID string  `json:"-" url:"definition_id"`
	Q            *string `json:"-" url:"q,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type GetOrCreateCompanyMembershipRequestBody struct {
	CompanyID string `json:"company_id" url:"-"`
	UserID    string `json:"user_id" url:"-"`
}

type CreateEntityTraitDefinitionRequestBody struct {
	DisplayName *string                                          `json:"display_name,omitempty" url:"-"`
	EntityType  CreateEntityTraitDefinitionRequestBodyEntityType `json:"entity_type" url:"-"`
	Hierarchy   []string                                         `json:"hierarchy,omitempty" url:"-"`
	TraitType   CreateEntityTraitDefinitionRequestBodyTraitType  `json:"trait_type" url:"-"`
}

type ListCompaniesRequest struct {
	// Filter companies by multiple company IDs (starts with comp_)
	IDs []*string `json:"-" url:"ids,omitempty"`
	// Filter companies by plan ID (starts with plan_)
	PlanID *string `json:"-" url:"plan_id,omitempty"`
	// Search for companies by name, keys or string traits
	Q *string `json:"-" url:"q,omitempty"`
	// Filter out companies that already have a company override for the specified feature ID
	WithoutFeatureOverrideFor *string `json:"-" url:"without_feature_override_for,omitempty"`
	// Filter out companies that have a plan
	WithoutPlan *bool `json:"-" url:"without_plan,omitempty"`
	// Filter companies that have a subscription
	WithSubscription *bool `json:"-" url:"with_subscription,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type ListCompaniesForAdvancedFilterRequest struct {
	// Filter companies by multiple company IDs (starts with comp_)
	IDs []*string `json:"-" url:"ids,omitempty"`
	// Filter companies by one or more plan IDs (each ID starts with plan_)
	PlanIDs []*string `json:"-" url:"plan_ids,omitempty"`
	// Filter companies by one or more feature IDs (each ID starts with feat_)
	FeatureIDs []*string `json:"-" url:"feature_ids,omitempty"`
	// Filter companies by one or more credit type IDs (each ID starts with bcrd_)
	CreditTypeIDs []*string `json:"-" url:"credit_type_ids,omitempty"`
	// Filter companies by one or more subscription statuses (active, canceled, expired, incomplete, incomplete_expired, past_due, paused, trialing, unpaid)
	SubscriptionStatuses []*string `json:"-" url:"subscription_statuses,omitempty"`
	// Filter companies by one or more subscription types (paid, free, trial)
	SubscriptionTypes []*string `json:"-" url:"subscription_types,omitempty"`
	// Filter companies that have monetized subscriptions
	MonetizedSubscriptions *bool `json:"-" url:"monetized_subscriptions,omitempty"`
	// Search for companies by name, keys or string traits
	Q *string `json:"-" url:"q,omitempty"`
	// Filter out companies that have a plan
	WithoutPlan *bool `json:"-" url:"without_plan,omitempty"`
	// Filter out companies that have a subscription
	WithoutSubscription *bool `json:"-" url:"without_subscription,omitempty"`
	// Column to sort by (e.g. name, created_at, last_seen_at)
	SortOrderColumn *string `json:"-" url:"sort_order_column,omitempty"`
	// Direction to sort by (asc or desc)
	SortOrderDirection *ListCompaniesForAdvancedFilterRequestSortOrderDirection `json:"-" url:"sort_order_direction,omitempty"`
	// Select the display columns to return (e.g. plan, subscription, users, last_seen_at)
	DisplayProperties []*string `json:"-" url:"display_properties,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type ListCompanyMembershipsRequest struct {
	CompanyID *string `json:"-" url:"company_id,omitempty"`
	UserID    *string `json:"-" url:"user_id,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type ListEntityKeyDefinitionsRequest struct {
	EntityType *ListEntityKeyDefinitionsRequestEntityType `json:"-" url:"entity_type,omitempty"`
	IDs        []*string                                  `json:"-" url:"ids,omitempty"`
	Q          *string                                    `json:"-" url:"q,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type ListEntityTraitDefinitionsRequest struct {
	EntityType *ListEntityTraitDefinitionsRequestEntityType `json:"-" url:"entity_type,omitempty"`
	IDs        []*string                                    `json:"-" url:"ids,omitempty"`
	Q          *string                                      `json:"-" url:"q,omitempty"`
	TraitType  *ListEntityTraitDefinitionsRequestTraitType  `json:"-" url:"trait_type,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type ListPlanTraitsRequest struct {
	IDs      []*string `json:"-" url:"ids,omitempty"`
	PlanID   *string   `json:"-" url:"plan_id,omitempty"`
	TraitID  *string   `json:"-" url:"trait_id,omitempty"`
	TraitIDs []*string `json:"-" url:"trait_ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type ListUsersRequest struct {
	// Filter users by company ID (starts with comp_)
	CompanyID *string `json:"-" url:"company_id,omitempty"`
	// Filter users by multiple user IDs (starts with user_)
	IDs []*string `json:"-" url:"ids,omitempty"`
	// Filter users by plan ID (starts with plan_)
	PlanID *string `json:"-" url:"plan_id,omitempty"`
	// Search for users by name, keys or string traits
	Q *string `json:"-" url:"q,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type LookupCompanyRequest struct {
	// Key/value pairs
	Keys map[string]string `json:"-" url:"keys,omitempty"`
}

type LookupUserRequest struct {
	// Key/value pairs
	Keys map[string]string `json:"-" url:"keys,omitempty"`
}

type CompanyCrmDealsResponseData struct {
	DealArr        string             `json:"deal_arr" url:"deal_arr"`
	DealExternalID string             `json:"deal_external_id" url:"deal_external_id"`
	DealMrr        string             `json:"deal_mrr" url:"deal_mrr"`
	DealName       *string            `json:"deal_name,omitempty" url:"deal_name,omitempty"`
	LineItems      []*CrmDealLineItem `json:"line_items,omitempty" url:"line_items,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CompanyCrmDealsResponseData) GetDealArr() string {
	if c == nil {
		return ""
	}
	return c.DealArr
}

func (c *CompanyCrmDealsResponseData) GetDealExternalID() string {
	if c == nil {
		return ""
	}
	return c.DealExternalID
}

func (c *CompanyCrmDealsResponseData) GetDealMrr() string {
	if c == nil {
		return ""
	}
	return c.DealMrr
}

func (c *CompanyCrmDealsResponseData) GetDealName() *string {
	if c == nil {
		return nil
	}
	return c.DealName
}

func (c *CompanyCrmDealsResponseData) GetLineItems() []*CrmDealLineItem {
	if c == nil {
		return nil
	}
	return c.LineItems
}

func (c *CompanyCrmDealsResponseData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CompanyCrmDealsResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler CompanyCrmDealsResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CompanyCrmDealsResponseData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CompanyCrmDealsResponseData) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CompanyViewWithFeatureUsageResponseData struct {
	AddOns                []*CompanyPlanWithBillingSubView         `json:"add_ons,omitempty" url:"add_ons,omitempty"`
	BillingCreditBalances map[string]float64                       `json:"billing_credit_balances,omitempty" url:"billing_credit_balances,omitempty"`
	BillingSubscription   *BillingSubscriptionView                 `json:"billing_subscription,omitempty" url:"billing_subscription,omitempty"`
	BillingSubscriptions  []*BillingSubscriptionView               `json:"billing_subscriptions,omitempty" url:"billing_subscriptions,omitempty"`
	CreatedAt             time.Time                                `json:"created_at" url:"created_at"`
	DefaultPaymentMethod  *PaymentMethodResponseData               `json:"default_payment_method,omitempty" url:"default_payment_method,omitempty"`
	EntityTraits          []*EntityTraitDetailResponseData         `json:"entity_traits,omitempty" url:"entity_traits,omitempty"`
	EnvironmentID         string                                   `json:"environment_id" url:"environment_id"`
	FeatureUsage          []*FeatureUsageDataResponseData          `json:"feature_usage,omitempty" url:"feature_usage,omitempty"`
	ID                    string                                   `json:"id" url:"id"`
	Keys                  []*EntityKeyDetailResponseData           `json:"keys,omitempty" url:"keys,omitempty"`
	LastSeenAt            *time.Time                               `json:"last_seen_at,omitempty" url:"last_seen_at,omitempty"`
	LogoURL               *string                                  `json:"logo_url,omitempty" url:"logo_url,omitempty"`
	Metrics               []*CompanyEventPeriodMetricsResponseData `json:"metrics,omitempty" url:"metrics,omitempty"`
	Name                  string                                   `json:"name" url:"name"`
	PaymentMethods        []*PaymentMethodResponseData             `json:"payment_methods,omitempty" url:"payment_methods,omitempty"`
	Plan                  *CompanyPlanWithBillingSubView           `json:"plan,omitempty" url:"plan,omitempty"`
	Plans                 []*GenericPreviewObject                  `json:"plans,omitempty" url:"plans,omitempty"`
	Rules                 []*Rule                                  `json:"rules,omitempty" url:"rules,omitempty"`
	// A map of trait names to trait values
	Traits    map[string]interface{} `json:"traits,omitempty" url:"traits,omitempty"`
	UpdatedAt time.Time              `json:"updated_at" url:"updated_at"`
	UserCount int                    `json:"user_count" url:"user_count"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CompanyViewWithFeatureUsageResponseData) GetAddOns() []*CompanyPlanWithBillingSubView {
	if c == nil {
		return nil
	}
	return c.AddOns
}

func (c *CompanyViewWithFeatureUsageResponseData) GetBillingCreditBalances() map[string]float64 {
	if c == nil {
		return nil
	}
	return c.BillingCreditBalances
}

func (c *CompanyViewWithFeatureUsageResponseData) GetBillingSubscription() *BillingSubscriptionView {
	if c == nil {
		return nil
	}
	return c.BillingSubscription
}

func (c *CompanyViewWithFeatureUsageResponseData) GetBillingSubscriptions() []*BillingSubscriptionView {
	if c == nil {
		return nil
	}
	return c.BillingSubscriptions
}

func (c *CompanyViewWithFeatureUsageResponseData) GetCreatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.CreatedAt
}

func (c *CompanyViewWithFeatureUsageResponseData) GetDefaultPaymentMethod() *PaymentMethodResponseData {
	if c == nil {
		return nil
	}
	return c.DefaultPaymentMethod
}

func (c *CompanyViewWithFeatureUsageResponseData) GetEntityTraits() []*EntityTraitDetailResponseData {
	if c == nil {
		return nil
	}
	return c.EntityTraits
}

func (c *CompanyViewWithFeatureUsageResponseData) GetEnvironmentID() string {
	if c == nil {
		return ""
	}
	return c.EnvironmentID
}

func (c *CompanyViewWithFeatureUsageResponseData) GetFeatureUsage() []*FeatureUsageDataResponseData {
	if c == nil {
		return nil
	}
	return c.FeatureUsage
}

func (c *CompanyViewWithFeatureUsageResponseData) GetID() string {
	if c == nil {
		return ""
	}
	return c.ID
}

func (c *CompanyViewWithFeatureUsageResponseData) GetKeys() []*EntityKeyDetailResponseData {
	if c == nil {
		return nil
	}
	return c.Keys
}

func (c *CompanyViewWithFeatureUsageResponseData) GetLastSeenAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.LastSeenAt
}

func (c *CompanyViewWithFeatureUsageResponseData) GetLogoURL() *string {
	if c == nil {
		return nil
	}
	return c.LogoURL
}

func (c *CompanyViewWithFeatureUsageResponseData) GetMetrics() []*CompanyEventPeriodMetricsResponseData {
	if c == nil {
		return nil
	}
	return c.Metrics
}

func (c *CompanyViewWithFeatureUsageResponseData) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *CompanyViewWithFeatureUsageResponseData) GetPaymentMethods() []*PaymentMethodResponseData {
	if c == nil {
		return nil
	}
	return c.PaymentMethods
}

func (c *CompanyViewWithFeatureUsageResponseData) GetPlan() *CompanyPlanWithBillingSubView {
	if c == nil {
		return nil
	}
	return c.Plan
}

func (c *CompanyViewWithFeatureUsageResponseData) GetPlans() []*GenericPreviewObject {
	if c == nil {
		return nil
	}
	return c.Plans
}

func (c *CompanyViewWithFeatureUsageResponseData) GetRules() []*Rule {
	if c == nil {
		return nil
	}
	return c.Rules
}

func (c *CompanyViewWithFeatureUsageResponseData) GetTraits() map[string]interface{} {
	if c == nil {
		return nil
	}
	return c.Traits
}

func (c *CompanyViewWithFeatureUsageResponseData) GetUpdatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.UpdatedAt
}

func (c *CompanyViewWithFeatureUsageResponseData) GetUserCount() int {
	if c == nil {
		return 0
	}
	return c.UserCount
}

func (c *CompanyViewWithFeatureUsageResponseData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CompanyViewWithFeatureUsageResponseData) UnmarshalJSON(data []byte) error {
	type embed CompanyViewWithFeatureUsageResponseData
	var unmarshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at"`
		LastSeenAt *internal.DateTime `json:"last_seen_at,omitempty"`
		UpdatedAt  *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CompanyViewWithFeatureUsageResponseData(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.LastSeenAt = unmarshaler.LastSeenAt.TimePtr()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CompanyViewWithFeatureUsageResponseData) MarshalJSON() ([]byte, error) {
	type embed CompanyViewWithFeatureUsageResponseData
	var marshaler = struct {
		embed
		CreatedAt  *internal.DateTime `json:"created_at"`
		LastSeenAt *internal.DateTime `json:"last_seen_at,omitempty"`
		UpdatedAt  *internal.DateTime `json:"updated_at"`
	}{
		embed:      embed(*c),
		CreatedAt:  internal.NewDateTime(c.CreatedAt),
		LastSeenAt: internal.NewOptionalDateTime(c.LastSeenAt),
		UpdatedAt:  internal.NewDateTime(c.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *CompanyViewWithFeatureUsageResponseData) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreditUsageResponseData struct {
	CreditConsumptionRate *float64             `json:"credit_consumption_rate,omitempty" url:"credit_consumption_rate,omitempty"`
	CreditGrantCounts     map[string]float64   `json:"credit_grant_counts,omitempty" url:"credit_grant_counts,omitempty"`
	CreditGrantDetails    []*CreditGrantDetail `json:"credit_grant_details,omitempty" url:"credit_grant_details,omitempty"`
	CreditRemaining       *float64             `json:"credit_remaining,omitempty" url:"credit_remaining,omitempty"`
	CreditTotal           *float64             `json:"credit_total,omitempty" url:"credit_total,omitempty"`
	CreditTypeIcon        *string              `json:"credit_type_icon,omitempty" url:"credit_type_icon,omitempty"`
	CreditTypeName        *string              `json:"credit_type_name,omitempty" url:"credit_type_name,omitempty"`
	CreditUsed            *float64             `json:"credit_used,omitempty" url:"credit_used,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreditUsageResponseData) GetCreditConsumptionRate() *float64 {
	if c == nil {
		return nil
	}
	return c.CreditConsumptionRate
}

func (c *CreditUsageResponseData) GetCreditGrantCounts() map[string]float64 {
	if c == nil {
		return nil
	}
	return c.CreditGrantCounts
}

func (c *CreditUsageResponseData) GetCreditGrantDetails() []*CreditGrantDetail {
	if c == nil {
		return nil
	}
	return c.CreditGrantDetails
}

func (c *CreditUsageResponseData) GetCreditRemaining() *float64 {
	if c == nil {
		return nil
	}
	return c.CreditRemaining
}

func (c *CreditUsageResponseData) GetCreditTotal() *float64 {
	if c == nil {
		return nil
	}
	return c.CreditTotal
}

func (c *CreditUsageResponseData) GetCreditTypeIcon() *string {
	if c == nil {
		return nil
	}
	return c.CreditTypeIcon
}

func (c *CreditUsageResponseData) GetCreditTypeName() *string {
	if c == nil {
		return nil
	}
	return c.CreditTypeName
}

func (c *CreditUsageResponseData) GetCreditUsed() *float64 {
	if c == nil {
		return nil
	}
	return c.CreditUsed
}

func (c *CreditUsageResponseData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreditUsageResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler CreditUsageResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreditUsageResponseData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreditUsageResponseData) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CrmDealLineItem struct {
	BillingFrequency   string    `json:"billing_frequency" url:"billing_frequency"`
	CreatedAt          time.Time `json:"created_at" url:"created_at"`
	Currency           string    `json:"currency" url:"currency"`
	Description        string    `json:"description" url:"description"`
	DiscountPercentage *Decimal  `json:"discount_percentage,omitempty" url:"discount_percentage,omitempty"`
	ID                 string    `json:"id" url:"id"`
	Name               string    `json:"name" url:"name"`
	Price              float64   `json:"price" url:"price"`
	Quantity           int       `json:"quantity" url:"quantity"`
	TermMonth          *int      `json:"term_month,omitempty" url:"term_month,omitempty"`
	TotalDiscount      *Decimal  `json:"total_discount,omitempty" url:"total_discount,omitempty"`
	UpdatedAt          time.Time `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CrmDealLineItem) GetBillingFrequency() string {
	if c == nil {
		return ""
	}
	return c.BillingFrequency
}

func (c *CrmDealLineItem) GetCreatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.CreatedAt
}

func (c *CrmDealLineItem) GetCurrency() string {
	if c == nil {
		return ""
	}
	return c.Currency
}

func (c *CrmDealLineItem) GetDescription() string {
	if c == nil {
		return ""
	}
	return c.Description
}

func (c *CrmDealLineItem) GetDiscountPercentage() *Decimal {
	if c == nil {
		return nil
	}
	return c.DiscountPercentage
}

func (c *CrmDealLineItem) GetID() string {
	if c == nil {
		return ""
	}
	return c.ID
}

func (c *CrmDealLineItem) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *CrmDealLineItem) GetPrice() float64 {
	if c == nil {
		return 0
	}
	return c.Price
}

func (c *CrmDealLineItem) GetQuantity() int {
	if c == nil {
		return 0
	}
	return c.Quantity
}

func (c *CrmDealLineItem) GetTermMonth() *int {
	if c == nil {
		return nil
	}
	return c.TermMonth
}

func (c *CrmDealLineItem) GetTotalDiscount() *Decimal {
	if c == nil {
		return nil
	}
	return c.TotalDiscount
}

func (c *CrmDealLineItem) GetUpdatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.UpdatedAt
}

func (c *CrmDealLineItem) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CrmDealLineItem) UnmarshalJSON(data []byte) error {
	type embed CrmDealLineItem
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CrmDealLineItem(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CrmDealLineItem) MarshalJSON() ([]byte, error) {
	type embed CrmDealLineItem
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*c),
		CreatedAt: internal.NewDateTime(c.CreatedAt),
		UpdatedAt: internal.NewDateTime(c.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *CrmDealLineItem) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type Decimal = map[string]interface{}

type EntityTraitValue struct {
	DefinitionID string `json:"definition_id" url:"definition_id"`
	Value        string `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EntityTraitValue) GetDefinitionID() string {
	if e == nil {
		return ""
	}
	return e.DefinitionID
}

func (e *EntityTraitValue) GetValue() string {
	if e == nil {
		return ""
	}
	return e.Value
}

func (e *EntityTraitValue) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityTraitValue) UnmarshalJSON(data []byte) error {
	type unmarshaler EntityTraitValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntityTraitValue(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityTraitValue) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type FeatureUsageDataResponseData struct {
	CreditTypeID           *string                  `json:"credit_type_id,omitempty" url:"credit_type_id,omitempty"`
	CreditUsage            *CreditUsageResponseData `json:"credit_usage,omitempty" url:"credit_usage,omitempty"`
	EntitlementSource      string                   `json:"entitlement_source" url:"entitlement_source"`
	EntitlementValueType   string                   `json:"entitlement_value_type" url:"entitlement_value_type"`
	FeatureID              string                   `json:"feature_id" url:"feature_id"`
	FeatureName            string                   `json:"feature_name" url:"feature_name"`
	FeatureType            string                   `json:"feature_type" url:"feature_type"`
	HardLimit              string                   `json:"hard_limit" url:"hard_limit"`
	HasAccess              bool                     `json:"has_access" url:"has_access"`
	MetricResetAt          *time.Time               `json:"metric_reset_at,omitempty" url:"metric_reset_at,omitempty"`
	MonthlyUsageBasedPrice *BillingPriceView        `json:"monthly_usage_based_price,omitempty" url:"monthly_usage_based_price,omitempty"`
	PriceBehavior          *string                  `json:"price_behavior,omitempty" url:"price_behavior,omitempty"`
	SoftLimit              string                   `json:"soft_limit" url:"soft_limit"`
	Usage                  string                   `json:"usage" url:"usage"`
	ValueNumeric           *int                     `json:"value_numeric,omitempty" url:"value_numeric,omitempty"`
	YearlyUsageBasedPrice  *BillingPriceView        `json:"yearly_usage_based_price,omitempty" url:"yearly_usage_based_price,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FeatureUsageDataResponseData) GetCreditTypeID() *string {
	if f == nil {
		return nil
	}
	return f.CreditTypeID
}

func (f *FeatureUsageDataResponseData) GetCreditUsage() *CreditUsageResponseData {
	if f == nil {
		return nil
	}
	return f.CreditUsage
}

func (f *FeatureUsageDataResponseData) GetEntitlementSource() string {
	if f == nil {
		return ""
	}
	return f.EntitlementSource
}

func (f *FeatureUsageDataResponseData) GetEntitlementValueType() string {
	if f == nil {
		return ""
	}
	return f.EntitlementValueType
}

func (f *FeatureUsageDataResponseData) GetFeatureID() string {
	if f == nil {
		return ""
	}
	return f.FeatureID
}

func (f *FeatureUsageDataResponseData) GetFeatureName() string {
	if f == nil {
		return ""
	}
	return f.FeatureName
}

func (f *FeatureUsageDataResponseData) GetFeatureType() string {
	if f == nil {
		return ""
	}
	return f.FeatureType
}

func (f *FeatureUsageDataResponseData) GetHardLimit() string {
	if f == nil {
		return ""
	}
	return f.HardLimit
}

func (f *FeatureUsageDataResponseData) GetHasAccess() bool {
	if f == nil {
		return false
	}
	return f.HasAccess
}

func (f *FeatureUsageDataResponseData) GetMetricResetAt() *time.Time {
	if f == nil {
		return nil
	}
	return f.MetricResetAt
}

func (f *FeatureUsageDataResponseData) GetMonthlyUsageBasedPrice() *BillingPriceView {
	if f == nil {
		return nil
	}
	return f.MonthlyUsageBasedPrice
}

func (f *FeatureUsageDataResponseData) GetPriceBehavior() *string {
	if f == nil {
		return nil
	}
	return f.PriceBehavior
}

func (f *FeatureUsageDataResponseData) GetSoftLimit() string {
	if f == nil {
		return ""
	}
	return f.SoftLimit
}

func (f *FeatureUsageDataResponseData) GetUsage() string {
	if f == nil {
		return ""
	}
	return f.Usage
}

func (f *FeatureUsageDataResponseData) GetValueNumeric() *int {
	if f == nil {
		return nil
	}
	return f.ValueNumeric
}

func (f *FeatureUsageDataResponseData) GetYearlyUsageBasedPrice() *BillingPriceView {
	if f == nil {
		return nil
	}
	return f.YearlyUsageBasedPrice
}

func (f *FeatureUsageDataResponseData) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FeatureUsageDataResponseData) UnmarshalJSON(data []byte) error {
	type embed FeatureUsageDataResponseData
	var unmarshaler = struct {
		embed
		MetricResetAt *internal.DateTime `json:"metric_reset_at,omitempty"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FeatureUsageDataResponseData(unmarshaler.embed)
	f.MetricResetAt = unmarshaler.MetricResetAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FeatureUsageDataResponseData) MarshalJSON() ([]byte, error) {
	type embed FeatureUsageDataResponseData
	var marshaler = struct {
		embed
		MetricResetAt *internal.DateTime `json:"metric_reset_at,omitempty"`
	}{
		embed:         embed(*f),
		MetricResetAt: internal.NewOptionalDateTime(f.MetricResetAt),
	}
	return json.Marshal(marshaler)
}

func (f *FeatureUsageDataResponseData) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type KeysRequestBody struct {
	Keys map[string]string `json:"keys,omitempty" url:"keys,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (k *KeysRequestBody) GetKeys() map[string]string {
	if k == nil {
		return nil
	}
	return k.Keys
}

func (k *KeysRequestBody) GetExtraProperties() map[string]interface{} {
	return k.extraProperties
}

func (k *KeysRequestBody) UnmarshalJSON(data []byte) error {
	type unmarshaler KeysRequestBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*k = KeysRequestBody(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *k)
	if err != nil {
		return err
	}
	k.extraProperties = extraProperties
	k.rawJSON = json.RawMessage(data)
	return nil
}

func (k *KeysRequestBody) String() string {
	if len(k.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(k.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(k); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", k)
}

type PlanTraitResponseData struct {
	AccountID     string    `json:"account_id" url:"account_id"`
	CreatedAt     time.Time `json:"created_at" url:"created_at"`
	EnvironmentID string    `json:"environment_id" url:"environment_id"`
	ID            string    `json:"id" url:"id"`
	PlanID        string    `json:"plan_id" url:"plan_id"`
	PlanType      string    `json:"plan_type" url:"plan_type"`
	TraitID       string    `json:"trait_id" url:"trait_id"`
	TraitValue    string    `json:"trait_value" url:"trait_value"`
	UpdatedAt     time.Time `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PlanTraitResponseData) GetAccountID() string {
	if p == nil {
		return ""
	}
	return p.AccountID
}

func (p *PlanTraitResponseData) GetCreatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.CreatedAt
}

func (p *PlanTraitResponseData) GetEnvironmentID() string {
	if p == nil {
		return ""
	}
	return p.EnvironmentID
}

func (p *PlanTraitResponseData) GetID() string {
	if p == nil {
		return ""
	}
	return p.ID
}

func (p *PlanTraitResponseData) GetPlanID() string {
	if p == nil {
		return ""
	}
	return p.PlanID
}

func (p *PlanTraitResponseData) GetPlanType() string {
	if p == nil {
		return ""
	}
	return p.PlanType
}

func (p *PlanTraitResponseData) GetTraitID() string {
	if p == nil {
		return ""
	}
	return p.TraitID
}

func (p *PlanTraitResponseData) GetTraitValue() string {
	if p == nil {
		return ""
	}
	return p.TraitValue
}

func (p *PlanTraitResponseData) GetUpdatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.UpdatedAt
}

func (p *PlanTraitResponseData) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PlanTraitResponseData) UnmarshalJSON(data []byte) error {
	type embed PlanTraitResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PlanTraitResponseData(unmarshaler.embed)
	p.CreatedAt = unmarshaler.CreatedAt.Time()
	p.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PlanTraitResponseData) MarshalJSON() ([]byte, error) {
	type embed PlanTraitResponseData
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*p),
		CreatedAt: internal.NewDateTime(p.CreatedAt),
		UpdatedAt: internal.NewDateTime(p.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (p *PlanTraitResponseData) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type UpdatePlanTraitTraitRequestBody struct {
	TraitID    string `json:"trait_id" url:"trait_id"`
	TraitValue string `json:"trait_value" url:"trait_value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdatePlanTraitTraitRequestBody) GetTraitID() string {
	if u == nil {
		return ""
	}
	return u.TraitID
}

func (u *UpdatePlanTraitTraitRequestBody) GetTraitValue() string {
	if u == nil {
		return ""
	}
	return u.TraitValue
}

func (u *UpdatePlanTraitTraitRequestBody) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdatePlanTraitTraitRequestBody) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdatePlanTraitTraitRequestBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdatePlanTraitTraitRequestBody(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdatePlanTraitTraitRequestBody) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpsertCompanyRequestBody struct {
	// If you know the Schematic ID, you can use that here instead of keys
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// See [Key Management](https://docs.schematichq.com/developer_resources/key_management) for more information
	Keys       map[string]string `json:"keys,omitempty" url:"keys,omitempty"`
	LastSeenAt *time.Time        `json:"last_seen_at,omitempty" url:"last_seen_at,omitempty"`
	Name       *string           `json:"name,omitempty" url:"name,omitempty"`
	// A map of trait names to trait values
	Traits     map[string]interface{} `json:"traits,omitempty" url:"traits,omitempty"`
	UpdateOnly *bool                  `json:"update_only,omitempty" url:"update_only,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpsertCompanyRequestBody) GetID() *string {
	if u == nil {
		return nil
	}
	return u.ID
}

func (u *UpsertCompanyRequestBody) GetKeys() map[string]string {
	if u == nil {
		return nil
	}
	return u.Keys
}

func (u *UpsertCompanyRequestBody) GetLastSeenAt() *time.Time {
	if u == nil {
		return nil
	}
	return u.LastSeenAt
}

func (u *UpsertCompanyRequestBody) GetName() *string {
	if u == nil {
		return nil
	}
	return u.Name
}

func (u *UpsertCompanyRequestBody) GetTraits() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.Traits
}

func (u *UpsertCompanyRequestBody) GetUpdateOnly() *bool {
	if u == nil {
		return nil
	}
	return u.UpdateOnly
}

func (u *UpsertCompanyRequestBody) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertCompanyRequestBody) UnmarshalJSON(data []byte) error {
	type embed UpsertCompanyRequestBody
	var unmarshaler = struct {
		embed
		LastSeenAt *internal.DateTime `json:"last_seen_at,omitempty"`
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = UpsertCompanyRequestBody(unmarshaler.embed)
	u.LastSeenAt = unmarshaler.LastSeenAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertCompanyRequestBody) MarshalJSON() ([]byte, error) {
	type embed UpsertCompanyRequestBody
	var marshaler = struct {
		embed
		LastSeenAt *internal.DateTime `json:"last_seen_at,omitempty"`
	}{
		embed:      embed(*u),
		LastSeenAt: internal.NewOptionalDateTime(u.LastSeenAt),
	}
	return json.Marshal(marshaler)
}

func (u *UpsertCompanyRequestBody) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpsertTraitRequestBody struct {
	// Amount to increment the trait by (positive or negative)
	Incr *int `json:"incr,omitempty" url:"incr,omitempty"`
	// Key/value pairs to identify a company or user
	Keys map[string]string `json:"keys,omitempty" url:"keys,omitempty"`
	// Value to set the trait to
	Set *string `json:"set,omitempty" url:"set,omitempty"`
	// Name of the trait to update
	Trait string `json:"trait" url:"trait"`
	// Unless this is set, the company or user will be created if it does not already exist
	UpdateOnly *bool `json:"update_only,omitempty" url:"update_only,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpsertTraitRequestBody) GetIncr() *int {
	if u == nil {
		return nil
	}
	return u.Incr
}

func (u *UpsertTraitRequestBody) GetKeys() map[string]string {
	if u == nil {
		return nil
	}
	return u.Keys
}

func (u *UpsertTraitRequestBody) GetSet() *string {
	if u == nil {
		return nil
	}
	return u.Set
}

func (u *UpsertTraitRequestBody) GetTrait() string {
	if u == nil {
		return ""
	}
	return u.Trait
}

func (u *UpsertTraitRequestBody) GetUpdateOnly() *bool {
	if u == nil {
		return nil
	}
	return u.UpdateOnly
}

func (u *UpsertTraitRequestBody) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertTraitRequestBody) UnmarshalJSON(data []byte) error {
	type unmarshaler UpsertTraitRequestBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpsertTraitRequestBody(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertTraitRequestBody) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpsertUserRequestBody struct {
	// Optionally specify companies using array of key/value pairs
	Companies []map[string]string `json:"companies,omitempty" url:"companies,omitempty"`
	// Add user to this company. Takes priority over companies. For exhaustive list of companies, use companies
	Company map[string]string `json:"company,omitempty" url:"company,omitempty"`
	// Add user to this company. Takes priority over company_ids. For exhaustive list of companies, use company_ids
	CompanyID *string `json:"company_id,omitempty" url:"company_id,omitempty"`
	// Optionally specify companies using Schematic company ID
	CompanyIDs []string `json:"company_ids,omitempty" url:"company_ids,omitempty"`
	// If you know the Schematic ID, you can use that here instead of keys
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// See [Key Management](https://docs.schematichq.com/developer_resources/key_management) for more information
	Keys       map[string]string `json:"keys,omitempty" url:"keys,omitempty"`
	LastSeenAt *time.Time        `json:"last_seen_at,omitempty" url:"last_seen_at,omitempty"`
	Name       *string           `json:"name,omitempty" url:"name,omitempty"`
	// A map of trait names to trait values
	Traits     map[string]interface{} `json:"traits,omitempty" url:"traits,omitempty"`
	UpdateOnly *bool                  `json:"update_only,omitempty" url:"update_only,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpsertUserRequestBody) GetCompanies() []map[string]string {
	if u == nil {
		return nil
	}
	return u.Companies
}

func (u *UpsertUserRequestBody) GetCompany() map[string]string {
	if u == nil {
		return nil
	}
	return u.Company
}

func (u *UpsertUserRequestBody) GetCompanyID() *string {
	if u == nil {
		return nil
	}
	return u.CompanyID
}

func (u *UpsertUserRequestBody) GetCompanyIDs() []string {
	if u == nil {
		return nil
	}
	return u.CompanyIDs
}

func (u *UpsertUserRequestBody) GetID() *string {
	if u == nil {
		return nil
	}
	return u.ID
}

func (u *UpsertUserRequestBody) GetKeys() map[string]string {
	if u == nil {
		return nil
	}
	return u.Keys
}

func (u *UpsertUserRequestBody) GetLastSeenAt() *time.Time {
	if u == nil {
		return nil
	}
	return u.LastSeenAt
}

func (u *UpsertUserRequestBody) GetName() *string {
	if u == nil {
		return nil
	}
	return u.Name
}

func (u *UpsertUserRequestBody) GetTraits() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.Traits
}

func (u *UpsertUserRequestBody) GetUpdateOnly() *bool {
	if u == nil {
		return nil
	}
	return u.UpdateOnly
}

func (u *UpsertUserRequestBody) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertUserRequestBody) UnmarshalJSON(data []byte) error {
	type embed UpsertUserRequestBody
	var unmarshaler = struct {
		embed
		LastSeenAt *internal.DateTime `json:"last_seen_at,omitempty"`
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = UpsertUserRequestBody(unmarshaler.embed)
	u.LastSeenAt = unmarshaler.LastSeenAt.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertUserRequestBody) MarshalJSON() ([]byte, error) {
	type embed UpsertUserRequestBody
	var marshaler = struct {
		embed
		LastSeenAt *internal.DateTime `json:"last_seen_at,omitempty"`
	}{
		embed:      embed(*u),
		LastSeenAt: internal.NewOptionalDateTime(u.LastSeenAt),
	}
	return json.Marshal(marshaler)
}

func (u *UpsertUserRequestBody) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// Input parameters
type CountCompaniesForAdvancedFilterParams struct {
	// Filter companies by one or more credit type IDs (each ID starts with bcrd_)
	CreditTypeIDs []string `json:"credit_type_ids,omitempty" url:"credit_type_ids,omitempty"`
	// Select the display columns to return (e.g. plan, subscription, users, last_seen_at)
	DisplayProperties []string `json:"display_properties,omitempty" url:"display_properties,omitempty"`
	// Filter companies by one or more feature IDs (each ID starts with feat_)
	FeatureIDs []string `json:"feature_ids,omitempty" url:"feature_ids,omitempty"`
	// Filter companies by multiple company IDs (starts with comp_)
	IDs []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Filter companies that have monetized subscriptions
	MonetizedSubscriptions *bool `json:"monetized_subscriptions,omitempty" url:"monetized_subscriptions,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"offset,omitempty" url:"offset,omitempty"`
	// Filter companies by one or more plan IDs (each ID starts with plan_)
	PlanIDs []string `json:"plan_ids,omitempty" url:"plan_ids,omitempty"`
	// Search for companies by name, keys or string traits
	Q *string `json:"q,omitempty" url:"q,omitempty"`
	// Column to sort by (e.g. name, created_at, last_seen_at)
	SortOrderColumn *string `json:"sort_order_column,omitempty" url:"sort_order_column,omitempty"`
	// Direction to sort by (asc or desc)
	SortOrderDirection *CountCompaniesForAdvancedFilterResponseParamsSortOrderDirection `json:"sort_order_direction,omitempty" url:"sort_order_direction,omitempty"`
	// Filter companies by one or more subscription statuses (active, canceled, expired, incomplete, incomplete_expired, past_due, paused, trialing, unpaid)
	SubscriptionStatuses []string `json:"subscription_statuses,omitempty" url:"subscription_statuses,omitempty"`
	// Filter companies by one or more subscription types (paid, free, trial)
	SubscriptionTypes []string `json:"subscription_types,omitempty" url:"subscription_types,omitempty"`
	// Filter out companies that have a plan
	WithoutPlan *bool `json:"without_plan,omitempty" url:"without_plan,omitempty"`
	// Filter out companies that have a subscription
	WithoutSubscription *bool `json:"without_subscription,omitempty" url:"without_subscription,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CountCompaniesForAdvancedFilterParams) GetCreditTypeIDs() []string {
	if c == nil {
		return nil
	}
	return c.CreditTypeIDs
}

func (c *CountCompaniesForAdvancedFilterParams) GetDisplayProperties() []string {
	if c == nil {
		return nil
	}
	return c.DisplayProperties
}

func (c *CountCompaniesForAdvancedFilterParams) GetFeatureIDs() []string {
	if c == nil {
		return nil
	}
	return c.FeatureIDs
}

func (c *CountCompaniesForAdvancedFilterParams) GetIDs() []string {
	if c == nil {
		return nil
	}
	return c.IDs
}

func (c *CountCompaniesForAdvancedFilterParams) GetLimit() *int {
	if c == nil {
		return nil
	}
	return c.Limit
}

func (c *CountCompaniesForAdvancedFilterParams) GetMonetizedSubscriptions() *bool {
	if c == nil {
		return nil
	}
	return c.MonetizedSubscriptions
}

func (c *CountCompaniesForAdvancedFilterParams) GetOffset() *int {
	if c == nil {
		return nil
	}
	return c.Offset
}

func (c *CountCompaniesForAdvancedFilterParams) GetPlanIDs() []string {
	if c == nil {
		return nil
	}
	return c.PlanIDs
}

func (c *CountCompaniesForAdvancedFilterParams) GetQ() *string {
	if c == nil {
		return nil
	}
	return c.Q
}

func (c *CountCompaniesForAdvancedFilterParams) GetSortOrderColumn() *string {
	if c == nil {
		return nil
	}
	return c.SortOrderColumn
}

func (c *CountCompaniesForAdvancedFilterParams) GetSortOrderDirection() *CountCompaniesForAdvancedFilterResponseParamsSortOrderDirection {
	if c == nil {
		return nil
	}
	return c.SortOrderDirection
}

func (c *CountCompaniesForAdvancedFilterParams) GetSubscriptionStatuses() []string {
	if c == nil {
		return nil
	}
	return c.SubscriptionStatuses
}

func (c *CountCompaniesForAdvancedFilterParams) GetSubscriptionTypes() []string {
	if c == nil {
		return nil
	}
	return c.SubscriptionTypes
}

func (c *CountCompaniesForAdvancedFilterParams) GetWithoutPlan() *bool {
	if c == nil {
		return nil
	}
	return c.WithoutPlan
}

func (c *CountCompaniesForAdvancedFilterParams) GetWithoutSubscription() *bool {
	if c == nil {
		return nil
	}
	return c.WithoutSubscription
}

func (c *CountCompaniesForAdvancedFilterParams) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountCompaniesForAdvancedFilterParams) UnmarshalJSON(data []byte) error {
	type unmarshaler CountCompaniesForAdvancedFilterParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountCompaniesForAdvancedFilterParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountCompaniesForAdvancedFilterParams) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Direction to sort by (asc or desc)
type CountCompaniesForAdvancedFilterRequestSortOrderDirection string

const (
	CountCompaniesForAdvancedFilterRequestSortOrderDirectionAsc  CountCompaniesForAdvancedFilterRequestSortOrderDirection = "asc"
	CountCompaniesForAdvancedFilterRequestSortOrderDirectionDesc CountCompaniesForAdvancedFilterRequestSortOrderDirection = "desc"
)

func NewCountCompaniesForAdvancedFilterRequestSortOrderDirectionFromString(s string) (CountCompaniesForAdvancedFilterRequestSortOrderDirection, error) {
	switch s {
	case "asc":
		return CountCompaniesForAdvancedFilterRequestSortOrderDirectionAsc, nil
	case "desc":
		return CountCompaniesForAdvancedFilterRequestSortOrderDirectionDesc, nil
	}
	var t CountCompaniesForAdvancedFilterRequestSortOrderDirection
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CountCompaniesForAdvancedFilterRequestSortOrderDirection) Ptr() *CountCompaniesForAdvancedFilterRequestSortOrderDirection {
	return &c
}

type CountCompaniesForAdvancedFilterResponse struct {
	Data *CountResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *CountCompaniesForAdvancedFilterParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CountCompaniesForAdvancedFilterResponse) GetData() *CountResponse {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *CountCompaniesForAdvancedFilterResponse) GetParams() *CountCompaniesForAdvancedFilterParams {
	if c == nil {
		return nil
	}
	return c.Params
}

func (c *CountCompaniesForAdvancedFilterResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountCompaniesForAdvancedFilterResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CountCompaniesForAdvancedFilterResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountCompaniesForAdvancedFilterResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountCompaniesForAdvancedFilterResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Direction to sort by (asc or desc)
type CountCompaniesForAdvancedFilterResponseParamsSortOrderDirection string

const (
	CountCompaniesForAdvancedFilterResponseParamsSortOrderDirectionAsc  CountCompaniesForAdvancedFilterResponseParamsSortOrderDirection = "asc"
	CountCompaniesForAdvancedFilterResponseParamsSortOrderDirectionDesc CountCompaniesForAdvancedFilterResponseParamsSortOrderDirection = "desc"
)

func NewCountCompaniesForAdvancedFilterResponseParamsSortOrderDirectionFromString(s string) (CountCompaniesForAdvancedFilterResponseParamsSortOrderDirection, error) {
	switch s {
	case "asc":
		return CountCompaniesForAdvancedFilterResponseParamsSortOrderDirectionAsc, nil
	case "desc":
		return CountCompaniesForAdvancedFilterResponseParamsSortOrderDirectionDesc, nil
	}
	var t CountCompaniesForAdvancedFilterResponseParamsSortOrderDirection
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CountCompaniesForAdvancedFilterResponseParamsSortOrderDirection) Ptr() *CountCompaniesForAdvancedFilterResponseParamsSortOrderDirection {
	return &c
}

// Input parameters
type CountCompaniesParams struct {
	// Filter companies by multiple company IDs (starts with comp_)
	IDs []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"offset,omitempty" url:"offset,omitempty"`
	// Filter companies by plan ID (starts with plan_)
	PlanID *string `json:"plan_id,omitempty" url:"plan_id,omitempty"`
	// Search for companies by name, keys or string traits
	Q *string `json:"q,omitempty" url:"q,omitempty"`
	// Filter companies that have a subscription
	WithSubscription *bool `json:"with_subscription,omitempty" url:"with_subscription,omitempty"`
	// Filter out companies that already have a company override for the specified feature ID
	WithoutFeatureOverrideFor *string `json:"without_feature_override_for,omitempty" url:"without_feature_override_for,omitempty"`
	// Filter out companies that have a plan
	WithoutPlan *bool `json:"without_plan,omitempty" url:"without_plan,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CountCompaniesParams) GetIDs() []string {
	if c == nil {
		return nil
	}
	return c.IDs
}

func (c *CountCompaniesParams) GetLimit() *int {
	if c == nil {
		return nil
	}
	return c.Limit
}

func (c *CountCompaniesParams) GetOffset() *int {
	if c == nil {
		return nil
	}
	return c.Offset
}

func (c *CountCompaniesParams) GetPlanID() *string {
	if c == nil {
		return nil
	}
	return c.PlanID
}

func (c *CountCompaniesParams) GetQ() *string {
	if c == nil {
		return nil
	}
	return c.Q
}

func (c *CountCompaniesParams) GetWithSubscription() *bool {
	if c == nil {
		return nil
	}
	return c.WithSubscription
}

func (c *CountCompaniesParams) GetWithoutFeatureOverrideFor() *string {
	if c == nil {
		return nil
	}
	return c.WithoutFeatureOverrideFor
}

func (c *CountCompaniesParams) GetWithoutPlan() *bool {
	if c == nil {
		return nil
	}
	return c.WithoutPlan
}

func (c *CountCompaniesParams) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountCompaniesParams) UnmarshalJSON(data []byte) error {
	type unmarshaler CountCompaniesParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountCompaniesParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountCompaniesParams) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CountCompaniesResponse struct {
	Data *CountResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *CountCompaniesParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CountCompaniesResponse) GetData() *CountResponse {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *CountCompaniesResponse) GetParams() *CountCompaniesParams {
	if c == nil {
		return nil
	}
	return c.Params
}

func (c *CountCompaniesResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountCompaniesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CountCompaniesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountCompaniesResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountCompaniesResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Input parameters
type CountEntityKeyDefinitionsParams struct {
	EntityType *CountEntityKeyDefinitionsResponseParamsEntityType `json:"entity_type,omitempty" url:"entity_type,omitempty"`
	IDs        []string                                           `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Q      *string `json:"q,omitempty" url:"q,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CountEntityKeyDefinitionsParams) GetEntityType() *CountEntityKeyDefinitionsResponseParamsEntityType {
	if c == nil {
		return nil
	}
	return c.EntityType
}

func (c *CountEntityKeyDefinitionsParams) GetIDs() []string {
	if c == nil {
		return nil
	}
	return c.IDs
}

func (c *CountEntityKeyDefinitionsParams) GetLimit() *int {
	if c == nil {
		return nil
	}
	return c.Limit
}

func (c *CountEntityKeyDefinitionsParams) GetOffset() *int {
	if c == nil {
		return nil
	}
	return c.Offset
}

func (c *CountEntityKeyDefinitionsParams) GetQ() *string {
	if c == nil {
		return nil
	}
	return c.Q
}

func (c *CountEntityKeyDefinitionsParams) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountEntityKeyDefinitionsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler CountEntityKeyDefinitionsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountEntityKeyDefinitionsParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountEntityKeyDefinitionsParams) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CountEntityKeyDefinitionsRequestEntityType string

const (
	CountEntityKeyDefinitionsRequestEntityTypeCompany CountEntityKeyDefinitionsRequestEntityType = "company"
	CountEntityKeyDefinitionsRequestEntityTypeUser    CountEntityKeyDefinitionsRequestEntityType = "user"
)

func NewCountEntityKeyDefinitionsRequestEntityTypeFromString(s string) (CountEntityKeyDefinitionsRequestEntityType, error) {
	switch s {
	case "company":
		return CountEntityKeyDefinitionsRequestEntityTypeCompany, nil
	case "user":
		return CountEntityKeyDefinitionsRequestEntityTypeUser, nil
	}
	var t CountEntityKeyDefinitionsRequestEntityType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CountEntityKeyDefinitionsRequestEntityType) Ptr() *CountEntityKeyDefinitionsRequestEntityType {
	return &c
}

type CountEntityKeyDefinitionsResponse struct {
	Data *CountResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *CountEntityKeyDefinitionsParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CountEntityKeyDefinitionsResponse) GetData() *CountResponse {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *CountEntityKeyDefinitionsResponse) GetParams() *CountEntityKeyDefinitionsParams {
	if c == nil {
		return nil
	}
	return c.Params
}

func (c *CountEntityKeyDefinitionsResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountEntityKeyDefinitionsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CountEntityKeyDefinitionsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountEntityKeyDefinitionsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountEntityKeyDefinitionsResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CountEntityKeyDefinitionsResponseParamsEntityType string

const (
	CountEntityKeyDefinitionsResponseParamsEntityTypeCompany CountEntityKeyDefinitionsResponseParamsEntityType = "company"
	CountEntityKeyDefinitionsResponseParamsEntityTypeUser    CountEntityKeyDefinitionsResponseParamsEntityType = "user"
)

func NewCountEntityKeyDefinitionsResponseParamsEntityTypeFromString(s string) (CountEntityKeyDefinitionsResponseParamsEntityType, error) {
	switch s {
	case "company":
		return CountEntityKeyDefinitionsResponseParamsEntityTypeCompany, nil
	case "user":
		return CountEntityKeyDefinitionsResponseParamsEntityTypeUser, nil
	}
	var t CountEntityKeyDefinitionsResponseParamsEntityType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CountEntityKeyDefinitionsResponseParamsEntityType) Ptr() *CountEntityKeyDefinitionsResponseParamsEntityType {
	return &c
}

// Input parameters
type CountEntityTraitDefinitionsParams struct {
	EntityType *CountEntityTraitDefinitionsResponseParamsEntityType `json:"entity_type,omitempty" url:"entity_type,omitempty"`
	IDs        []string                                             `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset    *int                                                `json:"offset,omitempty" url:"offset,omitempty"`
	Q         *string                                             `json:"q,omitempty" url:"q,omitempty"`
	TraitType *CountEntityTraitDefinitionsResponseParamsTraitType `json:"trait_type,omitempty" url:"trait_type,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CountEntityTraitDefinitionsParams) GetEntityType() *CountEntityTraitDefinitionsResponseParamsEntityType {
	if c == nil {
		return nil
	}
	return c.EntityType
}

func (c *CountEntityTraitDefinitionsParams) GetIDs() []string {
	if c == nil {
		return nil
	}
	return c.IDs
}

func (c *CountEntityTraitDefinitionsParams) GetLimit() *int {
	if c == nil {
		return nil
	}
	return c.Limit
}

func (c *CountEntityTraitDefinitionsParams) GetOffset() *int {
	if c == nil {
		return nil
	}
	return c.Offset
}

func (c *CountEntityTraitDefinitionsParams) GetQ() *string {
	if c == nil {
		return nil
	}
	return c.Q
}

func (c *CountEntityTraitDefinitionsParams) GetTraitType() *CountEntityTraitDefinitionsResponseParamsTraitType {
	if c == nil {
		return nil
	}
	return c.TraitType
}

func (c *CountEntityTraitDefinitionsParams) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountEntityTraitDefinitionsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler CountEntityTraitDefinitionsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountEntityTraitDefinitionsParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountEntityTraitDefinitionsParams) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CountEntityTraitDefinitionsRequestEntityType string

const (
	CountEntityTraitDefinitionsRequestEntityTypeCompany CountEntityTraitDefinitionsRequestEntityType = "company"
	CountEntityTraitDefinitionsRequestEntityTypeUser    CountEntityTraitDefinitionsRequestEntityType = "user"
)

func NewCountEntityTraitDefinitionsRequestEntityTypeFromString(s string) (CountEntityTraitDefinitionsRequestEntityType, error) {
	switch s {
	case "company":
		return CountEntityTraitDefinitionsRequestEntityTypeCompany, nil
	case "user":
		return CountEntityTraitDefinitionsRequestEntityTypeUser, nil
	}
	var t CountEntityTraitDefinitionsRequestEntityType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CountEntityTraitDefinitionsRequestEntityType) Ptr() *CountEntityTraitDefinitionsRequestEntityType {
	return &c
}

type CountEntityTraitDefinitionsRequestTraitType string

const (
	CountEntityTraitDefinitionsRequestTraitTypeBoolean  CountEntityTraitDefinitionsRequestTraitType = "boolean"
	CountEntityTraitDefinitionsRequestTraitTypeCurrency CountEntityTraitDefinitionsRequestTraitType = "currency"
	CountEntityTraitDefinitionsRequestTraitTypeDate     CountEntityTraitDefinitionsRequestTraitType = "date"
	CountEntityTraitDefinitionsRequestTraitTypeNumber   CountEntityTraitDefinitionsRequestTraitType = "number"
	CountEntityTraitDefinitionsRequestTraitTypeString   CountEntityTraitDefinitionsRequestTraitType = "string"
	CountEntityTraitDefinitionsRequestTraitTypeURL      CountEntityTraitDefinitionsRequestTraitType = "url"
)

func NewCountEntityTraitDefinitionsRequestTraitTypeFromString(s string) (CountEntityTraitDefinitionsRequestTraitType, error) {
	switch s {
	case "boolean":
		return CountEntityTraitDefinitionsRequestTraitTypeBoolean, nil
	case "currency":
		return CountEntityTraitDefinitionsRequestTraitTypeCurrency, nil
	case "date":
		return CountEntityTraitDefinitionsRequestTraitTypeDate, nil
	case "number":
		return CountEntityTraitDefinitionsRequestTraitTypeNumber, nil
	case "string":
		return CountEntityTraitDefinitionsRequestTraitTypeString, nil
	case "url":
		return CountEntityTraitDefinitionsRequestTraitTypeURL, nil
	}
	var t CountEntityTraitDefinitionsRequestTraitType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CountEntityTraitDefinitionsRequestTraitType) Ptr() *CountEntityTraitDefinitionsRequestTraitType {
	return &c
}

type CountEntityTraitDefinitionsResponse struct {
	Data *CountResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *CountEntityTraitDefinitionsParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CountEntityTraitDefinitionsResponse) GetData() *CountResponse {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *CountEntityTraitDefinitionsResponse) GetParams() *CountEntityTraitDefinitionsParams {
	if c == nil {
		return nil
	}
	return c.Params
}

func (c *CountEntityTraitDefinitionsResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountEntityTraitDefinitionsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CountEntityTraitDefinitionsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountEntityTraitDefinitionsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountEntityTraitDefinitionsResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CountEntityTraitDefinitionsResponseParamsEntityType string

const (
	CountEntityTraitDefinitionsResponseParamsEntityTypeCompany CountEntityTraitDefinitionsResponseParamsEntityType = "company"
	CountEntityTraitDefinitionsResponseParamsEntityTypeUser    CountEntityTraitDefinitionsResponseParamsEntityType = "user"
)

func NewCountEntityTraitDefinitionsResponseParamsEntityTypeFromString(s string) (CountEntityTraitDefinitionsResponseParamsEntityType, error) {
	switch s {
	case "company":
		return CountEntityTraitDefinitionsResponseParamsEntityTypeCompany, nil
	case "user":
		return CountEntityTraitDefinitionsResponseParamsEntityTypeUser, nil
	}
	var t CountEntityTraitDefinitionsResponseParamsEntityType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CountEntityTraitDefinitionsResponseParamsEntityType) Ptr() *CountEntityTraitDefinitionsResponseParamsEntityType {
	return &c
}

type CountEntityTraitDefinitionsResponseParamsTraitType string

const (
	CountEntityTraitDefinitionsResponseParamsTraitTypeBoolean  CountEntityTraitDefinitionsResponseParamsTraitType = "boolean"
	CountEntityTraitDefinitionsResponseParamsTraitTypeCurrency CountEntityTraitDefinitionsResponseParamsTraitType = "currency"
	CountEntityTraitDefinitionsResponseParamsTraitTypeDate     CountEntityTraitDefinitionsResponseParamsTraitType = "date"
	CountEntityTraitDefinitionsResponseParamsTraitTypeNumber   CountEntityTraitDefinitionsResponseParamsTraitType = "number"
	CountEntityTraitDefinitionsResponseParamsTraitTypeString   CountEntityTraitDefinitionsResponseParamsTraitType = "string"
	CountEntityTraitDefinitionsResponseParamsTraitTypeURL      CountEntityTraitDefinitionsResponseParamsTraitType = "url"
)

func NewCountEntityTraitDefinitionsResponseParamsTraitTypeFromString(s string) (CountEntityTraitDefinitionsResponseParamsTraitType, error) {
	switch s {
	case "boolean":
		return CountEntityTraitDefinitionsResponseParamsTraitTypeBoolean, nil
	case "currency":
		return CountEntityTraitDefinitionsResponseParamsTraitTypeCurrency, nil
	case "date":
		return CountEntityTraitDefinitionsResponseParamsTraitTypeDate, nil
	case "number":
		return CountEntityTraitDefinitionsResponseParamsTraitTypeNumber, nil
	case "string":
		return CountEntityTraitDefinitionsResponseParamsTraitTypeString, nil
	case "url":
		return CountEntityTraitDefinitionsResponseParamsTraitTypeURL, nil
	}
	var t CountEntityTraitDefinitionsResponseParamsTraitType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CountEntityTraitDefinitionsResponseParamsTraitType) Ptr() *CountEntityTraitDefinitionsResponseParamsTraitType {
	return &c
}

// Input parameters
type CountPlanTraitsParams struct {
	IDs []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset   *int     `json:"offset,omitempty" url:"offset,omitempty"`
	PlanID   *string  `json:"plan_id,omitempty" url:"plan_id,omitempty"`
	TraitID  *string  `json:"trait_id,omitempty" url:"trait_id,omitempty"`
	TraitIDs []string `json:"trait_ids,omitempty" url:"trait_ids,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CountPlanTraitsParams) GetIDs() []string {
	if c == nil {
		return nil
	}
	return c.IDs
}

func (c *CountPlanTraitsParams) GetLimit() *int {
	if c == nil {
		return nil
	}
	return c.Limit
}

func (c *CountPlanTraitsParams) GetOffset() *int {
	if c == nil {
		return nil
	}
	return c.Offset
}

func (c *CountPlanTraitsParams) GetPlanID() *string {
	if c == nil {
		return nil
	}
	return c.PlanID
}

func (c *CountPlanTraitsParams) GetTraitID() *string {
	if c == nil {
		return nil
	}
	return c.TraitID
}

func (c *CountPlanTraitsParams) GetTraitIDs() []string {
	if c == nil {
		return nil
	}
	return c.TraitIDs
}

func (c *CountPlanTraitsParams) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountPlanTraitsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler CountPlanTraitsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountPlanTraitsParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountPlanTraitsParams) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CountPlanTraitsResponse struct {
	Data *CountResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *CountPlanTraitsParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CountPlanTraitsResponse) GetData() *CountResponse {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *CountPlanTraitsResponse) GetParams() *CountPlanTraitsParams {
	if c == nil {
		return nil
	}
	return c.Params
}

func (c *CountPlanTraitsResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountPlanTraitsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CountPlanTraitsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountPlanTraitsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountPlanTraitsResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Input parameters
type CountUsersParams struct {
	// Filter users by company ID (starts with comp_)
	CompanyID *string `json:"company_id,omitempty" url:"company_id,omitempty"`
	// Filter users by multiple user IDs (starts with user_)
	IDs []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"offset,omitempty" url:"offset,omitempty"`
	// Filter users by plan ID (starts with plan_)
	PlanID *string `json:"plan_id,omitempty" url:"plan_id,omitempty"`
	// Search for users by name, keys or string traits
	Q *string `json:"q,omitempty" url:"q,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CountUsersParams) GetCompanyID() *string {
	if c == nil {
		return nil
	}
	return c.CompanyID
}

func (c *CountUsersParams) GetIDs() []string {
	if c == nil {
		return nil
	}
	return c.IDs
}

func (c *CountUsersParams) GetLimit() *int {
	if c == nil {
		return nil
	}
	return c.Limit
}

func (c *CountUsersParams) GetOffset() *int {
	if c == nil {
		return nil
	}
	return c.Offset
}

func (c *CountUsersParams) GetPlanID() *string {
	if c == nil {
		return nil
	}
	return c.PlanID
}

func (c *CountUsersParams) GetQ() *string {
	if c == nil {
		return nil
	}
	return c.Q
}

func (c *CountUsersParams) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountUsersParams) UnmarshalJSON(data []byte) error {
	type unmarshaler CountUsersParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountUsersParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountUsersParams) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CountUsersResponse struct {
	Data *CountResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *CountUsersParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CountUsersResponse) GetData() *CountResponse {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *CountUsersResponse) GetParams() *CountUsersParams {
	if c == nil {
		return nil
	}
	return c.Params
}

func (c *CountUsersResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountUsersResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CountUsersResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountUsersResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountUsersResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateCompanyResponse struct {
	Data *CompanyDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateCompanyResponse) GetData() *CompanyDetailResponseData {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *CreateCompanyResponse) GetParams() map[string]interface{} {
	if c == nil {
		return nil
	}
	return c.Params
}

func (c *CreateCompanyResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateCompanyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateCompanyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateCompanyResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateCompanyResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateEntityTraitDefinitionRequestBodyEntityType string

const (
	CreateEntityTraitDefinitionRequestBodyEntityTypeCompany CreateEntityTraitDefinitionRequestBodyEntityType = "company"
	CreateEntityTraitDefinitionRequestBodyEntityTypeUser    CreateEntityTraitDefinitionRequestBodyEntityType = "user"
)

func NewCreateEntityTraitDefinitionRequestBodyEntityTypeFromString(s string) (CreateEntityTraitDefinitionRequestBodyEntityType, error) {
	switch s {
	case "company":
		return CreateEntityTraitDefinitionRequestBodyEntityTypeCompany, nil
	case "user":
		return CreateEntityTraitDefinitionRequestBodyEntityTypeUser, nil
	}
	var t CreateEntityTraitDefinitionRequestBodyEntityType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CreateEntityTraitDefinitionRequestBodyEntityType) Ptr() *CreateEntityTraitDefinitionRequestBodyEntityType {
	return &c
}

type CreateEntityTraitDefinitionRequestBodyTraitType string

const (
	CreateEntityTraitDefinitionRequestBodyTraitTypeBoolean  CreateEntityTraitDefinitionRequestBodyTraitType = "boolean"
	CreateEntityTraitDefinitionRequestBodyTraitTypeCurrency CreateEntityTraitDefinitionRequestBodyTraitType = "currency"
	CreateEntityTraitDefinitionRequestBodyTraitTypeDate     CreateEntityTraitDefinitionRequestBodyTraitType = "date"
	CreateEntityTraitDefinitionRequestBodyTraitTypeNumber   CreateEntityTraitDefinitionRequestBodyTraitType = "number"
	CreateEntityTraitDefinitionRequestBodyTraitTypeString   CreateEntityTraitDefinitionRequestBodyTraitType = "string"
	CreateEntityTraitDefinitionRequestBodyTraitTypeURL      CreateEntityTraitDefinitionRequestBodyTraitType = "url"
)

func NewCreateEntityTraitDefinitionRequestBodyTraitTypeFromString(s string) (CreateEntityTraitDefinitionRequestBodyTraitType, error) {
	switch s {
	case "boolean":
		return CreateEntityTraitDefinitionRequestBodyTraitTypeBoolean, nil
	case "currency":
		return CreateEntityTraitDefinitionRequestBodyTraitTypeCurrency, nil
	case "date":
		return CreateEntityTraitDefinitionRequestBodyTraitTypeDate, nil
	case "number":
		return CreateEntityTraitDefinitionRequestBodyTraitTypeNumber, nil
	case "string":
		return CreateEntityTraitDefinitionRequestBodyTraitTypeString, nil
	case "url":
		return CreateEntityTraitDefinitionRequestBodyTraitTypeURL, nil
	}
	var t CreateEntityTraitDefinitionRequestBodyTraitType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CreateEntityTraitDefinitionRequestBodyTraitType) Ptr() *CreateEntityTraitDefinitionRequestBodyTraitType {
	return &c
}

type CreatePlanTraitResponse struct {
	Data *PlanTraitResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreatePlanTraitResponse) GetData() *PlanTraitResponseData {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *CreatePlanTraitResponse) GetParams() map[string]interface{} {
	if c == nil {
		return nil
	}
	return c.Params
}

func (c *CreatePlanTraitResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreatePlanTraitResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreatePlanTraitResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreatePlanTraitResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreatePlanTraitResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateUserResponse struct {
	Data *UserDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateUserResponse) GetData() *UserDetailResponseData {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *CreateUserResponse) GetParams() map[string]interface{} {
	if c == nil {
		return nil
	}
	return c.Params
}

func (c *CreateUserResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateUserResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateUserResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateUserResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateUserResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DeleteCompanyByKeysResponse struct {
	Data *CompanyResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeleteCompanyByKeysResponse) GetData() *CompanyResponseData {
	if d == nil {
		return nil
	}
	return d.Data
}

func (d *DeleteCompanyByKeysResponse) GetParams() map[string]interface{} {
	if d == nil {
		return nil
	}
	return d.Params
}

func (d *DeleteCompanyByKeysResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteCompanyByKeysResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteCompanyByKeysResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteCompanyByKeysResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteCompanyByKeysResponse) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DeleteCompanyMembershipResponse struct {
	Data *DeleteResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeleteCompanyMembershipResponse) GetData() *DeleteResponse {
	if d == nil {
		return nil
	}
	return d.Data
}

func (d *DeleteCompanyMembershipResponse) GetParams() map[string]interface{} {
	if d == nil {
		return nil
	}
	return d.Params
}

func (d *DeleteCompanyMembershipResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteCompanyMembershipResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteCompanyMembershipResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteCompanyMembershipResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteCompanyMembershipResponse) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DeleteCompanyResponse struct {
	Data *DeleteResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeleteCompanyResponse) GetData() *DeleteResponse {
	if d == nil {
		return nil
	}
	return d.Data
}

func (d *DeleteCompanyResponse) GetParams() map[string]interface{} {
	if d == nil {
		return nil
	}
	return d.Params
}

func (d *DeleteCompanyResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteCompanyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteCompanyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteCompanyResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteCompanyResponse) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DeletePlanTraitResponse struct {
	Data *DeleteResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeletePlanTraitResponse) GetData() *DeleteResponse {
	if d == nil {
		return nil
	}
	return d.Data
}

func (d *DeletePlanTraitResponse) GetParams() map[string]interface{} {
	if d == nil {
		return nil
	}
	return d.Params
}

func (d *DeletePlanTraitResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeletePlanTraitResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeletePlanTraitResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeletePlanTraitResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeletePlanTraitResponse) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DeleteUserByKeysResponse struct {
	Data *UserResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeleteUserByKeysResponse) GetData() *UserResponseData {
	if d == nil {
		return nil
	}
	return d.Data
}

func (d *DeleteUserByKeysResponse) GetParams() map[string]interface{} {
	if d == nil {
		return nil
	}
	return d.Params
}

func (d *DeleteUserByKeysResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteUserByKeysResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteUserByKeysResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteUserByKeysResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteUserByKeysResponse) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DeleteUserResponse struct {
	Data *DeleteResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeleteUserResponse) GetData() *DeleteResponse {
	if d == nil {
		return nil
	}
	return d.Data
}

func (d *DeleteUserResponse) GetParams() map[string]interface{} {
	if d == nil {
		return nil
	}
	return d.Params
}

func (d *DeleteUserResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteUserResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteUserResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteUserResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteUserResponse) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Input parameters
type GetActiveCompanySubscriptionParams struct {
	CompanyID  *string  `json:"company_id,omitempty" url:"company_id,omitempty"`
	CompanyIDs []string `json:"company_ids,omitempty" url:"company_ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"offset,omitempty" url:"offset,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetActiveCompanySubscriptionParams) GetCompanyID() *string {
	if g == nil {
		return nil
	}
	return g.CompanyID
}

func (g *GetActiveCompanySubscriptionParams) GetCompanyIDs() []string {
	if g == nil {
		return nil
	}
	return g.CompanyIDs
}

func (g *GetActiveCompanySubscriptionParams) GetLimit() *int {
	if g == nil {
		return nil
	}
	return g.Limit
}

func (g *GetActiveCompanySubscriptionParams) GetOffset() *int {
	if g == nil {
		return nil
	}
	return g.Offset
}

func (g *GetActiveCompanySubscriptionParams) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetActiveCompanySubscriptionParams) UnmarshalJSON(data []byte) error {
	type unmarshaler GetActiveCompanySubscriptionParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetActiveCompanySubscriptionParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetActiveCompanySubscriptionParams) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetActiveCompanySubscriptionResponse struct {
	Data []*CompanySubscriptionResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *GetActiveCompanySubscriptionParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetActiveCompanySubscriptionResponse) GetData() []*CompanySubscriptionResponseData {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GetActiveCompanySubscriptionResponse) GetParams() *GetActiveCompanySubscriptionParams {
	if g == nil {
		return nil
	}
	return g.Params
}

func (g *GetActiveCompanySubscriptionResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetActiveCompanySubscriptionResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetActiveCompanySubscriptionResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetActiveCompanySubscriptionResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetActiveCompanySubscriptionResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Input parameters
type GetActiveDealsParams struct {
	CompanyID *string `json:"company_id,omitempty" url:"company_id,omitempty"`
	DealStage *string `json:"deal_stage,omitempty" url:"deal_stage,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"offset,omitempty" url:"offset,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetActiveDealsParams) GetCompanyID() *string {
	if g == nil {
		return nil
	}
	return g.CompanyID
}

func (g *GetActiveDealsParams) GetDealStage() *string {
	if g == nil {
		return nil
	}
	return g.DealStage
}

func (g *GetActiveDealsParams) GetLimit() *int {
	if g == nil {
		return nil
	}
	return g.Limit
}

func (g *GetActiveDealsParams) GetOffset() *int {
	if g == nil {
		return nil
	}
	return g.Offset
}

func (g *GetActiveDealsParams) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetActiveDealsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler GetActiveDealsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetActiveDealsParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetActiveDealsParams) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetActiveDealsResponse struct {
	Data []*CompanyCrmDealsResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *GetActiveDealsParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetActiveDealsResponse) GetData() []*CompanyCrmDealsResponseData {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GetActiveDealsResponse) GetParams() *GetActiveDealsParams {
	if g == nil {
		return nil
	}
	return g.Params
}

func (g *GetActiveDealsResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetActiveDealsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetActiveDealsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetActiveDealsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetActiveDealsResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetCompanyResponse struct {
	Data *CompanyDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetCompanyResponse) GetData() *CompanyDetailResponseData {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GetCompanyResponse) GetParams() map[string]interface{} {
	if g == nil {
		return nil
	}
	return g.Params
}

func (g *GetCompanyResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetCompanyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetCompanyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetCompanyResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetCompanyResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetEntityTraitDefinitionResponse struct {
	Data *EntityTraitDefinitionResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetEntityTraitDefinitionResponse) GetData() *EntityTraitDefinitionResponseData {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GetEntityTraitDefinitionResponse) GetParams() map[string]interface{} {
	if g == nil {
		return nil
	}
	return g.Params
}

func (g *GetEntityTraitDefinitionResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetEntityTraitDefinitionResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetEntityTraitDefinitionResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetEntityTraitDefinitionResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetEntityTraitDefinitionResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Input parameters
type GetEntityTraitValuesParams struct {
	DefinitionID *string `json:"definition_id,omitempty" url:"definition_id,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Q      *string `json:"q,omitempty" url:"q,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetEntityTraitValuesParams) GetDefinitionID() *string {
	if g == nil {
		return nil
	}
	return g.DefinitionID
}

func (g *GetEntityTraitValuesParams) GetLimit() *int {
	if g == nil {
		return nil
	}
	return g.Limit
}

func (g *GetEntityTraitValuesParams) GetOffset() *int {
	if g == nil {
		return nil
	}
	return g.Offset
}

func (g *GetEntityTraitValuesParams) GetQ() *string {
	if g == nil {
		return nil
	}
	return g.Q
}

func (g *GetEntityTraitValuesParams) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetEntityTraitValuesParams) UnmarshalJSON(data []byte) error {
	type unmarshaler GetEntityTraitValuesParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetEntityTraitValuesParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetEntityTraitValuesParams) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetEntityTraitValuesResponse struct {
	Data []*EntityTraitValue `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *GetEntityTraitValuesParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetEntityTraitValuesResponse) GetData() []*EntityTraitValue {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GetEntityTraitValuesResponse) GetParams() *GetEntityTraitValuesParams {
	if g == nil {
		return nil
	}
	return g.Params
}

func (g *GetEntityTraitValuesResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetEntityTraitValuesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetEntityTraitValuesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetEntityTraitValuesResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetEntityTraitValuesResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetOrCreateCompanyMembershipResponse struct {
	Data *CompanyMembershipDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetOrCreateCompanyMembershipResponse) GetData() *CompanyMembershipDetailResponseData {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GetOrCreateCompanyMembershipResponse) GetParams() map[string]interface{} {
	if g == nil {
		return nil
	}
	return g.Params
}

func (g *GetOrCreateCompanyMembershipResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetOrCreateCompanyMembershipResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetOrCreateCompanyMembershipResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetOrCreateCompanyMembershipResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetOrCreateCompanyMembershipResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetOrCreateEntityTraitDefinitionResponse struct {
	Data *EntityTraitDefinitionResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetOrCreateEntityTraitDefinitionResponse) GetData() *EntityTraitDefinitionResponseData {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GetOrCreateEntityTraitDefinitionResponse) GetParams() map[string]interface{} {
	if g == nil {
		return nil
	}
	return g.Params
}

func (g *GetOrCreateEntityTraitDefinitionResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetOrCreateEntityTraitDefinitionResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetOrCreateEntityTraitDefinitionResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetOrCreateEntityTraitDefinitionResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetOrCreateEntityTraitDefinitionResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetPlanTraitResponse struct {
	Data *PlanTraitResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetPlanTraitResponse) GetData() *PlanTraitResponseData {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GetPlanTraitResponse) GetParams() map[string]interface{} {
	if g == nil {
		return nil
	}
	return g.Params
}

func (g *GetPlanTraitResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetPlanTraitResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetPlanTraitResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetPlanTraitResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetPlanTraitResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetUserResponse struct {
	Data *UserDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetUserResponse) GetData() *UserDetailResponseData {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GetUserResponse) GetParams() map[string]interface{} {
	if g == nil {
		return nil
	}
	return g.Params
}

func (g *GetUserResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetUserResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetUserResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetUserResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetUserResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Input parameters
type ListCompaniesForAdvancedFilterParams struct {
	// Filter companies by one or more credit type IDs (each ID starts with bcrd_)
	CreditTypeIDs []string `json:"credit_type_ids,omitempty" url:"credit_type_ids,omitempty"`
	// Select the display columns to return (e.g. plan, subscription, users, last_seen_at)
	DisplayProperties []string `json:"display_properties,omitempty" url:"display_properties,omitempty"`
	// Filter companies by one or more feature IDs (each ID starts with feat_)
	FeatureIDs []string `json:"feature_ids,omitempty" url:"feature_ids,omitempty"`
	// Filter companies by multiple company IDs (starts with comp_)
	IDs []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Filter companies that have monetized subscriptions
	MonetizedSubscriptions *bool `json:"monetized_subscriptions,omitempty" url:"monetized_subscriptions,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"offset,omitempty" url:"offset,omitempty"`
	// Filter companies by one or more plan IDs (each ID starts with plan_)
	PlanIDs []string `json:"plan_ids,omitempty" url:"plan_ids,omitempty"`
	// Search for companies by name, keys or string traits
	Q *string `json:"q,omitempty" url:"q,omitempty"`
	// Column to sort by (e.g. name, created_at, last_seen_at)
	SortOrderColumn *string `json:"sort_order_column,omitempty" url:"sort_order_column,omitempty"`
	// Direction to sort by (asc or desc)
	SortOrderDirection *ListCompaniesForAdvancedFilterResponseParamsSortOrderDirection `json:"sort_order_direction,omitempty" url:"sort_order_direction,omitempty"`
	// Filter companies by one or more subscription statuses (active, canceled, expired, incomplete, incomplete_expired, past_due, paused, trialing, unpaid)
	SubscriptionStatuses []string `json:"subscription_statuses,omitempty" url:"subscription_statuses,omitempty"`
	// Filter companies by one or more subscription types (paid, free, trial)
	SubscriptionTypes []string `json:"subscription_types,omitempty" url:"subscription_types,omitempty"`
	// Filter out companies that have a plan
	WithoutPlan *bool `json:"without_plan,omitempty" url:"without_plan,omitempty"`
	// Filter out companies that have a subscription
	WithoutSubscription *bool `json:"without_subscription,omitempty" url:"without_subscription,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListCompaniesForAdvancedFilterParams) GetCreditTypeIDs() []string {
	if l == nil {
		return nil
	}
	return l.CreditTypeIDs
}

func (l *ListCompaniesForAdvancedFilterParams) GetDisplayProperties() []string {
	if l == nil {
		return nil
	}
	return l.DisplayProperties
}

func (l *ListCompaniesForAdvancedFilterParams) GetFeatureIDs() []string {
	if l == nil {
		return nil
	}
	return l.FeatureIDs
}

func (l *ListCompaniesForAdvancedFilterParams) GetIDs() []string {
	if l == nil {
		return nil
	}
	return l.IDs
}

func (l *ListCompaniesForAdvancedFilterParams) GetLimit() *int {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListCompaniesForAdvancedFilterParams) GetMonetizedSubscriptions() *bool {
	if l == nil {
		return nil
	}
	return l.MonetizedSubscriptions
}

func (l *ListCompaniesForAdvancedFilterParams) GetOffset() *int {
	if l == nil {
		return nil
	}
	return l.Offset
}

func (l *ListCompaniesForAdvancedFilterParams) GetPlanIDs() []string {
	if l == nil {
		return nil
	}
	return l.PlanIDs
}

func (l *ListCompaniesForAdvancedFilterParams) GetQ() *string {
	if l == nil {
		return nil
	}
	return l.Q
}

func (l *ListCompaniesForAdvancedFilterParams) GetSortOrderColumn() *string {
	if l == nil {
		return nil
	}
	return l.SortOrderColumn
}

func (l *ListCompaniesForAdvancedFilterParams) GetSortOrderDirection() *ListCompaniesForAdvancedFilterResponseParamsSortOrderDirection {
	if l == nil {
		return nil
	}
	return l.SortOrderDirection
}

func (l *ListCompaniesForAdvancedFilterParams) GetSubscriptionStatuses() []string {
	if l == nil {
		return nil
	}
	return l.SubscriptionStatuses
}

func (l *ListCompaniesForAdvancedFilterParams) GetSubscriptionTypes() []string {
	if l == nil {
		return nil
	}
	return l.SubscriptionTypes
}

func (l *ListCompaniesForAdvancedFilterParams) GetWithoutPlan() *bool {
	if l == nil {
		return nil
	}
	return l.WithoutPlan
}

func (l *ListCompaniesForAdvancedFilterParams) GetWithoutSubscription() *bool {
	if l == nil {
		return nil
	}
	return l.WithoutSubscription
}

func (l *ListCompaniesForAdvancedFilterParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListCompaniesForAdvancedFilterParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListCompaniesForAdvancedFilterParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListCompaniesForAdvancedFilterParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListCompaniesForAdvancedFilterParams) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Direction to sort by (asc or desc)
type ListCompaniesForAdvancedFilterRequestSortOrderDirection string

const (
	ListCompaniesForAdvancedFilterRequestSortOrderDirectionAsc  ListCompaniesForAdvancedFilterRequestSortOrderDirection = "asc"
	ListCompaniesForAdvancedFilterRequestSortOrderDirectionDesc ListCompaniesForAdvancedFilterRequestSortOrderDirection = "desc"
)

func NewListCompaniesForAdvancedFilterRequestSortOrderDirectionFromString(s string) (ListCompaniesForAdvancedFilterRequestSortOrderDirection, error) {
	switch s {
	case "asc":
		return ListCompaniesForAdvancedFilterRequestSortOrderDirectionAsc, nil
	case "desc":
		return ListCompaniesForAdvancedFilterRequestSortOrderDirectionDesc, nil
	}
	var t ListCompaniesForAdvancedFilterRequestSortOrderDirection
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l ListCompaniesForAdvancedFilterRequestSortOrderDirection) Ptr() *ListCompaniesForAdvancedFilterRequestSortOrderDirection {
	return &l
}

type ListCompaniesForAdvancedFilterResponse struct {
	Data []*CompanyViewWithFeatureUsageResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListCompaniesForAdvancedFilterParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListCompaniesForAdvancedFilterResponse) GetData() []*CompanyViewWithFeatureUsageResponseData {
	if l == nil {
		return nil
	}
	return l.Data
}

func (l *ListCompaniesForAdvancedFilterResponse) GetParams() *ListCompaniesForAdvancedFilterParams {
	if l == nil {
		return nil
	}
	return l.Params
}

func (l *ListCompaniesForAdvancedFilterResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListCompaniesForAdvancedFilterResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListCompaniesForAdvancedFilterResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListCompaniesForAdvancedFilterResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListCompaniesForAdvancedFilterResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Direction to sort by (asc or desc)
type ListCompaniesForAdvancedFilterResponseParamsSortOrderDirection string

const (
	ListCompaniesForAdvancedFilterResponseParamsSortOrderDirectionAsc  ListCompaniesForAdvancedFilterResponseParamsSortOrderDirection = "asc"
	ListCompaniesForAdvancedFilterResponseParamsSortOrderDirectionDesc ListCompaniesForAdvancedFilterResponseParamsSortOrderDirection = "desc"
)

func NewListCompaniesForAdvancedFilterResponseParamsSortOrderDirectionFromString(s string) (ListCompaniesForAdvancedFilterResponseParamsSortOrderDirection, error) {
	switch s {
	case "asc":
		return ListCompaniesForAdvancedFilterResponseParamsSortOrderDirectionAsc, nil
	case "desc":
		return ListCompaniesForAdvancedFilterResponseParamsSortOrderDirectionDesc, nil
	}
	var t ListCompaniesForAdvancedFilterResponseParamsSortOrderDirection
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l ListCompaniesForAdvancedFilterResponseParamsSortOrderDirection) Ptr() *ListCompaniesForAdvancedFilterResponseParamsSortOrderDirection {
	return &l
}

// Input parameters
type ListCompaniesParams struct {
	// Filter companies by multiple company IDs (starts with comp_)
	IDs []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"offset,omitempty" url:"offset,omitempty"`
	// Filter companies by plan ID (starts with plan_)
	PlanID *string `json:"plan_id,omitempty" url:"plan_id,omitempty"`
	// Search for companies by name, keys or string traits
	Q *string `json:"q,omitempty" url:"q,omitempty"`
	// Filter companies that have a subscription
	WithSubscription *bool `json:"with_subscription,omitempty" url:"with_subscription,omitempty"`
	// Filter out companies that already have a company override for the specified feature ID
	WithoutFeatureOverrideFor *string `json:"without_feature_override_for,omitempty" url:"without_feature_override_for,omitempty"`
	// Filter out companies that have a plan
	WithoutPlan *bool `json:"without_plan,omitempty" url:"without_plan,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListCompaniesParams) GetIDs() []string {
	if l == nil {
		return nil
	}
	return l.IDs
}

func (l *ListCompaniesParams) GetLimit() *int {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListCompaniesParams) GetOffset() *int {
	if l == nil {
		return nil
	}
	return l.Offset
}

func (l *ListCompaniesParams) GetPlanID() *string {
	if l == nil {
		return nil
	}
	return l.PlanID
}

func (l *ListCompaniesParams) GetQ() *string {
	if l == nil {
		return nil
	}
	return l.Q
}

func (l *ListCompaniesParams) GetWithSubscription() *bool {
	if l == nil {
		return nil
	}
	return l.WithSubscription
}

func (l *ListCompaniesParams) GetWithoutFeatureOverrideFor() *string {
	if l == nil {
		return nil
	}
	return l.WithoutFeatureOverrideFor
}

func (l *ListCompaniesParams) GetWithoutPlan() *bool {
	if l == nil {
		return nil
	}
	return l.WithoutPlan
}

func (l *ListCompaniesParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListCompaniesParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListCompaniesParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListCompaniesParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListCompaniesParams) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListCompaniesResponse struct {
	Data []*CompanyDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListCompaniesParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListCompaniesResponse) GetData() []*CompanyDetailResponseData {
	if l == nil {
		return nil
	}
	return l.Data
}

func (l *ListCompaniesResponse) GetParams() *ListCompaniesParams {
	if l == nil {
		return nil
	}
	return l.Params
}

func (l *ListCompaniesResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListCompaniesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListCompaniesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListCompaniesResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListCompaniesResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type ListCompanyMembershipsParams struct {
	CompanyID *string `json:"company_id,omitempty" url:"company_id,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int    `json:"offset,omitempty" url:"offset,omitempty"`
	UserID *string `json:"user_id,omitempty" url:"user_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListCompanyMembershipsParams) GetCompanyID() *string {
	if l == nil {
		return nil
	}
	return l.CompanyID
}

func (l *ListCompanyMembershipsParams) GetLimit() *int {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListCompanyMembershipsParams) GetOffset() *int {
	if l == nil {
		return nil
	}
	return l.Offset
}

func (l *ListCompanyMembershipsParams) GetUserID() *string {
	if l == nil {
		return nil
	}
	return l.UserID
}

func (l *ListCompanyMembershipsParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListCompanyMembershipsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListCompanyMembershipsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListCompanyMembershipsParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListCompanyMembershipsParams) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListCompanyMembershipsResponse struct {
	Data []*CompanyMembershipDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListCompanyMembershipsParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListCompanyMembershipsResponse) GetData() []*CompanyMembershipDetailResponseData {
	if l == nil {
		return nil
	}
	return l.Data
}

func (l *ListCompanyMembershipsResponse) GetParams() *ListCompanyMembershipsParams {
	if l == nil {
		return nil
	}
	return l.Params
}

func (l *ListCompanyMembershipsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListCompanyMembershipsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListCompanyMembershipsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListCompanyMembershipsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListCompanyMembershipsResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type ListEntityKeyDefinitionsParams struct {
	EntityType *ListEntityKeyDefinitionsResponseParamsEntityType `json:"entity_type,omitempty" url:"entity_type,omitempty"`
	IDs        []string                                          `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Q      *string `json:"q,omitempty" url:"q,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListEntityKeyDefinitionsParams) GetEntityType() *ListEntityKeyDefinitionsResponseParamsEntityType {
	if l == nil {
		return nil
	}
	return l.EntityType
}

func (l *ListEntityKeyDefinitionsParams) GetIDs() []string {
	if l == nil {
		return nil
	}
	return l.IDs
}

func (l *ListEntityKeyDefinitionsParams) GetLimit() *int {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListEntityKeyDefinitionsParams) GetOffset() *int {
	if l == nil {
		return nil
	}
	return l.Offset
}

func (l *ListEntityKeyDefinitionsParams) GetQ() *string {
	if l == nil {
		return nil
	}
	return l.Q
}

func (l *ListEntityKeyDefinitionsParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListEntityKeyDefinitionsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListEntityKeyDefinitionsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListEntityKeyDefinitionsParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListEntityKeyDefinitionsParams) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListEntityKeyDefinitionsRequestEntityType string

const (
	ListEntityKeyDefinitionsRequestEntityTypeCompany ListEntityKeyDefinitionsRequestEntityType = "company"
	ListEntityKeyDefinitionsRequestEntityTypeUser    ListEntityKeyDefinitionsRequestEntityType = "user"
)

func NewListEntityKeyDefinitionsRequestEntityTypeFromString(s string) (ListEntityKeyDefinitionsRequestEntityType, error) {
	switch s {
	case "company":
		return ListEntityKeyDefinitionsRequestEntityTypeCompany, nil
	case "user":
		return ListEntityKeyDefinitionsRequestEntityTypeUser, nil
	}
	var t ListEntityKeyDefinitionsRequestEntityType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l ListEntityKeyDefinitionsRequestEntityType) Ptr() *ListEntityKeyDefinitionsRequestEntityType {
	return &l
}

type ListEntityKeyDefinitionsResponse struct {
	Data []*EntityKeyDefinitionResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListEntityKeyDefinitionsParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListEntityKeyDefinitionsResponse) GetData() []*EntityKeyDefinitionResponseData {
	if l == nil {
		return nil
	}
	return l.Data
}

func (l *ListEntityKeyDefinitionsResponse) GetParams() *ListEntityKeyDefinitionsParams {
	if l == nil {
		return nil
	}
	return l.Params
}

func (l *ListEntityKeyDefinitionsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListEntityKeyDefinitionsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListEntityKeyDefinitionsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListEntityKeyDefinitionsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListEntityKeyDefinitionsResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListEntityKeyDefinitionsResponseParamsEntityType string

const (
	ListEntityKeyDefinitionsResponseParamsEntityTypeCompany ListEntityKeyDefinitionsResponseParamsEntityType = "company"
	ListEntityKeyDefinitionsResponseParamsEntityTypeUser    ListEntityKeyDefinitionsResponseParamsEntityType = "user"
)

func NewListEntityKeyDefinitionsResponseParamsEntityTypeFromString(s string) (ListEntityKeyDefinitionsResponseParamsEntityType, error) {
	switch s {
	case "company":
		return ListEntityKeyDefinitionsResponseParamsEntityTypeCompany, nil
	case "user":
		return ListEntityKeyDefinitionsResponseParamsEntityTypeUser, nil
	}
	var t ListEntityKeyDefinitionsResponseParamsEntityType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l ListEntityKeyDefinitionsResponseParamsEntityType) Ptr() *ListEntityKeyDefinitionsResponseParamsEntityType {
	return &l
}

// Input parameters
type ListEntityTraitDefinitionsParams struct {
	EntityType *ListEntityTraitDefinitionsResponseParamsEntityType `json:"entity_type,omitempty" url:"entity_type,omitempty"`
	IDs        []string                                            `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset    *int                                               `json:"offset,omitempty" url:"offset,omitempty"`
	Q         *string                                            `json:"q,omitempty" url:"q,omitempty"`
	TraitType *ListEntityTraitDefinitionsResponseParamsTraitType `json:"trait_type,omitempty" url:"trait_type,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListEntityTraitDefinitionsParams) GetEntityType() *ListEntityTraitDefinitionsResponseParamsEntityType {
	if l == nil {
		return nil
	}
	return l.EntityType
}

func (l *ListEntityTraitDefinitionsParams) GetIDs() []string {
	if l == nil {
		return nil
	}
	return l.IDs
}

func (l *ListEntityTraitDefinitionsParams) GetLimit() *int {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListEntityTraitDefinitionsParams) GetOffset() *int {
	if l == nil {
		return nil
	}
	return l.Offset
}

func (l *ListEntityTraitDefinitionsParams) GetQ() *string {
	if l == nil {
		return nil
	}
	return l.Q
}

func (l *ListEntityTraitDefinitionsParams) GetTraitType() *ListEntityTraitDefinitionsResponseParamsTraitType {
	if l == nil {
		return nil
	}
	return l.TraitType
}

func (l *ListEntityTraitDefinitionsParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListEntityTraitDefinitionsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListEntityTraitDefinitionsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListEntityTraitDefinitionsParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListEntityTraitDefinitionsParams) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListEntityTraitDefinitionsRequestEntityType string

const (
	ListEntityTraitDefinitionsRequestEntityTypeCompany ListEntityTraitDefinitionsRequestEntityType = "company"
	ListEntityTraitDefinitionsRequestEntityTypeUser    ListEntityTraitDefinitionsRequestEntityType = "user"
)

func NewListEntityTraitDefinitionsRequestEntityTypeFromString(s string) (ListEntityTraitDefinitionsRequestEntityType, error) {
	switch s {
	case "company":
		return ListEntityTraitDefinitionsRequestEntityTypeCompany, nil
	case "user":
		return ListEntityTraitDefinitionsRequestEntityTypeUser, nil
	}
	var t ListEntityTraitDefinitionsRequestEntityType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l ListEntityTraitDefinitionsRequestEntityType) Ptr() *ListEntityTraitDefinitionsRequestEntityType {
	return &l
}

type ListEntityTraitDefinitionsRequestTraitType string

const (
	ListEntityTraitDefinitionsRequestTraitTypeBoolean  ListEntityTraitDefinitionsRequestTraitType = "boolean"
	ListEntityTraitDefinitionsRequestTraitTypeCurrency ListEntityTraitDefinitionsRequestTraitType = "currency"
	ListEntityTraitDefinitionsRequestTraitTypeDate     ListEntityTraitDefinitionsRequestTraitType = "date"
	ListEntityTraitDefinitionsRequestTraitTypeNumber   ListEntityTraitDefinitionsRequestTraitType = "number"
	ListEntityTraitDefinitionsRequestTraitTypeString   ListEntityTraitDefinitionsRequestTraitType = "string"
	ListEntityTraitDefinitionsRequestTraitTypeURL      ListEntityTraitDefinitionsRequestTraitType = "url"
)

func NewListEntityTraitDefinitionsRequestTraitTypeFromString(s string) (ListEntityTraitDefinitionsRequestTraitType, error) {
	switch s {
	case "boolean":
		return ListEntityTraitDefinitionsRequestTraitTypeBoolean, nil
	case "currency":
		return ListEntityTraitDefinitionsRequestTraitTypeCurrency, nil
	case "date":
		return ListEntityTraitDefinitionsRequestTraitTypeDate, nil
	case "number":
		return ListEntityTraitDefinitionsRequestTraitTypeNumber, nil
	case "string":
		return ListEntityTraitDefinitionsRequestTraitTypeString, nil
	case "url":
		return ListEntityTraitDefinitionsRequestTraitTypeURL, nil
	}
	var t ListEntityTraitDefinitionsRequestTraitType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l ListEntityTraitDefinitionsRequestTraitType) Ptr() *ListEntityTraitDefinitionsRequestTraitType {
	return &l
}

type ListEntityTraitDefinitionsResponse struct {
	Data []*EntityTraitDefinitionResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListEntityTraitDefinitionsParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListEntityTraitDefinitionsResponse) GetData() []*EntityTraitDefinitionResponseData {
	if l == nil {
		return nil
	}
	return l.Data
}

func (l *ListEntityTraitDefinitionsResponse) GetParams() *ListEntityTraitDefinitionsParams {
	if l == nil {
		return nil
	}
	return l.Params
}

func (l *ListEntityTraitDefinitionsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListEntityTraitDefinitionsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListEntityTraitDefinitionsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListEntityTraitDefinitionsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListEntityTraitDefinitionsResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListEntityTraitDefinitionsResponseParamsEntityType string

const (
	ListEntityTraitDefinitionsResponseParamsEntityTypeCompany ListEntityTraitDefinitionsResponseParamsEntityType = "company"
	ListEntityTraitDefinitionsResponseParamsEntityTypeUser    ListEntityTraitDefinitionsResponseParamsEntityType = "user"
)

func NewListEntityTraitDefinitionsResponseParamsEntityTypeFromString(s string) (ListEntityTraitDefinitionsResponseParamsEntityType, error) {
	switch s {
	case "company":
		return ListEntityTraitDefinitionsResponseParamsEntityTypeCompany, nil
	case "user":
		return ListEntityTraitDefinitionsResponseParamsEntityTypeUser, nil
	}
	var t ListEntityTraitDefinitionsResponseParamsEntityType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l ListEntityTraitDefinitionsResponseParamsEntityType) Ptr() *ListEntityTraitDefinitionsResponseParamsEntityType {
	return &l
}

type ListEntityTraitDefinitionsResponseParamsTraitType string

const (
	ListEntityTraitDefinitionsResponseParamsTraitTypeBoolean  ListEntityTraitDefinitionsResponseParamsTraitType = "boolean"
	ListEntityTraitDefinitionsResponseParamsTraitTypeCurrency ListEntityTraitDefinitionsResponseParamsTraitType = "currency"
	ListEntityTraitDefinitionsResponseParamsTraitTypeDate     ListEntityTraitDefinitionsResponseParamsTraitType = "date"
	ListEntityTraitDefinitionsResponseParamsTraitTypeNumber   ListEntityTraitDefinitionsResponseParamsTraitType = "number"
	ListEntityTraitDefinitionsResponseParamsTraitTypeString   ListEntityTraitDefinitionsResponseParamsTraitType = "string"
	ListEntityTraitDefinitionsResponseParamsTraitTypeURL      ListEntityTraitDefinitionsResponseParamsTraitType = "url"
)

func NewListEntityTraitDefinitionsResponseParamsTraitTypeFromString(s string) (ListEntityTraitDefinitionsResponseParamsTraitType, error) {
	switch s {
	case "boolean":
		return ListEntityTraitDefinitionsResponseParamsTraitTypeBoolean, nil
	case "currency":
		return ListEntityTraitDefinitionsResponseParamsTraitTypeCurrency, nil
	case "date":
		return ListEntityTraitDefinitionsResponseParamsTraitTypeDate, nil
	case "number":
		return ListEntityTraitDefinitionsResponseParamsTraitTypeNumber, nil
	case "string":
		return ListEntityTraitDefinitionsResponseParamsTraitTypeString, nil
	case "url":
		return ListEntityTraitDefinitionsResponseParamsTraitTypeURL, nil
	}
	var t ListEntityTraitDefinitionsResponseParamsTraitType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l ListEntityTraitDefinitionsResponseParamsTraitType) Ptr() *ListEntityTraitDefinitionsResponseParamsTraitType {
	return &l
}

// Input parameters
type ListPlanTraitsParams struct {
	IDs []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset   *int     `json:"offset,omitempty" url:"offset,omitempty"`
	PlanID   *string  `json:"plan_id,omitempty" url:"plan_id,omitempty"`
	TraitID  *string  `json:"trait_id,omitempty" url:"trait_id,omitempty"`
	TraitIDs []string `json:"trait_ids,omitempty" url:"trait_ids,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListPlanTraitsParams) GetIDs() []string {
	if l == nil {
		return nil
	}
	return l.IDs
}

func (l *ListPlanTraitsParams) GetLimit() *int {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListPlanTraitsParams) GetOffset() *int {
	if l == nil {
		return nil
	}
	return l.Offset
}

func (l *ListPlanTraitsParams) GetPlanID() *string {
	if l == nil {
		return nil
	}
	return l.PlanID
}

func (l *ListPlanTraitsParams) GetTraitID() *string {
	if l == nil {
		return nil
	}
	return l.TraitID
}

func (l *ListPlanTraitsParams) GetTraitIDs() []string {
	if l == nil {
		return nil
	}
	return l.TraitIDs
}

func (l *ListPlanTraitsParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListPlanTraitsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListPlanTraitsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListPlanTraitsParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListPlanTraitsParams) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListPlanTraitsResponse struct {
	Data []*PlanTraitResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListPlanTraitsParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListPlanTraitsResponse) GetData() []*PlanTraitResponseData {
	if l == nil {
		return nil
	}
	return l.Data
}

func (l *ListPlanTraitsResponse) GetParams() *ListPlanTraitsParams {
	if l == nil {
		return nil
	}
	return l.Params
}

func (l *ListPlanTraitsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListPlanTraitsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListPlanTraitsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListPlanTraitsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListPlanTraitsResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type ListUsersParams struct {
	// Filter users by company ID (starts with comp_)
	CompanyID *string `json:"company_id,omitempty" url:"company_id,omitempty"`
	// Filter users by multiple user IDs (starts with user_)
	IDs []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"offset,omitempty" url:"offset,omitempty"`
	// Filter users by plan ID (starts with plan_)
	PlanID *string `json:"plan_id,omitempty" url:"plan_id,omitempty"`
	// Search for users by name, keys or string traits
	Q *string `json:"q,omitempty" url:"q,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListUsersParams) GetCompanyID() *string {
	if l == nil {
		return nil
	}
	return l.CompanyID
}

func (l *ListUsersParams) GetIDs() []string {
	if l == nil {
		return nil
	}
	return l.IDs
}

func (l *ListUsersParams) GetLimit() *int {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListUsersParams) GetOffset() *int {
	if l == nil {
		return nil
	}
	return l.Offset
}

func (l *ListUsersParams) GetPlanID() *string {
	if l == nil {
		return nil
	}
	return l.PlanID
}

func (l *ListUsersParams) GetQ() *string {
	if l == nil {
		return nil
	}
	return l.Q
}

func (l *ListUsersParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListUsersParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListUsersParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListUsersParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListUsersParams) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListUsersResponse struct {
	Data []*UserDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListUsersParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListUsersResponse) GetData() []*UserDetailResponseData {
	if l == nil {
		return nil
	}
	return l.Data
}

func (l *ListUsersResponse) GetParams() *ListUsersParams {
	if l == nil {
		return nil
	}
	return l.Params
}

func (l *ListUsersResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListUsersResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListUsersResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListUsersResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListUsersResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type LookupCompanyParams struct {
	Keys map[string]string `json:"keys,omitempty" url:"keys,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *LookupCompanyParams) GetKeys() map[string]string {
	if l == nil {
		return nil
	}
	return l.Keys
}

func (l *LookupCompanyParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *LookupCompanyParams) UnmarshalJSON(data []byte) error {
	type unmarshaler LookupCompanyParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LookupCompanyParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *LookupCompanyParams) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type LookupCompanyResponse struct {
	Data *CompanyDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *LookupCompanyParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *LookupCompanyResponse) GetData() *CompanyDetailResponseData {
	if l == nil {
		return nil
	}
	return l.Data
}

func (l *LookupCompanyResponse) GetParams() *LookupCompanyParams {
	if l == nil {
		return nil
	}
	return l.Params
}

func (l *LookupCompanyResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *LookupCompanyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler LookupCompanyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LookupCompanyResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *LookupCompanyResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type LookupUserParams struct {
	Keys map[string]string `json:"keys,omitempty" url:"keys,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *LookupUserParams) GetKeys() map[string]string {
	if l == nil {
		return nil
	}
	return l.Keys
}

func (l *LookupUserParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *LookupUserParams) UnmarshalJSON(data []byte) error {
	type unmarshaler LookupUserParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LookupUserParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *LookupUserParams) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type LookupUserResponse struct {
	Data *UserDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *LookupUserParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *LookupUserResponse) GetData() *UserDetailResponseData {
	if l == nil {
		return nil
	}
	return l.Data
}

func (l *LookupUserResponse) GetParams() *LookupUserParams {
	if l == nil {
		return nil
	}
	return l.Params
}

func (l *LookupUserResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *LookupUserResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler LookupUserResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LookupUserResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *LookupUserResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type UpdateEntityTraitDefinitionRequestBodyTraitType string

const (
	UpdateEntityTraitDefinitionRequestBodyTraitTypeBoolean  UpdateEntityTraitDefinitionRequestBodyTraitType = "boolean"
	UpdateEntityTraitDefinitionRequestBodyTraitTypeCurrency UpdateEntityTraitDefinitionRequestBodyTraitType = "currency"
	UpdateEntityTraitDefinitionRequestBodyTraitTypeDate     UpdateEntityTraitDefinitionRequestBodyTraitType = "date"
	UpdateEntityTraitDefinitionRequestBodyTraitTypeNumber   UpdateEntityTraitDefinitionRequestBodyTraitType = "number"
	UpdateEntityTraitDefinitionRequestBodyTraitTypeString   UpdateEntityTraitDefinitionRequestBodyTraitType = "string"
	UpdateEntityTraitDefinitionRequestBodyTraitTypeURL      UpdateEntityTraitDefinitionRequestBodyTraitType = "url"
)

func NewUpdateEntityTraitDefinitionRequestBodyTraitTypeFromString(s string) (UpdateEntityTraitDefinitionRequestBodyTraitType, error) {
	switch s {
	case "boolean":
		return UpdateEntityTraitDefinitionRequestBodyTraitTypeBoolean, nil
	case "currency":
		return UpdateEntityTraitDefinitionRequestBodyTraitTypeCurrency, nil
	case "date":
		return UpdateEntityTraitDefinitionRequestBodyTraitTypeDate, nil
	case "number":
		return UpdateEntityTraitDefinitionRequestBodyTraitTypeNumber, nil
	case "string":
		return UpdateEntityTraitDefinitionRequestBodyTraitTypeString, nil
	case "url":
		return UpdateEntityTraitDefinitionRequestBodyTraitTypeURL, nil
	}
	var t UpdateEntityTraitDefinitionRequestBodyTraitType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UpdateEntityTraitDefinitionRequestBodyTraitType) Ptr() *UpdateEntityTraitDefinitionRequestBodyTraitType {
	return &u
}

type UpdateEntityTraitDefinitionResponse struct {
	Data *EntityTraitDefinitionResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateEntityTraitDefinitionResponse) GetData() *EntityTraitDefinitionResponseData {
	if u == nil {
		return nil
	}
	return u.Data
}

func (u *UpdateEntityTraitDefinitionResponse) GetParams() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.Params
}

func (u *UpdateEntityTraitDefinitionResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateEntityTraitDefinitionResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateEntityTraitDefinitionResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateEntityTraitDefinitionResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateEntityTraitDefinitionResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdatePlanTraitResponse struct {
	Data *PlanTraitResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdatePlanTraitResponse) GetData() *PlanTraitResponseData {
	if u == nil {
		return nil
	}
	return u.Data
}

func (u *UpdatePlanTraitResponse) GetParams() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.Params
}

func (u *UpdatePlanTraitResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdatePlanTraitResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdatePlanTraitResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdatePlanTraitResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdatePlanTraitResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdatePlanTraitsBulkResponse struct {
	Data []*PlanTraitResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdatePlanTraitsBulkResponse) GetData() []*PlanTraitResponseData {
	if u == nil {
		return nil
	}
	return u.Data
}

func (u *UpdatePlanTraitsBulkResponse) GetParams() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.Params
}

func (u *UpdatePlanTraitsBulkResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdatePlanTraitsBulkResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdatePlanTraitsBulkResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdatePlanTraitsBulkResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdatePlanTraitsBulkResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpsertCompanyResponse struct {
	Data *CompanyDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpsertCompanyResponse) GetData() *CompanyDetailResponseData {
	if u == nil {
		return nil
	}
	return u.Data
}

func (u *UpsertCompanyResponse) GetParams() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.Params
}

func (u *UpsertCompanyResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertCompanyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpsertCompanyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpsertCompanyResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertCompanyResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpsertCompanyTraitResponse struct {
	Data *CompanyDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpsertCompanyTraitResponse) GetData() *CompanyDetailResponseData {
	if u == nil {
		return nil
	}
	return u.Data
}

func (u *UpsertCompanyTraitResponse) GetParams() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.Params
}

func (u *UpsertCompanyTraitResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertCompanyTraitResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpsertCompanyTraitResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpsertCompanyTraitResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertCompanyTraitResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpsertUserResponse struct {
	Data *UserDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpsertUserResponse) GetData() *UserDetailResponseData {
	if u == nil {
		return nil
	}
	return u.Data
}

func (u *UpsertUserResponse) GetParams() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.Params
}

func (u *UpsertUserResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertUserResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpsertUserResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpsertUserResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertUserResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpsertUserTraitResponse struct {
	Data *UserDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpsertUserTraitResponse) GetData() *UserDetailResponseData {
	if u == nil {
		return nil
	}
	return u.Data
}

func (u *UpsertUserTraitResponse) GetParams() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.Params
}

func (u *UpsertUserTraitResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertUserTraitResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpsertUserTraitResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpsertUserTraitResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertUserTraitResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateEntityTraitDefinitionRequestBody struct {
	DisplayName *string                                         `json:"display_name,omitempty" url:"-"`
	TraitType   UpdateEntityTraitDefinitionRequestBodyTraitType `json:"trait_type" url:"-"`
}

type UpdatePlanTraitRequestBody struct {
	PlanID     string `json:"plan_id" url:"-"`
	TraitValue string `json:"trait_value" url:"-"`
}

type UpdatePlanTraitBulkRequestBody struct {
	PlanID string                             `json:"plan_id" url:"-"`
	Traits []*UpdatePlanTraitTraitRequestBody `json:"traits,omitempty" url:"-"`
}
