// This file was auto-generated by Fern from our API Definition.

package schematichq

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/schematichq/schematic-go/internal"
	time "time"
)

type CountComponentsRequest struct {
	Q *string `json:"-" url:"q,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type CreateComponentRequestBody struct {
	Ast        map[string]float64                   `json:"ast,omitempty" url:"-"`
	EntityType CreateComponentRequestBodyEntityType `json:"entity_type" url:"-"`
	Name       string                               `json:"name" url:"-"`
}

type ListComponentsRequest struct {
	Q *string `json:"-" url:"q,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type PreviewComponentDataRequest struct {
	CompanyID   *string `json:"-" url:"company_id,omitempty"`
	ComponentID *string `json:"-" url:"component_id,omitempty"`
}

type BillingCreditBundleView struct {
	BillingInvoiceID  *string                          `json:"billing_invoice_id,omitempty" url:"billing_invoice_id,omitempty"`
	BundleType        string                           `json:"bundle_type" url:"bundle_type"`
	CreatedAt         time.Time                        `json:"created_at" url:"created_at"`
	CreditDescription *string                          `json:"credit_description,omitempty" url:"credit_description,omitempty"`
	CreditIcon        *string                          `json:"credit_icon,omitempty" url:"credit_icon,omitempty"`
	CreditID          string                           `json:"credit_id" url:"credit_id"`
	CreditName        string                           `json:"credit_name" url:"credit_name"`
	ExpiryType        string                           `json:"expiry_type" url:"expiry_type"`
	ExpiryUnit        string                           `json:"expiry_unit" url:"expiry_unit"`
	ExpiryUnitCount   *int                             `json:"expiry_unit_count,omitempty" url:"expiry_unit_count,omitempty"`
	ID                string                           `json:"id" url:"id"`
	Name              string                           `json:"name" url:"name"`
	PluralName        *string                          `json:"plural_name,omitempty" url:"plural_name,omitempty"`
	Price             *BillingProductPriceResponseData `json:"price,omitempty" url:"price,omitempty"`
	Quantity          *int                             `json:"quantity,omitempty" url:"quantity,omitempty"`
	SingularName      *string                          `json:"singular_name,omitempty" url:"singular_name,omitempty"`
	Status            string                           `json:"status" url:"status"`
	UnitPrice         *BillingProductPriceResponseData `json:"unit_price,omitempty" url:"unit_price,omitempty"`
	UpdatedAt         time.Time                        `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BillingCreditBundleView) GetBillingInvoiceID() *string {
	if b == nil {
		return nil
	}
	return b.BillingInvoiceID
}

func (b *BillingCreditBundleView) GetBundleType() string {
	if b == nil {
		return ""
	}
	return b.BundleType
}

func (b *BillingCreditBundleView) GetCreatedAt() time.Time {
	if b == nil {
		return time.Time{}
	}
	return b.CreatedAt
}

func (b *BillingCreditBundleView) GetCreditDescription() *string {
	if b == nil {
		return nil
	}
	return b.CreditDescription
}

func (b *BillingCreditBundleView) GetCreditIcon() *string {
	if b == nil {
		return nil
	}
	return b.CreditIcon
}

func (b *BillingCreditBundleView) GetCreditID() string {
	if b == nil {
		return ""
	}
	return b.CreditID
}

func (b *BillingCreditBundleView) GetCreditName() string {
	if b == nil {
		return ""
	}
	return b.CreditName
}

func (b *BillingCreditBundleView) GetExpiryType() string {
	if b == nil {
		return ""
	}
	return b.ExpiryType
}

func (b *BillingCreditBundleView) GetExpiryUnit() string {
	if b == nil {
		return ""
	}
	return b.ExpiryUnit
}

func (b *BillingCreditBundleView) GetExpiryUnitCount() *int {
	if b == nil {
		return nil
	}
	return b.ExpiryUnitCount
}

func (b *BillingCreditBundleView) GetID() string {
	if b == nil {
		return ""
	}
	return b.ID
}

func (b *BillingCreditBundleView) GetName() string {
	if b == nil {
		return ""
	}
	return b.Name
}

func (b *BillingCreditBundleView) GetPluralName() *string {
	if b == nil {
		return nil
	}
	return b.PluralName
}

func (b *BillingCreditBundleView) GetPrice() *BillingProductPriceResponseData {
	if b == nil {
		return nil
	}
	return b.Price
}

func (b *BillingCreditBundleView) GetQuantity() *int {
	if b == nil {
		return nil
	}
	return b.Quantity
}

func (b *BillingCreditBundleView) GetSingularName() *string {
	if b == nil {
		return nil
	}
	return b.SingularName
}

func (b *BillingCreditBundleView) GetStatus() string {
	if b == nil {
		return ""
	}
	return b.Status
}

func (b *BillingCreditBundleView) GetUnitPrice() *BillingProductPriceResponseData {
	if b == nil {
		return nil
	}
	return b.UnitPrice
}

func (b *BillingCreditBundleView) GetUpdatedAt() time.Time {
	if b == nil {
		return time.Time{}
	}
	return b.UpdatedAt
}

func (b *BillingCreditBundleView) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillingCreditBundleView) UnmarshalJSON(data []byte) error {
	type embed BillingCreditBundleView
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BillingCreditBundleView(unmarshaler.embed)
	b.CreatedAt = unmarshaler.CreatedAt.Time()
	b.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillingCreditBundleView) MarshalJSON() ([]byte, error) {
	type embed BillingCreditBundleView
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*b),
		CreatedAt: internal.NewDateTime(b.CreatedAt),
		UpdatedAt: internal.NewDateTime(b.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (b *BillingCreditBundleView) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BillingProductPriceResponseData struct {
	BillingScheme     string    `json:"billing_scheme" url:"billing_scheme"`
	CreatedAt         time.Time `json:"created_at" url:"created_at"`
	Currency          string    `json:"currency" url:"currency"`
	ID                string    `json:"id" url:"id"`
	Interval          string    `json:"interval" url:"interval"`
	IsActive          bool      `json:"is_active" url:"is_active"`
	MeterID           *string   `json:"meter_id,omitempty" url:"meter_id,omitempty"`
	PackageSize       int       `json:"package_size" url:"package_size"`
	Price             int       `json:"price" url:"price"`
	PriceDecimal      *string   `json:"price_decimal,omitempty" url:"price_decimal,omitempty"`
	PriceExternalID   string    `json:"price_external_id" url:"price_external_id"`
	ProductExternalID string    `json:"product_external_id" url:"product_external_id"`
	TiersMode         *string   `json:"tiers_mode,omitempty" url:"tiers_mode,omitempty"`
	UpdatedAt         time.Time `json:"updated_at" url:"updated_at"`
	UsageType         string    `json:"usage_type" url:"usage_type"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BillingProductPriceResponseData) GetBillingScheme() string {
	if b == nil {
		return ""
	}
	return b.BillingScheme
}

func (b *BillingProductPriceResponseData) GetCreatedAt() time.Time {
	if b == nil {
		return time.Time{}
	}
	return b.CreatedAt
}

func (b *BillingProductPriceResponseData) GetCurrency() string {
	if b == nil {
		return ""
	}
	return b.Currency
}

func (b *BillingProductPriceResponseData) GetID() string {
	if b == nil {
		return ""
	}
	return b.ID
}

func (b *BillingProductPriceResponseData) GetInterval() string {
	if b == nil {
		return ""
	}
	return b.Interval
}

func (b *BillingProductPriceResponseData) GetIsActive() bool {
	if b == nil {
		return false
	}
	return b.IsActive
}

func (b *BillingProductPriceResponseData) GetMeterID() *string {
	if b == nil {
		return nil
	}
	return b.MeterID
}

func (b *BillingProductPriceResponseData) GetPackageSize() int {
	if b == nil {
		return 0
	}
	return b.PackageSize
}

func (b *BillingProductPriceResponseData) GetPrice() int {
	if b == nil {
		return 0
	}
	return b.Price
}

func (b *BillingProductPriceResponseData) GetPriceDecimal() *string {
	if b == nil {
		return nil
	}
	return b.PriceDecimal
}

func (b *BillingProductPriceResponseData) GetPriceExternalID() string {
	if b == nil {
		return ""
	}
	return b.PriceExternalID
}

func (b *BillingProductPriceResponseData) GetProductExternalID() string {
	if b == nil {
		return ""
	}
	return b.ProductExternalID
}

func (b *BillingProductPriceResponseData) GetTiersMode() *string {
	if b == nil {
		return nil
	}
	return b.TiersMode
}

func (b *BillingProductPriceResponseData) GetUpdatedAt() time.Time {
	if b == nil {
		return time.Time{}
	}
	return b.UpdatedAt
}

func (b *BillingProductPriceResponseData) GetUsageType() string {
	if b == nil {
		return ""
	}
	return b.UsageType
}

func (b *BillingProductPriceResponseData) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillingProductPriceResponseData) UnmarshalJSON(data []byte) error {
	type embed BillingProductPriceResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BillingProductPriceResponseData(unmarshaler.embed)
	b.CreatedAt = unmarshaler.CreatedAt.Time()
	b.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillingProductPriceResponseData) MarshalJSON() ([]byte, error) {
	type embed BillingProductPriceResponseData
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*b),
		CreatedAt: internal.NewDateTime(b.CreatedAt),
		UpdatedAt: internal.NewDateTime(b.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (b *BillingProductPriceResponseData) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type CompanyPlanDetailResponseData struct {
	AudienceType         *string                           `json:"audience_type,omitempty" url:"audience_type,omitempty"`
	BillingProduct       *BillingProductDetailResponseData `json:"billing_product,omitempty" url:"billing_product,omitempty"`
	ChargeType           string                            `json:"charge_type" url:"charge_type"`
	CompanyCanTrial      bool                              `json:"company_can_trial" url:"company_can_trial"`
	CompanyCount         int                               `json:"company_count" url:"company_count"`
	CompatiblePlanIDs    []string                          `json:"compatible_plan_ids,omitempty" url:"compatible_plan_ids,omitempty"`
	ControlledBy         string                            `json:"controlled_by" url:"controlled_by"`
	CreatedAt            time.Time                         `json:"created_at" url:"created_at"`
	Current              bool                              `json:"current" url:"current"`
	Custom               bool                              `json:"custom" url:"custom"`
	CustomPlanConfig     *CustomPlanConfig                 `json:"custom_plan_config,omitempty" url:"custom_plan_config,omitempty"`
	Description          string                            `json:"description" url:"description"`
	Entitlements         []*PlanEntitlementResponseData    `json:"entitlements,omitempty" url:"entitlements,omitempty"`
	Features             []*FeatureDetailResponseData      `json:"features,omitempty" url:"features,omitempty"`
	Icon                 string                            `json:"icon" url:"icon"`
	ID                   string                            `json:"id" url:"id"`
	IncludedCreditGrants []*PlanCreditGrantView            `json:"included_credit_grants,omitempty" url:"included_credit_grants,omitempty"`
	IsCustom             bool                              `json:"is_custom" url:"is_custom"`
	IsDefault            bool                              `json:"is_default" url:"is_default"`
	IsFree               bool                              `json:"is_free" url:"is_free"`
	IsTrialable          bool                              `json:"is_trialable" url:"is_trialable"`
	MonthlyPrice         *BillingPriceResponseData         `json:"monthly_price,omitempty" url:"monthly_price,omitempty"`
	Name                 string                            `json:"name" url:"name"`
	OneTimePrice         *BillingPriceResponseData         `json:"one_time_price,omitempty" url:"one_time_price,omitempty"`
	PlanType             string                            `json:"plan_type" url:"plan_type"`
	TrialDays            *int                              `json:"trial_days,omitempty" url:"trial_days,omitempty"`
	UpdatedAt            time.Time                         `json:"updated_at" url:"updated_at"`
	Valid                bool                              `json:"valid" url:"valid"`
	YearlyPrice          *BillingPriceResponseData         `json:"yearly_price,omitempty" url:"yearly_price,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CompanyPlanDetailResponseData) GetAudienceType() *string {
	if c == nil {
		return nil
	}
	return c.AudienceType
}

func (c *CompanyPlanDetailResponseData) GetBillingProduct() *BillingProductDetailResponseData {
	if c == nil {
		return nil
	}
	return c.BillingProduct
}

func (c *CompanyPlanDetailResponseData) GetChargeType() string {
	if c == nil {
		return ""
	}
	return c.ChargeType
}

func (c *CompanyPlanDetailResponseData) GetCompanyCanTrial() bool {
	if c == nil {
		return false
	}
	return c.CompanyCanTrial
}

func (c *CompanyPlanDetailResponseData) GetCompanyCount() int {
	if c == nil {
		return 0
	}
	return c.CompanyCount
}

func (c *CompanyPlanDetailResponseData) GetCompatiblePlanIDs() []string {
	if c == nil {
		return nil
	}
	return c.CompatiblePlanIDs
}

func (c *CompanyPlanDetailResponseData) GetControlledBy() string {
	if c == nil {
		return ""
	}
	return c.ControlledBy
}

func (c *CompanyPlanDetailResponseData) GetCreatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.CreatedAt
}

func (c *CompanyPlanDetailResponseData) GetCurrent() bool {
	if c == nil {
		return false
	}
	return c.Current
}

func (c *CompanyPlanDetailResponseData) GetCustom() bool {
	if c == nil {
		return false
	}
	return c.Custom
}

func (c *CompanyPlanDetailResponseData) GetCustomPlanConfig() *CustomPlanConfig {
	if c == nil {
		return nil
	}
	return c.CustomPlanConfig
}

func (c *CompanyPlanDetailResponseData) GetDescription() string {
	if c == nil {
		return ""
	}
	return c.Description
}

func (c *CompanyPlanDetailResponseData) GetEntitlements() []*PlanEntitlementResponseData {
	if c == nil {
		return nil
	}
	return c.Entitlements
}

func (c *CompanyPlanDetailResponseData) GetFeatures() []*FeatureDetailResponseData {
	if c == nil {
		return nil
	}
	return c.Features
}

func (c *CompanyPlanDetailResponseData) GetIcon() string {
	if c == nil {
		return ""
	}
	return c.Icon
}

func (c *CompanyPlanDetailResponseData) GetID() string {
	if c == nil {
		return ""
	}
	return c.ID
}

func (c *CompanyPlanDetailResponseData) GetIncludedCreditGrants() []*PlanCreditGrantView {
	if c == nil {
		return nil
	}
	return c.IncludedCreditGrants
}

func (c *CompanyPlanDetailResponseData) GetIsCustom() bool {
	if c == nil {
		return false
	}
	return c.IsCustom
}

func (c *CompanyPlanDetailResponseData) GetIsDefault() bool {
	if c == nil {
		return false
	}
	return c.IsDefault
}

func (c *CompanyPlanDetailResponseData) GetIsFree() bool {
	if c == nil {
		return false
	}
	return c.IsFree
}

func (c *CompanyPlanDetailResponseData) GetIsTrialable() bool {
	if c == nil {
		return false
	}
	return c.IsTrialable
}

func (c *CompanyPlanDetailResponseData) GetMonthlyPrice() *BillingPriceResponseData {
	if c == nil {
		return nil
	}
	return c.MonthlyPrice
}

func (c *CompanyPlanDetailResponseData) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *CompanyPlanDetailResponseData) GetOneTimePrice() *BillingPriceResponseData {
	if c == nil {
		return nil
	}
	return c.OneTimePrice
}

func (c *CompanyPlanDetailResponseData) GetPlanType() string {
	if c == nil {
		return ""
	}
	return c.PlanType
}

func (c *CompanyPlanDetailResponseData) GetTrialDays() *int {
	if c == nil {
		return nil
	}
	return c.TrialDays
}

func (c *CompanyPlanDetailResponseData) GetUpdatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.UpdatedAt
}

func (c *CompanyPlanDetailResponseData) GetValid() bool {
	if c == nil {
		return false
	}
	return c.Valid
}

func (c *CompanyPlanDetailResponseData) GetYearlyPrice() *BillingPriceResponseData {
	if c == nil {
		return nil
	}
	return c.YearlyPrice
}

func (c *CompanyPlanDetailResponseData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CompanyPlanDetailResponseData) UnmarshalJSON(data []byte) error {
	type embed CompanyPlanDetailResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CompanyPlanDetailResponseData(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CompanyPlanDetailResponseData) MarshalJSON() ([]byte, error) {
	type embed CompanyPlanDetailResponseData
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*c),
		CreatedAt: internal.NewDateTime(c.CreatedAt),
		UpdatedAt: internal.NewDateTime(c.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *CompanyPlanDetailResponseData) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ComponentCapabilities struct {
	BadgeVisibility bool `json:"badge_visibility" url:"badge_visibility"`
	Checkout        bool `json:"checkout" url:"checkout"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ComponentCapabilities) GetBadgeVisibility() bool {
	if c == nil {
		return false
	}
	return c.BadgeVisibility
}

func (c *ComponentCapabilities) GetCheckout() bool {
	if c == nil {
		return false
	}
	return c.Checkout
}

func (c *ComponentCapabilities) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ComponentCapabilities) UnmarshalJSON(data []byte) error {
	type unmarshaler ComponentCapabilities
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ComponentCapabilities(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ComponentCapabilities) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The returned resource
type ComponentPreviewResponseData struct {
	ActiveAddOns                 []*CompanyPlanDetailResponseData     `json:"active_add_ons,omitempty" url:"active_add_ons,omitempty"`
	ActivePlans                  []*CompanyPlanDetailResponseData     `json:"active_plans,omitempty" url:"active_plans,omitempty"`
	ActiveUsageBasedEntitlements []*UsageBasedEntitlementResponseData `json:"active_usage_based_entitlements,omitempty" url:"active_usage_based_entitlements,omitempty"`
	AddOnCompatibilities         []*CompatiblePlans                   `json:"add_on_compatibilities,omitempty" url:"add_on_compatibilities,omitempty"`
	Capabilities                 *ComponentCapabilities               `json:"capabilities,omitempty" url:"capabilities,omitempty"`
	Company                      *CompanyDetailResponseData           `json:"company,omitempty" url:"company,omitempty"`
	Component                    *ComponentResponseData               `json:"component,omitempty" url:"component,omitempty"`
	CreditBundles                []*BillingCreditBundleView           `json:"credit_bundles,omitempty" url:"credit_bundles,omitempty"`
	CreditGrants                 []*CreditCompanyGrantView            `json:"credit_grants,omitempty" url:"credit_grants,omitempty"`
	DefaultPlan                  *PlanDetailResponseData              `json:"default_plan,omitempty" url:"default_plan,omitempty"`
	FeatureUsage                 *FeatureUsageDetailResponseData      `json:"feature_usage,omitempty" url:"feature_usage,omitempty"`
	Invoices                     []*InvoiceResponseData               `json:"invoices,omitempty" url:"invoices,omitempty"`
	ShowPeriodToggle             bool                                 `json:"show_period_toggle" url:"show_period_toggle"`
	StripeEmbed                  *StripeEmbedInfo                     `json:"stripe_embed,omitempty" url:"stripe_embed,omitempty"`
	Subscription                 *CompanySubscriptionResponseData     `json:"subscription,omitempty" url:"subscription,omitempty"`
	TrialPaymentMethodRequired   *bool                                `json:"trial_payment_method_required,omitempty" url:"trial_payment_method_required,omitempty"`
	UpcomingInvoice              *InvoiceResponseData                 `json:"upcoming_invoice,omitempty" url:"upcoming_invoice,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ComponentPreviewResponseData) GetActiveAddOns() []*CompanyPlanDetailResponseData {
	if c == nil {
		return nil
	}
	return c.ActiveAddOns
}

func (c *ComponentPreviewResponseData) GetActivePlans() []*CompanyPlanDetailResponseData {
	if c == nil {
		return nil
	}
	return c.ActivePlans
}

func (c *ComponentPreviewResponseData) GetActiveUsageBasedEntitlements() []*UsageBasedEntitlementResponseData {
	if c == nil {
		return nil
	}
	return c.ActiveUsageBasedEntitlements
}

func (c *ComponentPreviewResponseData) GetAddOnCompatibilities() []*CompatiblePlans {
	if c == nil {
		return nil
	}
	return c.AddOnCompatibilities
}

func (c *ComponentPreviewResponseData) GetCapabilities() *ComponentCapabilities {
	if c == nil {
		return nil
	}
	return c.Capabilities
}

func (c *ComponentPreviewResponseData) GetCompany() *CompanyDetailResponseData {
	if c == nil {
		return nil
	}
	return c.Company
}

func (c *ComponentPreviewResponseData) GetComponent() *ComponentResponseData {
	if c == nil {
		return nil
	}
	return c.Component
}

func (c *ComponentPreviewResponseData) GetCreditBundles() []*BillingCreditBundleView {
	if c == nil {
		return nil
	}
	return c.CreditBundles
}

func (c *ComponentPreviewResponseData) GetCreditGrants() []*CreditCompanyGrantView {
	if c == nil {
		return nil
	}
	return c.CreditGrants
}

func (c *ComponentPreviewResponseData) GetDefaultPlan() *PlanDetailResponseData {
	if c == nil {
		return nil
	}
	return c.DefaultPlan
}

func (c *ComponentPreviewResponseData) GetFeatureUsage() *FeatureUsageDetailResponseData {
	if c == nil {
		return nil
	}
	return c.FeatureUsage
}

func (c *ComponentPreviewResponseData) GetInvoices() []*InvoiceResponseData {
	if c == nil {
		return nil
	}
	return c.Invoices
}

func (c *ComponentPreviewResponseData) GetShowPeriodToggle() bool {
	if c == nil {
		return false
	}
	return c.ShowPeriodToggle
}

func (c *ComponentPreviewResponseData) GetStripeEmbed() *StripeEmbedInfo {
	if c == nil {
		return nil
	}
	return c.StripeEmbed
}

func (c *ComponentPreviewResponseData) GetSubscription() *CompanySubscriptionResponseData {
	if c == nil {
		return nil
	}
	return c.Subscription
}

func (c *ComponentPreviewResponseData) GetTrialPaymentMethodRequired() *bool {
	if c == nil {
		return nil
	}
	return c.TrialPaymentMethodRequired
}

func (c *ComponentPreviewResponseData) GetUpcomingInvoice() *InvoiceResponseData {
	if c == nil {
		return nil
	}
	return c.UpcomingInvoice
}

func (c *ComponentPreviewResponseData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ComponentPreviewResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler ComponentPreviewResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ComponentPreviewResponseData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ComponentPreviewResponseData) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The updated resource
type ComponentResponseData struct {
	Ast       map[string]float64 `json:"ast,omitempty" url:"ast,omitempty"`
	CreatedAt time.Time          `json:"created_at" url:"created_at"`
	ID        string             `json:"id" url:"id"`
	Name      string             `json:"name" url:"name"`
	State     string             `json:"state" url:"state"`
	Type      string             `json:"type" url:"type"`
	UpdatedAt time.Time          `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *ComponentResponseData) GetAst() map[string]float64 {
	if c == nil {
		return nil
	}
	return c.Ast
}

func (c *ComponentResponseData) GetCreatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.CreatedAt
}

func (c *ComponentResponseData) GetID() string {
	if c == nil {
		return ""
	}
	return c.ID
}

func (c *ComponentResponseData) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *ComponentResponseData) GetState() string {
	if c == nil {
		return ""
	}
	return c.State
}

func (c *ComponentResponseData) GetType() string {
	if c == nil {
		return ""
	}
	return c.Type
}

func (c *ComponentResponseData) GetUpdatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.UpdatedAt
}

func (c *ComponentResponseData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ComponentResponseData) UnmarshalJSON(data []byte) error {
	type embed ComponentResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ComponentResponseData(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *ComponentResponseData) MarshalJSON() ([]byte, error) {
	type embed ComponentResponseData
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*c),
		CreatedAt: internal.NewDateTime(c.CreatedAt),
		UpdatedAt: internal.NewDateTime(c.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *ComponentResponseData) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreditCompanyGrantView struct {
	BillingCreditBundleID *string                          `json:"billing_credit_bundle_id,omitempty" url:"billing_credit_bundle_id,omitempty"`
	BillingCreditID       string                           `json:"billing_credit_id" url:"billing_credit_id"`
	CompanyID             string                           `json:"company_id" url:"company_id"`
	CompanyName           string                           `json:"company_name" url:"company_name"`
	CreatedAt             time.Time                        `json:"created_at" url:"created_at"`
	CreditDescription     string                           `json:"credit_description" url:"credit_description"`
	CreditIcon            *string                          `json:"credit_icon,omitempty" url:"credit_icon,omitempty"`
	CreditName            string                           `json:"credit_name" url:"credit_name"`
	ExpiresAt             *time.Time                       `json:"expires_at,omitempty" url:"expires_at,omitempty"`
	GrantReason           string                           `json:"grant_reason" url:"grant_reason"`
	ID                    string                           `json:"id" url:"id"`
	PlanID                *string                          `json:"plan_id,omitempty" url:"plan_id,omitempty"`
	PlanName              *string                          `json:"plan_name,omitempty" url:"plan_name,omitempty"`
	PluralName            *string                          `json:"plural_name,omitempty" url:"plural_name,omitempty"`
	Price                 *BillingProductPriceResponseData `json:"price,omitempty" url:"price,omitempty"`
	Quantity              int                              `json:"quantity" url:"quantity"`
	QuantityRemaining     float64                          `json:"quantity_remaining" url:"quantity_remaining"`
	QuantityUsed          float64                          `json:"quantity_used" url:"quantity_used"`
	SingularName          *string                          `json:"singular_name,omitempty" url:"singular_name,omitempty"`
	SourceLabel           string                           `json:"source_label" url:"source_label"`
	UpdatedAt             time.Time                        `json:"updated_at" url:"updated_at"`
	ValidFrom             *time.Time                       `json:"valid_from,omitempty" url:"valid_from,omitempty"`
	ZeroedOutDate         *time.Time                       `json:"zeroed_out_date,omitempty" url:"zeroed_out_date,omitempty"`
	ZeroedOutReason       *string                          `json:"zeroed_out_reason,omitempty" url:"zeroed_out_reason,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreditCompanyGrantView) GetBillingCreditBundleID() *string {
	if c == nil {
		return nil
	}
	return c.BillingCreditBundleID
}

func (c *CreditCompanyGrantView) GetBillingCreditID() string {
	if c == nil {
		return ""
	}
	return c.BillingCreditID
}

func (c *CreditCompanyGrantView) GetCompanyID() string {
	if c == nil {
		return ""
	}
	return c.CompanyID
}

func (c *CreditCompanyGrantView) GetCompanyName() string {
	if c == nil {
		return ""
	}
	return c.CompanyName
}

func (c *CreditCompanyGrantView) GetCreatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.CreatedAt
}

func (c *CreditCompanyGrantView) GetCreditDescription() string {
	if c == nil {
		return ""
	}
	return c.CreditDescription
}

func (c *CreditCompanyGrantView) GetCreditIcon() *string {
	if c == nil {
		return nil
	}
	return c.CreditIcon
}

func (c *CreditCompanyGrantView) GetCreditName() string {
	if c == nil {
		return ""
	}
	return c.CreditName
}

func (c *CreditCompanyGrantView) GetExpiresAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.ExpiresAt
}

func (c *CreditCompanyGrantView) GetGrantReason() string {
	if c == nil {
		return ""
	}
	return c.GrantReason
}

func (c *CreditCompanyGrantView) GetID() string {
	if c == nil {
		return ""
	}
	return c.ID
}

func (c *CreditCompanyGrantView) GetPlanID() *string {
	if c == nil {
		return nil
	}
	return c.PlanID
}

func (c *CreditCompanyGrantView) GetPlanName() *string {
	if c == nil {
		return nil
	}
	return c.PlanName
}

func (c *CreditCompanyGrantView) GetPluralName() *string {
	if c == nil {
		return nil
	}
	return c.PluralName
}

func (c *CreditCompanyGrantView) GetPrice() *BillingProductPriceResponseData {
	if c == nil {
		return nil
	}
	return c.Price
}

func (c *CreditCompanyGrantView) GetQuantity() int {
	if c == nil {
		return 0
	}
	return c.Quantity
}

func (c *CreditCompanyGrantView) GetQuantityRemaining() float64 {
	if c == nil {
		return 0
	}
	return c.QuantityRemaining
}

func (c *CreditCompanyGrantView) GetQuantityUsed() float64 {
	if c == nil {
		return 0
	}
	return c.QuantityUsed
}

func (c *CreditCompanyGrantView) GetSingularName() *string {
	if c == nil {
		return nil
	}
	return c.SingularName
}

func (c *CreditCompanyGrantView) GetSourceLabel() string {
	if c == nil {
		return ""
	}
	return c.SourceLabel
}

func (c *CreditCompanyGrantView) GetUpdatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.UpdatedAt
}

func (c *CreditCompanyGrantView) GetValidFrom() *time.Time {
	if c == nil {
		return nil
	}
	return c.ValidFrom
}

func (c *CreditCompanyGrantView) GetZeroedOutDate() *time.Time {
	if c == nil {
		return nil
	}
	return c.ZeroedOutDate
}

func (c *CreditCompanyGrantView) GetZeroedOutReason() *string {
	if c == nil {
		return nil
	}
	return c.ZeroedOutReason
}

func (c *CreditCompanyGrantView) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreditCompanyGrantView) UnmarshalJSON(data []byte) error {
	type embed CreditCompanyGrantView
	var unmarshaler = struct {
		embed
		CreatedAt     *internal.DateTime `json:"created_at"`
		ExpiresAt     *internal.DateTime `json:"expires_at,omitempty"`
		UpdatedAt     *internal.DateTime `json:"updated_at"`
		ValidFrom     *internal.DateTime `json:"valid_from,omitempty"`
		ZeroedOutDate *internal.DateTime `json:"zeroed_out_date,omitempty"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CreditCompanyGrantView(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.ExpiresAt = unmarshaler.ExpiresAt.TimePtr()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()
	c.ValidFrom = unmarshaler.ValidFrom.TimePtr()
	c.ZeroedOutDate = unmarshaler.ZeroedOutDate.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreditCompanyGrantView) MarshalJSON() ([]byte, error) {
	type embed CreditCompanyGrantView
	var marshaler = struct {
		embed
		CreatedAt     *internal.DateTime `json:"created_at"`
		ExpiresAt     *internal.DateTime `json:"expires_at,omitempty"`
		UpdatedAt     *internal.DateTime `json:"updated_at"`
		ValidFrom     *internal.DateTime `json:"valid_from,omitempty"`
		ZeroedOutDate *internal.DateTime `json:"zeroed_out_date,omitempty"`
	}{
		embed:         embed(*c),
		CreatedAt:     internal.NewDateTime(c.CreatedAt),
		ExpiresAt:     internal.NewOptionalDateTime(c.ExpiresAt),
		UpdatedAt:     internal.NewDateTime(c.UpdatedAt),
		ValidFrom:     internal.NewOptionalDateTime(c.ValidFrom),
		ZeroedOutDate: internal.NewOptionalDateTime(c.ZeroedOutDate),
	}
	return json.Marshal(marshaler)
}

func (c *CreditCompanyGrantView) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type PlanCreditGrantView struct {
	CreatedAt         time.Time `json:"created_at" url:"created_at"`
	CreditAmount      int       `json:"credit_amount" url:"credit_amount"`
	CreditDescription string    `json:"credit_description" url:"credit_description"`
	CreditIcon        *string   `json:"credit_icon,omitempty" url:"credit_icon,omitempty"`
	CreditID          string    `json:"credit_id" url:"credit_id"`
	CreditName        string    `json:"credit_name" url:"credit_name"`
	ID                string    `json:"id" url:"id"`
	PlanID            string    `json:"plan_id" url:"plan_id"`
	PlanName          string    `json:"plan_name" url:"plan_name"`
	PluralName        *string   `json:"plural_name,omitempty" url:"plural_name,omitempty"`
	ResetCadence      string    `json:"reset_cadence" url:"reset_cadence"`
	ResetStart        string    `json:"reset_start" url:"reset_start"`
	SingularName      *string   `json:"singular_name,omitempty" url:"singular_name,omitempty"`
	UpdatedAt         time.Time `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PlanCreditGrantView) GetCreatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.CreatedAt
}

func (p *PlanCreditGrantView) GetCreditAmount() int {
	if p == nil {
		return 0
	}
	return p.CreditAmount
}

func (p *PlanCreditGrantView) GetCreditDescription() string {
	if p == nil {
		return ""
	}
	return p.CreditDescription
}

func (p *PlanCreditGrantView) GetCreditIcon() *string {
	if p == nil {
		return nil
	}
	return p.CreditIcon
}

func (p *PlanCreditGrantView) GetCreditID() string {
	if p == nil {
		return ""
	}
	return p.CreditID
}

func (p *PlanCreditGrantView) GetCreditName() string {
	if p == nil {
		return ""
	}
	return p.CreditName
}

func (p *PlanCreditGrantView) GetID() string {
	if p == nil {
		return ""
	}
	return p.ID
}

func (p *PlanCreditGrantView) GetPlanID() string {
	if p == nil {
		return ""
	}
	return p.PlanID
}

func (p *PlanCreditGrantView) GetPlanName() string {
	if p == nil {
		return ""
	}
	return p.PlanName
}

func (p *PlanCreditGrantView) GetPluralName() *string {
	if p == nil {
		return nil
	}
	return p.PluralName
}

func (p *PlanCreditGrantView) GetResetCadence() string {
	if p == nil {
		return ""
	}
	return p.ResetCadence
}

func (p *PlanCreditGrantView) GetResetStart() string {
	if p == nil {
		return ""
	}
	return p.ResetStart
}

func (p *PlanCreditGrantView) GetSingularName() *string {
	if p == nil {
		return nil
	}
	return p.SingularName
}

func (p *PlanCreditGrantView) GetUpdatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.UpdatedAt
}

func (p *PlanCreditGrantView) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PlanCreditGrantView) UnmarshalJSON(data []byte) error {
	type embed PlanCreditGrantView
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PlanCreditGrantView(unmarshaler.embed)
	p.CreatedAt = unmarshaler.CreatedAt.Time()
	p.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PlanCreditGrantView) MarshalJSON() ([]byte, error) {
	type embed PlanCreditGrantView
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*p),
		CreatedAt: internal.NewDateTime(p.CreatedAt),
		UpdatedAt: internal.NewDateTime(p.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (p *PlanCreditGrantView) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type StripeEmbedInfo struct {
	AccountID               *string `json:"account_id,omitempty" url:"account_id,omitempty"`
	PublishableKey          *string `json:"publishable_key,omitempty" url:"publishable_key,omitempty"`
	SchematicPublishableKey string  `json:"schematic_publishable_key" url:"schematic_publishable_key"`
	SetupIntentClientSecret *string `json:"setup_intent_client_secret,omitempty" url:"setup_intent_client_secret,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *StripeEmbedInfo) GetAccountID() *string {
	if s == nil {
		return nil
	}
	return s.AccountID
}

func (s *StripeEmbedInfo) GetPublishableKey() *string {
	if s == nil {
		return nil
	}
	return s.PublishableKey
}

func (s *StripeEmbedInfo) GetSchematicPublishableKey() string {
	if s == nil {
		return ""
	}
	return s.SchematicPublishableKey
}

func (s *StripeEmbedInfo) GetSetupIntentClientSecret() *string {
	if s == nil {
		return nil
	}
	return s.SetupIntentClientSecret
}

func (s *StripeEmbedInfo) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StripeEmbedInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler StripeEmbedInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StripeEmbedInfo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *StripeEmbedInfo) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Input parameters
type CountComponentsParams struct {
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Q      *string `json:"q,omitempty" url:"q,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CountComponentsParams) GetLimit() *int {
	if c == nil {
		return nil
	}
	return c.Limit
}

func (c *CountComponentsParams) GetOffset() *int {
	if c == nil {
		return nil
	}
	return c.Offset
}

func (c *CountComponentsParams) GetQ() *string {
	if c == nil {
		return nil
	}
	return c.Q
}

func (c *CountComponentsParams) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountComponentsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler CountComponentsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountComponentsParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountComponentsParams) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CountComponentsResponse struct {
	Data *CountResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *CountComponentsParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CountComponentsResponse) GetData() *CountResponse {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *CountComponentsResponse) GetParams() *CountComponentsParams {
	if c == nil {
		return nil
	}
	return c.Params
}

func (c *CountComponentsResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountComponentsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CountComponentsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountComponentsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountComponentsResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateComponentRequestBodyEntityType string

const (
	CreateComponentRequestBodyEntityTypeEntitlement CreateComponentRequestBodyEntityType = "entitlement"
	CreateComponentRequestBodyEntityTypeBilling     CreateComponentRequestBodyEntityType = "billing"
)

func NewCreateComponentRequestBodyEntityTypeFromString(s string) (CreateComponentRequestBodyEntityType, error) {
	switch s {
	case "entitlement":
		return CreateComponentRequestBodyEntityTypeEntitlement, nil
	case "billing":
		return CreateComponentRequestBodyEntityTypeBilling, nil
	}
	var t CreateComponentRequestBodyEntityType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CreateComponentRequestBodyEntityType) Ptr() *CreateComponentRequestBodyEntityType {
	return &c
}

type CreateComponentResponse struct {
	Data *ComponentResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateComponentResponse) GetData() *ComponentResponseData {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *CreateComponentResponse) GetParams() map[string]interface{} {
	if c == nil {
		return nil
	}
	return c.Params
}

func (c *CreateComponentResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateComponentResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateComponentResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateComponentResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateComponentResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DeleteComponentResponse struct {
	Data *DeleteResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeleteComponentResponse) GetData() *DeleteResponse {
	if d == nil {
		return nil
	}
	return d.Data
}

func (d *DeleteComponentResponse) GetParams() map[string]interface{} {
	if d == nil {
		return nil
	}
	return d.Params
}

func (d *DeleteComponentResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteComponentResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteComponentResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteComponentResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteComponentResponse) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type GetComponentResponse struct {
	Data *ComponentResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetComponentResponse) GetData() *ComponentResponseData {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GetComponentResponse) GetParams() map[string]interface{} {
	if g == nil {
		return nil
	}
	return g.Params
}

func (g *GetComponentResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetComponentResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetComponentResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetComponentResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetComponentResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Input parameters
type ListComponentsParams struct {
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Q      *string `json:"q,omitempty" url:"q,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListComponentsParams) GetLimit() *int {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListComponentsParams) GetOffset() *int {
	if l == nil {
		return nil
	}
	return l.Offset
}

func (l *ListComponentsParams) GetQ() *string {
	if l == nil {
		return nil
	}
	return l.Q
}

func (l *ListComponentsParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListComponentsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListComponentsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListComponentsParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListComponentsParams) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListComponentsResponse struct {
	// The returned resources
	Data []*ComponentResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListComponentsParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListComponentsResponse) GetData() []*ComponentResponseData {
	if l == nil {
		return nil
	}
	return l.Data
}

func (l *ListComponentsResponse) GetParams() *ListComponentsParams {
	if l == nil {
		return nil
	}
	return l.Params
}

func (l *ListComponentsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListComponentsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListComponentsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListComponentsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListComponentsResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type PreviewComponentDataParams struct {
	CompanyID   *string `json:"company_id,omitempty" url:"company_id,omitempty"`
	ComponentID *string `json:"component_id,omitempty" url:"component_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PreviewComponentDataParams) GetCompanyID() *string {
	if p == nil {
		return nil
	}
	return p.CompanyID
}

func (p *PreviewComponentDataParams) GetComponentID() *string {
	if p == nil {
		return nil
	}
	return p.ComponentID
}

func (p *PreviewComponentDataParams) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PreviewComponentDataParams) UnmarshalJSON(data []byte) error {
	type unmarshaler PreviewComponentDataParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PreviewComponentDataParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PreviewComponentDataParams) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PreviewComponentDataResponse struct {
	Data *ComponentPreviewResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *PreviewComponentDataParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PreviewComponentDataResponse) GetData() *ComponentPreviewResponseData {
	if p == nil {
		return nil
	}
	return p.Data
}

func (p *PreviewComponentDataResponse) GetParams() *PreviewComponentDataParams {
	if p == nil {
		return nil
	}
	return p.Params
}

func (p *PreviewComponentDataResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PreviewComponentDataResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PreviewComponentDataResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PreviewComponentDataResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PreviewComponentDataResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type UpdateComponentRequestBodyEntityType string

const (
	UpdateComponentRequestBodyEntityTypeEntitlement UpdateComponentRequestBodyEntityType = "entitlement"
	UpdateComponentRequestBodyEntityTypeBilling     UpdateComponentRequestBodyEntityType = "billing"
)

func NewUpdateComponentRequestBodyEntityTypeFromString(s string) (UpdateComponentRequestBodyEntityType, error) {
	switch s {
	case "entitlement":
		return UpdateComponentRequestBodyEntityTypeEntitlement, nil
	case "billing":
		return UpdateComponentRequestBodyEntityTypeBilling, nil
	}
	var t UpdateComponentRequestBodyEntityType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UpdateComponentRequestBodyEntityType) Ptr() *UpdateComponentRequestBodyEntityType {
	return &u
}

type UpdateComponentRequestBodyState string

const (
	UpdateComponentRequestBodyStateDraft UpdateComponentRequestBodyState = "draft"
	UpdateComponentRequestBodyStateLive  UpdateComponentRequestBodyState = "live"
)

func NewUpdateComponentRequestBodyStateFromString(s string) (UpdateComponentRequestBodyState, error) {
	switch s {
	case "draft":
		return UpdateComponentRequestBodyStateDraft, nil
	case "live":
		return UpdateComponentRequestBodyStateLive, nil
	}
	var t UpdateComponentRequestBodyState
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UpdateComponentRequestBodyState) Ptr() *UpdateComponentRequestBodyState {
	return &u
}

type UpdateComponentResponse struct {
	Data *ComponentResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateComponentResponse) GetData() *ComponentResponseData {
	if u == nil {
		return nil
	}
	return u.Data
}

func (u *UpdateComponentResponse) GetParams() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.Params
}

func (u *UpdateComponentResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateComponentResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateComponentResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateComponentResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateComponentResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateComponentRequestBody struct {
	Ast        map[string]float64                    `json:"ast,omitempty" url:"-"`
	EntityType *UpdateComponentRequestBodyEntityType `json:"entity_type,omitempty" url:"-"`
	Name       *string                               `json:"name,omitempty" url:"-"`
	State      *UpdateComponentRequestBodyState      `json:"state,omitempty" url:"-"`
}
