// This file was auto-generated by Fern from our API Definition.

package schematichq

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/schematichq/schematic-go/internal"
	time "time"
)

type CountBillingCreditsRequest struct {
	IDs  []*string `json:"-" url:"ids,omitempty"`
	Name *string   `json:"-" url:"name,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type CountBillingCreditsGrantsRequest struct {
	CreditID *string   `json:"-" url:"credit_id,omitempty"`
	IDs      []*string `json:"-" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type CountBillingPlanCreditGrantsRequest struct {
	CreditID *string   `json:"-" url:"credit_id,omitempty"`
	PlanID   *string   `json:"-" url:"plan_id,omitempty"`
	PlanIDs  []*string `json:"-" url:"plan_ids,omitempty"`
	IDs      []*string `json:"-" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type CountCreditBundlesRequest struct {
	IDs        []*string                        `json:"-" url:"ids,omitempty"`
	CreditID   *string                          `json:"-" url:"credit_id,omitempty"`
	Status     *CountCreditBundlesRequestStatus `json:"-" url:"status,omitempty"`
	BundleType *string                          `json:"-" url:"bundle_type,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type CreateBillingCreditRequestBody struct {
	BurnStrategy           *CreateBillingCreditRequestBodyBurnStrategy          `json:"burn_strategy,omitempty" url:"-"`
	Currency               string                                               `json:"currency" url:"-"`
	DefaultExpiryUnit      *string                                              `json:"default_expiry_unit,omitempty" url:"-"`
	DefaultExpiryUnitCount *int                                                 `json:"default_expiry_unit_count,omitempty" url:"-"`
	DefaultRolloverPolicy  *CreateBillingCreditRequestBodyDefaultRolloverPolicy `json:"default_rollover_policy,omitempty" url:"-"`
	Description            string                                               `json:"description" url:"-"`
	Icon                   *string                                              `json:"icon,omitempty" url:"-"`
	Name                   string                                               `json:"name" url:"-"`
	PerUnitPrice           *int                                                 `json:"per_unit_price,omitempty" url:"-"`
	PerUnitPriceDecimal    *string                                              `json:"per_unit_price_decimal,omitempty" url:"-"`
	PluralName             *string                                              `json:"plural_name,omitempty" url:"-"`
	SingularName           *string                                              `json:"singular_name,omitempty" url:"-"`
}

type CreateBillingPlanCreditGrantRequestBody struct {
	CreditAmount    int                                                 `json:"credit_amount" url:"-"`
	CreditID        string                                              `json:"credit_id" url:"-"`
	ExpiryType      *CreateBillingPlanCreditGrantRequestBodyExpiryType  `json:"expiry_type,omitempty" url:"-"`
	ExpiryUnit      *CreateBillingPlanCreditGrantRequestBodyExpiryUnit  `json:"expiry_unit,omitempty" url:"-"`
	ExpiryUnitCount *int                                                `json:"expiry_unit_count,omitempty" url:"-"`
	PlanID          string                                              `json:"plan_id" url:"-"`
	ResetCadence    CreateBillingPlanCreditGrantRequestBodyResetCadence `json:"reset_cadence" url:"-"`
	ResetStart      CreateBillingPlanCreditGrantRequestBodyResetStart   `json:"reset_start" url:"-"`
	ResetType       *CreateBillingPlanCreditGrantRequestBodyResetType   `json:"reset_type,omitempty" url:"-"`
}

type CreateCreditBundleRequestBody struct {
	BundleName          string                                   `json:"bundle_name" url:"-"`
	BundleType          *string                                  `json:"bundle_type,omitempty" url:"-"`
	CreditID            string                                   `json:"credit_id" url:"-"`
	Currency            string                                   `json:"currency" url:"-"`
	ExpiryType          *CreateCreditBundleRequestBodyExpiryType `json:"expiry_type,omitempty" url:"-"`
	ExpiryUnit          *CreateCreditBundleRequestBodyExpiryUnit `json:"expiry_unit,omitempty" url:"-"`
	ExpiryUnitCount     *int                                     `json:"expiry_unit_count,omitempty" url:"-"`
	PricePerUnit        int                                      `json:"price_per_unit" url:"-"`
	PricePerUnitDecimal *string                                  `json:"price_per_unit_decimal,omitempty" url:"-"`
	Quantity            *int                                     `json:"quantity,omitempty" url:"-"`
	Status              *CreateCreditBundleRequestBodyStatus     `json:"status,omitempty" url:"-"`
}

type CreateCompanyCreditGrant struct {
	BillingPeriodsCount *int                                `json:"billing_periods_count,omitempty" url:"-"`
	CompanyID           string                              `json:"company_id" url:"-"`
	CreditID            string                              `json:"credit_id" url:"-"`
	ExpiresAt           *time.Time                          `json:"expires_at,omitempty" url:"-"`
	ExpiryType          *CreateCompanyCreditGrantExpiryType `json:"expiry_type,omitempty" url:"-"`
	ExpiryUnit          *CreateCompanyCreditGrantExpiryUnit `json:"expiry_unit,omitempty" url:"-"`
	ExpiryUnitCount     *int                                `json:"expiry_unit_count,omitempty" url:"-"`
	Quantity            int                                 `json:"quantity" url:"-"`
	Reason              string                              `json:"reason" url:"-"`
}

func (c *CreateCompanyCreditGrant) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateCompanyCreditGrant
	var body unmarshaler
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	*c = CreateCompanyCreditGrant(body)
	return nil
}

func (c *CreateCompanyCreditGrant) MarshalJSON() ([]byte, error) {
	type embed CreateCompanyCreditGrant
	var marshaler = struct {
		embed
		ExpiresAt *internal.DateTime `json:"expires_at,omitempty"`
	}{
		embed:     embed(*c),
		ExpiresAt: internal.NewOptionalDateTime(c.ExpiresAt),
	}
	return json.Marshal(marshaler)
}

type ListBillingCreditsRequest struct {
	IDs  []*string `json:"-" url:"ids,omitempty"`
	Name *string   `json:"-" url:"name,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type ListBillingPlanCreditGrantsRequest struct {
	CreditID *string   `json:"-" url:"credit_id,omitempty"`
	PlanID   *string   `json:"-" url:"plan_id,omitempty"`
	PlanIDs  []*string `json:"-" url:"plan_ids,omitempty"`
	IDs      []*string `json:"-" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type ListCompanyGrantsRequest struct {
	CompanyID *string                        `json:"-" url:"company_id,omitempty"`
	Order     *ListCompanyGrantsRequestOrder `json:"-" url:"order,omitempty"`
	Dir       *ListCompanyGrantsRequestDir   `json:"-" url:"dir,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type ListCreditBundlesRequest struct {
	IDs        []*string                       `json:"-" url:"ids,omitempty"`
	CreditID   *string                         `json:"-" url:"credit_id,omitempty"`
	Status     *ListCreditBundlesRequestStatus `json:"-" url:"status,omitempty"`
	BundleType *string                         `json:"-" url:"bundle_type,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type ListGrantsForCreditRequest struct {
	CreditID *string   `json:"-" url:"credit_id,omitempty"`
	IDs      []*string `json:"-" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type BillingCreditGrantResponseData struct {
	CompanyID         string                    `json:"company_id" url:"company_id"`
	CompanyName       string                    `json:"company_name" url:"company_name"`
	CreatedAt         time.Time                 `json:"created_at" url:"created_at"`
	CreditIcon        *string                   `json:"credit_icon,omitempty" url:"credit_icon,omitempty"`
	CreditName        string                    `json:"credit_name" url:"credit_name"`
	ExpiresAt         *time.Time                `json:"expires_at,omitempty" url:"expires_at,omitempty"`
	GrantReason       string                    `json:"grant_reason" url:"grant_reason"`
	ID                string                    `json:"id" url:"id"`
	PlanID            *string                   `json:"plan_id,omitempty" url:"plan_id,omitempty"`
	PlanName          *string                   `json:"plan_name,omitempty" url:"plan_name,omitempty"`
	Price             *BillingPriceResponseData `json:"price,omitempty" url:"price,omitempty"`
	Quantity          int                       `json:"quantity" url:"quantity"`
	QuantityRemaining float64                   `json:"quantity_remaining" url:"quantity_remaining"`
	QuantityUsed      float64                   `json:"quantity_used" url:"quantity_used"`
	SourceLabel       string                    `json:"source_label" url:"source_label"`
	UpdatedAt         time.Time                 `json:"updated_at" url:"updated_at"`
	ValidFrom         *time.Time                `json:"valid_from,omitempty" url:"valid_from,omitempty"`
	ZeroedOutDate     *time.Time                `json:"zeroed_out_date,omitempty" url:"zeroed_out_date,omitempty"`
	ZeroedOutReason   *string                   `json:"zeroed_out_reason,omitempty" url:"zeroed_out_reason,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BillingCreditGrantResponseData) GetCompanyID() string {
	if b == nil {
		return ""
	}
	return b.CompanyID
}

func (b *BillingCreditGrantResponseData) GetCompanyName() string {
	if b == nil {
		return ""
	}
	return b.CompanyName
}

func (b *BillingCreditGrantResponseData) GetCreatedAt() time.Time {
	if b == nil {
		return time.Time{}
	}
	return b.CreatedAt
}

func (b *BillingCreditGrantResponseData) GetCreditIcon() *string {
	if b == nil {
		return nil
	}
	return b.CreditIcon
}

func (b *BillingCreditGrantResponseData) GetCreditName() string {
	if b == nil {
		return ""
	}
	return b.CreditName
}

func (b *BillingCreditGrantResponseData) GetExpiresAt() *time.Time {
	if b == nil {
		return nil
	}
	return b.ExpiresAt
}

func (b *BillingCreditGrantResponseData) GetGrantReason() string {
	if b == nil {
		return ""
	}
	return b.GrantReason
}

func (b *BillingCreditGrantResponseData) GetID() string {
	if b == nil {
		return ""
	}
	return b.ID
}

func (b *BillingCreditGrantResponseData) GetPlanID() *string {
	if b == nil {
		return nil
	}
	return b.PlanID
}

func (b *BillingCreditGrantResponseData) GetPlanName() *string {
	if b == nil {
		return nil
	}
	return b.PlanName
}

func (b *BillingCreditGrantResponseData) GetPrice() *BillingPriceResponseData {
	if b == nil {
		return nil
	}
	return b.Price
}

func (b *BillingCreditGrantResponseData) GetQuantity() int {
	if b == nil {
		return 0
	}
	return b.Quantity
}

func (b *BillingCreditGrantResponseData) GetQuantityRemaining() float64 {
	if b == nil {
		return 0
	}
	return b.QuantityRemaining
}

func (b *BillingCreditGrantResponseData) GetQuantityUsed() float64 {
	if b == nil {
		return 0
	}
	return b.QuantityUsed
}

func (b *BillingCreditGrantResponseData) GetSourceLabel() string {
	if b == nil {
		return ""
	}
	return b.SourceLabel
}

func (b *BillingCreditGrantResponseData) GetUpdatedAt() time.Time {
	if b == nil {
		return time.Time{}
	}
	return b.UpdatedAt
}

func (b *BillingCreditGrantResponseData) GetValidFrom() *time.Time {
	if b == nil {
		return nil
	}
	return b.ValidFrom
}

func (b *BillingCreditGrantResponseData) GetZeroedOutDate() *time.Time {
	if b == nil {
		return nil
	}
	return b.ZeroedOutDate
}

func (b *BillingCreditGrantResponseData) GetZeroedOutReason() *string {
	if b == nil {
		return nil
	}
	return b.ZeroedOutReason
}

func (b *BillingCreditGrantResponseData) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillingCreditGrantResponseData) UnmarshalJSON(data []byte) error {
	type embed BillingCreditGrantResponseData
	var unmarshaler = struct {
		embed
		CreatedAt     *internal.DateTime `json:"created_at"`
		ExpiresAt     *internal.DateTime `json:"expires_at,omitempty"`
		UpdatedAt     *internal.DateTime `json:"updated_at"`
		ValidFrom     *internal.DateTime `json:"valid_from,omitempty"`
		ZeroedOutDate *internal.DateTime `json:"zeroed_out_date,omitempty"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BillingCreditGrantResponseData(unmarshaler.embed)
	b.CreatedAt = unmarshaler.CreatedAt.Time()
	b.ExpiresAt = unmarshaler.ExpiresAt.TimePtr()
	b.UpdatedAt = unmarshaler.UpdatedAt.Time()
	b.ValidFrom = unmarshaler.ValidFrom.TimePtr()
	b.ZeroedOutDate = unmarshaler.ZeroedOutDate.TimePtr()
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillingCreditGrantResponseData) MarshalJSON() ([]byte, error) {
	type embed BillingCreditGrantResponseData
	var marshaler = struct {
		embed
		CreatedAt     *internal.DateTime `json:"created_at"`
		ExpiresAt     *internal.DateTime `json:"expires_at,omitempty"`
		UpdatedAt     *internal.DateTime `json:"updated_at"`
		ValidFrom     *internal.DateTime `json:"valid_from,omitempty"`
		ZeroedOutDate *internal.DateTime `json:"zeroed_out_date,omitempty"`
	}{
		embed:         embed(*b),
		CreatedAt:     internal.NewDateTime(b.CreatedAt),
		ExpiresAt:     internal.NewOptionalDateTime(b.ExpiresAt),
		UpdatedAt:     internal.NewDateTime(b.UpdatedAt),
		ValidFrom:     internal.NewOptionalDateTime(b.ValidFrom),
		ZeroedOutDate: internal.NewOptionalDateTime(b.ZeroedOutDate),
	}
	return json.Marshal(marshaler)
}

func (b *BillingCreditGrantResponseData) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Input parameters
type CountBillingCreditsGrantsParams struct {
	CreditID *string  `json:"credit_id,omitempty" url:"credit_id,omitempty"`
	IDs      []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"offset,omitempty" url:"offset,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CountBillingCreditsGrantsParams) GetCreditID() *string {
	if c == nil {
		return nil
	}
	return c.CreditID
}

func (c *CountBillingCreditsGrantsParams) GetIDs() []string {
	if c == nil {
		return nil
	}
	return c.IDs
}

func (c *CountBillingCreditsGrantsParams) GetLimit() *int {
	if c == nil {
		return nil
	}
	return c.Limit
}

func (c *CountBillingCreditsGrantsParams) GetOffset() *int {
	if c == nil {
		return nil
	}
	return c.Offset
}

func (c *CountBillingCreditsGrantsParams) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountBillingCreditsGrantsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler CountBillingCreditsGrantsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountBillingCreditsGrantsParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountBillingCreditsGrantsParams) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CountBillingCreditsGrantsResponse struct {
	Data *CountResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *CountBillingCreditsGrantsParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CountBillingCreditsGrantsResponse) GetData() *CountResponse {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *CountBillingCreditsGrantsResponse) GetParams() *CountBillingCreditsGrantsParams {
	if c == nil {
		return nil
	}
	return c.Params
}

func (c *CountBillingCreditsGrantsResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountBillingCreditsGrantsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CountBillingCreditsGrantsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountBillingCreditsGrantsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountBillingCreditsGrantsResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Input parameters
type CountBillingCreditsParams struct {
	IDs []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int    `json:"limit,omitempty" url:"limit,omitempty"`
	Name  *string `json:"name,omitempty" url:"name,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"offset,omitempty" url:"offset,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CountBillingCreditsParams) GetIDs() []string {
	if c == nil {
		return nil
	}
	return c.IDs
}

func (c *CountBillingCreditsParams) GetLimit() *int {
	if c == nil {
		return nil
	}
	return c.Limit
}

func (c *CountBillingCreditsParams) GetName() *string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *CountBillingCreditsParams) GetOffset() *int {
	if c == nil {
		return nil
	}
	return c.Offset
}

func (c *CountBillingCreditsParams) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountBillingCreditsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler CountBillingCreditsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountBillingCreditsParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountBillingCreditsParams) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CountBillingCreditsResponse struct {
	Data *CountResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *CountBillingCreditsParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CountBillingCreditsResponse) GetData() *CountResponse {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *CountBillingCreditsResponse) GetParams() *CountBillingCreditsParams {
	if c == nil {
		return nil
	}
	return c.Params
}

func (c *CountBillingCreditsResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountBillingCreditsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CountBillingCreditsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountBillingCreditsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountBillingCreditsResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Input parameters
type CountBillingPlanCreditGrantsParams struct {
	CreditID *string  `json:"credit_id,omitempty" url:"credit_id,omitempty"`
	IDs      []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset  *int     `json:"offset,omitempty" url:"offset,omitempty"`
	PlanID  *string  `json:"plan_id,omitempty" url:"plan_id,omitempty"`
	PlanIDs []string `json:"plan_ids,omitempty" url:"plan_ids,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CountBillingPlanCreditGrantsParams) GetCreditID() *string {
	if c == nil {
		return nil
	}
	return c.CreditID
}

func (c *CountBillingPlanCreditGrantsParams) GetIDs() []string {
	if c == nil {
		return nil
	}
	return c.IDs
}

func (c *CountBillingPlanCreditGrantsParams) GetLimit() *int {
	if c == nil {
		return nil
	}
	return c.Limit
}

func (c *CountBillingPlanCreditGrantsParams) GetOffset() *int {
	if c == nil {
		return nil
	}
	return c.Offset
}

func (c *CountBillingPlanCreditGrantsParams) GetPlanID() *string {
	if c == nil {
		return nil
	}
	return c.PlanID
}

func (c *CountBillingPlanCreditGrantsParams) GetPlanIDs() []string {
	if c == nil {
		return nil
	}
	return c.PlanIDs
}

func (c *CountBillingPlanCreditGrantsParams) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountBillingPlanCreditGrantsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler CountBillingPlanCreditGrantsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountBillingPlanCreditGrantsParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountBillingPlanCreditGrantsParams) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CountBillingPlanCreditGrantsResponse struct {
	Data *CountResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *CountBillingPlanCreditGrantsParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CountBillingPlanCreditGrantsResponse) GetData() *CountResponse {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *CountBillingPlanCreditGrantsResponse) GetParams() *CountBillingPlanCreditGrantsParams {
	if c == nil {
		return nil
	}
	return c.Params
}

func (c *CountBillingPlanCreditGrantsResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountBillingPlanCreditGrantsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CountBillingPlanCreditGrantsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountBillingPlanCreditGrantsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountBillingPlanCreditGrantsResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Input parameters
type CountCreditBundlesParams struct {
	BundleType *string  `json:"bundle_type,omitempty" url:"bundle_type,omitempty"`
	CreditID   *string  `json:"credit_id,omitempty" url:"credit_id,omitempty"`
	IDs        []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int                                    `json:"offset,omitempty" url:"offset,omitempty"`
	Status *CountCreditBundlesResponseParamsStatus `json:"status,omitempty" url:"status,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CountCreditBundlesParams) GetCreditID() *string {
	if c == nil {
		return nil
	}
	return c.CreditID
}

func (c *CountCreditBundlesParams) GetIDs() []string {
	if c == nil {
		return nil
	}
	return c.IDs
}

func (c *CountCreditBundlesParams) GetLimit() *int {
	if c == nil {
		return nil
	}
	return c.Limit
}

func (c *CountCreditBundlesParams) GetOffset() *int {
	if c == nil {
		return nil
	}
	return c.Offset
}

func (c *CountCreditBundlesParams) GetStatus() *CountCreditBundlesResponseParamsStatus {
	if c == nil {
		return nil
	}
	return c.Status
}

func (c *CountCreditBundlesParams) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountCreditBundlesParams) UnmarshalJSON(data []byte) error {
	type unmarshaler CountCreditBundlesParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountCreditBundlesParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountCreditBundlesParams) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CountCreditBundlesRequestStatus string

const (
	CountCreditBundlesRequestStatusActive   CountCreditBundlesRequestStatus = "active"
	CountCreditBundlesRequestStatusInactive CountCreditBundlesRequestStatus = "inactive"
)

func NewCountCreditBundlesRequestStatusFromString(s string) (CountCreditBundlesRequestStatus, error) {
	switch s {
	case "active":
		return CountCreditBundlesRequestStatusActive, nil
	case "inactive":
		return CountCreditBundlesRequestStatusInactive, nil
	}
	var t CountCreditBundlesRequestStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CountCreditBundlesRequestStatus) Ptr() *CountCreditBundlesRequestStatus {
	return &c
}

type CountCreditBundlesResponse struct {
	Data *CountResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *CountCreditBundlesParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CountCreditBundlesResponse) GetData() *CountResponse {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *CountCreditBundlesResponse) GetParams() *CountCreditBundlesParams {
	if c == nil {
		return nil
	}
	return c.Params
}

func (c *CountCreditBundlesResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountCreditBundlesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CountCreditBundlesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountCreditBundlesResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountCreditBundlesResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CountCreditBundlesResponseParamsStatus string

const (
	CountCreditBundlesResponseParamsStatusActive   CountCreditBundlesResponseParamsStatus = "active"
	CountCreditBundlesResponseParamsStatusInactive CountCreditBundlesResponseParamsStatus = "inactive"
)

func NewCountCreditBundlesResponseParamsStatusFromString(s string) (CountCreditBundlesResponseParamsStatus, error) {
	switch s {
	case "active":
		return CountCreditBundlesResponseParamsStatusActive, nil
	case "inactive":
		return CountCreditBundlesResponseParamsStatusInactive, nil
	}
	var t CountCreditBundlesResponseParamsStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CountCreditBundlesResponseParamsStatus) Ptr() *CountCreditBundlesResponseParamsStatus {
	return &c
}

type CreateBillingCreditRequestBodyBurnStrategy string

const (
	CreateBillingCreditRequestBodyBurnStrategyPlanFirstThenCreditBundlesFirstInFirstOut CreateBillingCreditRequestBodyBurnStrategy = "plan_first_then_credit_bundles_first_in_first_out"
	CreateBillingCreditRequestBodyBurnStrategyFirstInFirstOut                           CreateBillingCreditRequestBodyBurnStrategy = "first_in_first_out"
	CreateBillingCreditRequestBodyBurnStrategyLastInFirstOut                            CreateBillingCreditRequestBodyBurnStrategy = "last_in_first_out"
	CreateBillingCreditRequestBodyBurnStrategyExpirationPriority                        CreateBillingCreditRequestBodyBurnStrategy = "expiration_priority"
)

func NewCreateBillingCreditRequestBodyBurnStrategyFromString(s string) (CreateBillingCreditRequestBodyBurnStrategy, error) {
	switch s {
	case "plan_first_then_credit_bundles_first_in_first_out":
		return CreateBillingCreditRequestBodyBurnStrategyPlanFirstThenCreditBundlesFirstInFirstOut, nil
	case "first_in_first_out":
		return CreateBillingCreditRequestBodyBurnStrategyFirstInFirstOut, nil
	case "last_in_first_out":
		return CreateBillingCreditRequestBodyBurnStrategyLastInFirstOut, nil
	case "expiration_priority":
		return CreateBillingCreditRequestBodyBurnStrategyExpirationPriority, nil
	}
	var t CreateBillingCreditRequestBodyBurnStrategy
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CreateBillingCreditRequestBodyBurnStrategy) Ptr() *CreateBillingCreditRequestBodyBurnStrategy {
	return &c
}

type CreateBillingCreditRequestBodyDefaultRolloverPolicy string

const (
	CreateBillingCreditRequestBodyDefaultRolloverPolicyNone     CreateBillingCreditRequestBodyDefaultRolloverPolicy = "none"
	CreateBillingCreditRequestBodyDefaultRolloverPolicyRollover CreateBillingCreditRequestBodyDefaultRolloverPolicy = "rollover"
	CreateBillingCreditRequestBodyDefaultRolloverPolicyExpire   CreateBillingCreditRequestBodyDefaultRolloverPolicy = "expire"
)

func NewCreateBillingCreditRequestBodyDefaultRolloverPolicyFromString(s string) (CreateBillingCreditRequestBodyDefaultRolloverPolicy, error) {
	switch s {
	case "none":
		return CreateBillingCreditRequestBodyDefaultRolloverPolicyNone, nil
	case "rollover":
		return CreateBillingCreditRequestBodyDefaultRolloverPolicyRollover, nil
	case "expire":
		return CreateBillingCreditRequestBodyDefaultRolloverPolicyExpire, nil
	}
	var t CreateBillingCreditRequestBodyDefaultRolloverPolicy
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CreateBillingCreditRequestBodyDefaultRolloverPolicy) Ptr() *CreateBillingCreditRequestBodyDefaultRolloverPolicy {
	return &c
}

type CreateBillingCreditResponse struct {
	Data *BillingCreditResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateBillingCreditResponse) GetData() *BillingCreditResponseData {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *CreateBillingCreditResponse) GetParams() map[string]interface{} {
	if c == nil {
		return nil
	}
	return c.Params
}

func (c *CreateBillingCreditResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateBillingCreditResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateBillingCreditResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateBillingCreditResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateBillingCreditResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateBillingPlanCreditGrantRequestBodyExpiryType string

const (
	CreateBillingPlanCreditGrantRequestBodyExpiryTypeDuration               CreateBillingPlanCreditGrantRequestBodyExpiryType = "duration"
	CreateBillingPlanCreditGrantRequestBodyExpiryTypeNoExpiry               CreateBillingPlanCreditGrantRequestBodyExpiryType = "no_expiry"
	CreateBillingPlanCreditGrantRequestBodyExpiryTypeEndOfTrial             CreateBillingPlanCreditGrantRequestBodyExpiryType = "end_of_trial"
	CreateBillingPlanCreditGrantRequestBodyExpiryTypeEndOfBillingPeriod     CreateBillingPlanCreditGrantRequestBodyExpiryType = "end_of_billing_period"
	CreateBillingPlanCreditGrantRequestBodyExpiryTypeEndOfNextBillingPeriod CreateBillingPlanCreditGrantRequestBodyExpiryType = "end_of_next_billing_period"
)

func NewCreateBillingPlanCreditGrantRequestBodyExpiryTypeFromString(s string) (CreateBillingPlanCreditGrantRequestBodyExpiryType, error) {
	switch s {
	case "duration":
		return CreateBillingPlanCreditGrantRequestBodyExpiryTypeDuration, nil
	case "no_expiry":
		return CreateBillingPlanCreditGrantRequestBodyExpiryTypeNoExpiry, nil
	case "end_of_trial":
		return CreateBillingPlanCreditGrantRequestBodyExpiryTypeEndOfTrial, nil
	case "end_of_billing_period":
		return CreateBillingPlanCreditGrantRequestBodyExpiryTypeEndOfBillingPeriod, nil
	case "end_of_next_billing_period":
		return CreateBillingPlanCreditGrantRequestBodyExpiryTypeEndOfNextBillingPeriod, nil
	}
	var t CreateBillingPlanCreditGrantRequestBodyExpiryType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CreateBillingPlanCreditGrantRequestBodyExpiryType) Ptr() *CreateBillingPlanCreditGrantRequestBodyExpiryType {
	return &c
}

type CreateBillingPlanCreditGrantRequestBodyExpiryUnit string

const (
	CreateBillingPlanCreditGrantRequestBodyExpiryUnitDays           CreateBillingPlanCreditGrantRequestBodyExpiryUnit = "days"
	CreateBillingPlanCreditGrantRequestBodyExpiryUnitBillingPeriods CreateBillingPlanCreditGrantRequestBodyExpiryUnit = "billing_periods"
)

func NewCreateBillingPlanCreditGrantRequestBodyExpiryUnitFromString(s string) (CreateBillingPlanCreditGrantRequestBodyExpiryUnit, error) {
	switch s {
	case "days":
		return CreateBillingPlanCreditGrantRequestBodyExpiryUnitDays, nil
	case "billing_periods":
		return CreateBillingPlanCreditGrantRequestBodyExpiryUnitBillingPeriods, nil
	}
	var t CreateBillingPlanCreditGrantRequestBodyExpiryUnit
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CreateBillingPlanCreditGrantRequestBodyExpiryUnit) Ptr() *CreateBillingPlanCreditGrantRequestBodyExpiryUnit {
	return &c
}

type CreateBillingPlanCreditGrantRequestBodyResetCadence string

const (
	CreateBillingPlanCreditGrantRequestBodyResetCadenceMonthly CreateBillingPlanCreditGrantRequestBodyResetCadence = "monthly"
	CreateBillingPlanCreditGrantRequestBodyResetCadenceYearly  CreateBillingPlanCreditGrantRequestBodyResetCadence = "yearly"
	CreateBillingPlanCreditGrantRequestBodyResetCadenceDaily   CreateBillingPlanCreditGrantRequestBodyResetCadence = "daily"
	CreateBillingPlanCreditGrantRequestBodyResetCadenceWeekly  CreateBillingPlanCreditGrantRequestBodyResetCadence = "weekly"
)

func NewCreateBillingPlanCreditGrantRequestBodyResetCadenceFromString(s string) (CreateBillingPlanCreditGrantRequestBodyResetCadence, error) {
	switch s {
	case "monthly":
		return CreateBillingPlanCreditGrantRequestBodyResetCadenceMonthly, nil
	case "yearly":
		return CreateBillingPlanCreditGrantRequestBodyResetCadenceYearly, nil
	case "daily":
		return CreateBillingPlanCreditGrantRequestBodyResetCadenceDaily, nil
	case "weekly":
		return CreateBillingPlanCreditGrantRequestBodyResetCadenceWeekly, nil
	}
	var t CreateBillingPlanCreditGrantRequestBodyResetCadence
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CreateBillingPlanCreditGrantRequestBodyResetCadence) Ptr() *CreateBillingPlanCreditGrantRequestBodyResetCadence {
	return &c
}

type CreateBillingPlanCreditGrantRequestBodyResetStart string

const (
	CreateBillingPlanCreditGrantRequestBodyResetStartBillingPeriod CreateBillingPlanCreditGrantRequestBodyResetStart = "billing_period"
	CreateBillingPlanCreditGrantRequestBodyResetStartFirstOfMonth  CreateBillingPlanCreditGrantRequestBodyResetStart = "first_of_month"
)

func NewCreateBillingPlanCreditGrantRequestBodyResetStartFromString(s string) (CreateBillingPlanCreditGrantRequestBodyResetStart, error) {
	switch s {
	case "billing_period":
		return CreateBillingPlanCreditGrantRequestBodyResetStartBillingPeriod, nil
	case "first_of_month":
		return CreateBillingPlanCreditGrantRequestBodyResetStartFirstOfMonth, nil
	}
	var t CreateBillingPlanCreditGrantRequestBodyResetStart
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CreateBillingPlanCreditGrantRequestBodyResetStart) Ptr() *CreateBillingPlanCreditGrantRequestBodyResetStart {
	return &c
}

type CreateBillingPlanCreditGrantRequestBodyResetType string

const (
	CreateBillingPlanCreditGrantRequestBodyResetTypePlanPeriod CreateBillingPlanCreditGrantRequestBodyResetType = "plan_period"
	CreateBillingPlanCreditGrantRequestBodyResetTypeNoReset    CreateBillingPlanCreditGrantRequestBodyResetType = "no_reset"
)

func NewCreateBillingPlanCreditGrantRequestBodyResetTypeFromString(s string) (CreateBillingPlanCreditGrantRequestBodyResetType, error) {
	switch s {
	case "plan_period":
		return CreateBillingPlanCreditGrantRequestBodyResetTypePlanPeriod, nil
	case "no_reset":
		return CreateBillingPlanCreditGrantRequestBodyResetTypeNoReset, nil
	}
	var t CreateBillingPlanCreditGrantRequestBodyResetType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CreateBillingPlanCreditGrantRequestBodyResetType) Ptr() *CreateBillingPlanCreditGrantRequestBodyResetType {
	return &c
}

type CreateBillingPlanCreditGrantResponse struct {
	Data *BillingPlanCreditGrantResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateBillingPlanCreditGrantResponse) GetData() *BillingPlanCreditGrantResponseData {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *CreateBillingPlanCreditGrantResponse) GetParams() map[string]interface{} {
	if c == nil {
		return nil
	}
	return c.Params
}

func (c *CreateBillingPlanCreditGrantResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateBillingPlanCreditGrantResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateBillingPlanCreditGrantResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateBillingPlanCreditGrantResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateBillingPlanCreditGrantResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateCompanyCreditGrantExpiryType string

const (
	CreateCompanyCreditGrantExpiryTypeDuration               CreateCompanyCreditGrantExpiryType = "duration"
	CreateCompanyCreditGrantExpiryTypeNoExpiry               CreateCompanyCreditGrantExpiryType = "no_expiry"
	CreateCompanyCreditGrantExpiryTypeEndOfTrial             CreateCompanyCreditGrantExpiryType = "end_of_trial"
	CreateCompanyCreditGrantExpiryTypeEndOfBillingPeriod     CreateCompanyCreditGrantExpiryType = "end_of_billing_period"
	CreateCompanyCreditGrantExpiryTypeEndOfNextBillingPeriod CreateCompanyCreditGrantExpiryType = "end_of_next_billing_period"
)

func NewCreateCompanyCreditGrantExpiryTypeFromString(s string) (CreateCompanyCreditGrantExpiryType, error) {
	switch s {
	case "duration":
		return CreateCompanyCreditGrantExpiryTypeDuration, nil
	case "no_expiry":
		return CreateCompanyCreditGrantExpiryTypeNoExpiry, nil
	case "end_of_trial":
		return CreateCompanyCreditGrantExpiryTypeEndOfTrial, nil
	case "end_of_billing_period":
		return CreateCompanyCreditGrantExpiryTypeEndOfBillingPeriod, nil
	case "end_of_next_billing_period":
		return CreateCompanyCreditGrantExpiryTypeEndOfNextBillingPeriod, nil
	}
	var t CreateCompanyCreditGrantExpiryType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CreateCompanyCreditGrantExpiryType) Ptr() *CreateCompanyCreditGrantExpiryType {
	return &c
}

type CreateCompanyCreditGrantExpiryUnit string

const (
	CreateCompanyCreditGrantExpiryUnitDays           CreateCompanyCreditGrantExpiryUnit = "days"
	CreateCompanyCreditGrantExpiryUnitBillingPeriods CreateCompanyCreditGrantExpiryUnit = "billing_periods"
)

func NewCreateCompanyCreditGrantExpiryUnitFromString(s string) (CreateCompanyCreditGrantExpiryUnit, error) {
	switch s {
	case "days":
		return CreateCompanyCreditGrantExpiryUnitDays, nil
	case "billing_periods":
		return CreateCompanyCreditGrantExpiryUnitBillingPeriods, nil
	}
	var t CreateCompanyCreditGrantExpiryUnit
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CreateCompanyCreditGrantExpiryUnit) Ptr() *CreateCompanyCreditGrantExpiryUnit {
	return &c
}

type CreateCreditBundleRequestBodyExpiryType string

const (
	CreateCreditBundleRequestBodyExpiryTypeDuration               CreateCreditBundleRequestBodyExpiryType = "duration"
	CreateCreditBundleRequestBodyExpiryTypeNoExpiry               CreateCreditBundleRequestBodyExpiryType = "no_expiry"
	CreateCreditBundleRequestBodyExpiryTypeEndOfTrial             CreateCreditBundleRequestBodyExpiryType = "end_of_trial"
	CreateCreditBundleRequestBodyExpiryTypeEndOfBillingPeriod     CreateCreditBundleRequestBodyExpiryType = "end_of_billing_period"
	CreateCreditBundleRequestBodyExpiryTypeEndOfNextBillingPeriod CreateCreditBundleRequestBodyExpiryType = "end_of_next_billing_period"
)

func NewCreateCreditBundleRequestBodyExpiryTypeFromString(s string) (CreateCreditBundleRequestBodyExpiryType, error) {
	switch s {
	case "duration":
		return CreateCreditBundleRequestBodyExpiryTypeDuration, nil
	case "no_expiry":
		return CreateCreditBundleRequestBodyExpiryTypeNoExpiry, nil
	case "end_of_trial":
		return CreateCreditBundleRequestBodyExpiryTypeEndOfTrial, nil
	case "end_of_billing_period":
		return CreateCreditBundleRequestBodyExpiryTypeEndOfBillingPeriod, nil
	case "end_of_next_billing_period":
		return CreateCreditBundleRequestBodyExpiryTypeEndOfNextBillingPeriod, nil
	}
	var t CreateCreditBundleRequestBodyExpiryType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CreateCreditBundleRequestBodyExpiryType) Ptr() *CreateCreditBundleRequestBodyExpiryType {
	return &c
}

type CreateCreditBundleRequestBodyExpiryUnit string

const (
	CreateCreditBundleRequestBodyExpiryUnitDays           CreateCreditBundleRequestBodyExpiryUnit = "days"
	CreateCreditBundleRequestBodyExpiryUnitBillingPeriods CreateCreditBundleRequestBodyExpiryUnit = "billing_periods"
)

func NewCreateCreditBundleRequestBodyExpiryUnitFromString(s string) (CreateCreditBundleRequestBodyExpiryUnit, error) {
	switch s {
	case "days":
		return CreateCreditBundleRequestBodyExpiryUnitDays, nil
	case "billing_periods":
		return CreateCreditBundleRequestBodyExpiryUnitBillingPeriods, nil
	}
	var t CreateCreditBundleRequestBodyExpiryUnit
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CreateCreditBundleRequestBodyExpiryUnit) Ptr() *CreateCreditBundleRequestBodyExpiryUnit {
	return &c
}

type CreateCreditBundleRequestBodyStatus string

const (
	CreateCreditBundleRequestBodyStatusActive   CreateCreditBundleRequestBodyStatus = "active"
	CreateCreditBundleRequestBodyStatusInactive CreateCreditBundleRequestBodyStatus = "inactive"
)

func NewCreateCreditBundleRequestBodyStatusFromString(s string) (CreateCreditBundleRequestBodyStatus, error) {
	switch s {
	case "active":
		return CreateCreditBundleRequestBodyStatusActive, nil
	case "inactive":
		return CreateCreditBundleRequestBodyStatusInactive, nil
	}
	var t CreateCreditBundleRequestBodyStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CreateCreditBundleRequestBodyStatus) Ptr() *CreateCreditBundleRequestBodyStatus {
	return &c
}

type CreateCreditBundleResponse struct {
	Data *BillingCreditBundleResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateCreditBundleResponse) GetData() *BillingCreditBundleResponseData {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *CreateCreditBundleResponse) GetParams() map[string]interface{} {
	if c == nil {
		return nil
	}
	return c.Params
}

func (c *CreateCreditBundleResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateCreditBundleResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateCreditBundleResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateCreditBundleResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateCreditBundleResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DeleteBillingPlanCreditGrantResponse struct {
	Data *DeleteResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeleteBillingPlanCreditGrantResponse) GetData() *DeleteResponse {
	if d == nil {
		return nil
	}
	return d.Data
}

func (d *DeleteBillingPlanCreditGrantResponse) GetParams() map[string]interface{} {
	if d == nil {
		return nil
	}
	return d.Params
}

func (d *DeleteBillingPlanCreditGrantResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteBillingPlanCreditGrantResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteBillingPlanCreditGrantResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteBillingPlanCreditGrantResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteBillingPlanCreditGrantResponse) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DeleteCreditBundleResponse struct {
	Data *DeleteResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeleteCreditBundleResponse) GetData() *DeleteResponse {
	if d == nil {
		return nil
	}
	return d.Data
}

func (d *DeleteCreditBundleResponse) GetParams() map[string]interface{} {
	if d == nil {
		return nil
	}
	return d.Params
}

func (d *DeleteCreditBundleResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteCreditBundleResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteCreditBundleResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteCreditBundleResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteCreditBundleResponse) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type GetCreditBundleResponse struct {
	Data *BillingCreditBundleResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetCreditBundleResponse) GetData() *BillingCreditBundleResponseData {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GetCreditBundleResponse) GetParams() map[string]interface{} {
	if g == nil {
		return nil
	}
	return g.Params
}

func (g *GetCreditBundleResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetCreditBundleResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetCreditBundleResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetCreditBundleResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetCreditBundleResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetSingleBillingCreditResponse struct {
	Data *BillingCreditResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetSingleBillingCreditResponse) GetData() *BillingCreditResponseData {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GetSingleBillingCreditResponse) GetParams() map[string]interface{} {
	if g == nil {
		return nil
	}
	return g.Params
}

func (g *GetSingleBillingCreditResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetSingleBillingCreditResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetSingleBillingCreditResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetSingleBillingCreditResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetSingleBillingCreditResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GrantBillingCreditsToCompanyResponse struct {
	Data *BillingCreditGrantResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GrantBillingCreditsToCompanyResponse) GetData() *BillingCreditGrantResponseData {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GrantBillingCreditsToCompanyResponse) GetParams() map[string]interface{} {
	if g == nil {
		return nil
	}
	return g.Params
}

func (g *GrantBillingCreditsToCompanyResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GrantBillingCreditsToCompanyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GrantBillingCreditsToCompanyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GrantBillingCreditsToCompanyResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GrantBillingCreditsToCompanyResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Input parameters
type ListBillingCreditsParams struct {
	IDs []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int    `json:"limit,omitempty" url:"limit,omitempty"`
	Name  *string `json:"name,omitempty" url:"name,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"offset,omitempty" url:"offset,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListBillingCreditsParams) GetIDs() []string {
	if l == nil {
		return nil
	}
	return l.IDs
}

func (l *ListBillingCreditsParams) GetLimit() *int {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListBillingCreditsParams) GetName() *string {
	if l == nil {
		return nil
	}
	return l.Name
}

func (l *ListBillingCreditsParams) GetOffset() *int {
	if l == nil {
		return nil
	}
	return l.Offset
}

func (l *ListBillingCreditsParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListBillingCreditsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListBillingCreditsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListBillingCreditsParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListBillingCreditsParams) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListBillingCreditsResponse struct {
	Data []*BillingCreditResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListBillingCreditsParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListBillingCreditsResponse) GetData() []*BillingCreditResponseData {
	if l == nil {
		return nil
	}
	return l.Data
}

func (l *ListBillingCreditsResponse) GetParams() *ListBillingCreditsParams {
	if l == nil {
		return nil
	}
	return l.Params
}

func (l *ListBillingCreditsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListBillingCreditsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListBillingCreditsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListBillingCreditsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListBillingCreditsResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type ListBillingPlanCreditGrantsParams struct {
	CreditID *string  `json:"credit_id,omitempty" url:"credit_id,omitempty"`
	IDs      []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset  *int     `json:"offset,omitempty" url:"offset,omitempty"`
	PlanID  *string  `json:"plan_id,omitempty" url:"plan_id,omitempty"`
	PlanIDs []string `json:"plan_ids,omitempty" url:"plan_ids,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListBillingPlanCreditGrantsParams) GetCreditID() *string {
	if l == nil {
		return nil
	}
	return l.CreditID
}

func (l *ListBillingPlanCreditGrantsParams) GetIDs() []string {
	if l == nil {
		return nil
	}
	return l.IDs
}

func (l *ListBillingPlanCreditGrantsParams) GetLimit() *int {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListBillingPlanCreditGrantsParams) GetOffset() *int {
	if l == nil {
		return nil
	}
	return l.Offset
}

func (l *ListBillingPlanCreditGrantsParams) GetPlanID() *string {
	if l == nil {
		return nil
	}
	return l.PlanID
}

func (l *ListBillingPlanCreditGrantsParams) GetPlanIDs() []string {
	if l == nil {
		return nil
	}
	return l.PlanIDs
}

func (l *ListBillingPlanCreditGrantsParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListBillingPlanCreditGrantsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListBillingPlanCreditGrantsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListBillingPlanCreditGrantsParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListBillingPlanCreditGrantsParams) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListBillingPlanCreditGrantsResponse struct {
	Data []*BillingPlanCreditGrantResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListBillingPlanCreditGrantsParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListBillingPlanCreditGrantsResponse) GetData() []*BillingPlanCreditGrantResponseData {
	if l == nil {
		return nil
	}
	return l.Data
}

func (l *ListBillingPlanCreditGrantsResponse) GetParams() *ListBillingPlanCreditGrantsParams {
	if l == nil {
		return nil
	}
	return l.Params
}

func (l *ListBillingPlanCreditGrantsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListBillingPlanCreditGrantsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListBillingPlanCreditGrantsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListBillingPlanCreditGrantsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListBillingPlanCreditGrantsResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type ListCompanyGrantsParams struct {
	CompanyID *string                             `json:"company_id,omitempty" url:"company_id,omitempty"`
	Dir       *ListCompanyGrantsResponseParamsDir `json:"dir,omitempty" url:"dir,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int                                  `json:"offset,omitempty" url:"offset,omitempty"`
	Order  *ListCompanyGrantsResponseParamsOrder `json:"order,omitempty" url:"order,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListCompanyGrantsParams) GetCompanyID() *string {
	if l == nil {
		return nil
	}
	return l.CompanyID
}

func (l *ListCompanyGrantsParams) GetDir() *ListCompanyGrantsResponseParamsDir {
	if l == nil {
		return nil
	}
	return l.Dir
}

func (l *ListCompanyGrantsParams) GetLimit() *int {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListCompanyGrantsParams) GetOffset() *int {
	if l == nil {
		return nil
	}
	return l.Offset
}

func (l *ListCompanyGrantsParams) GetOrder() *ListCompanyGrantsResponseParamsOrder {
	if l == nil {
		return nil
	}
	return l.Order
}

func (l *ListCompanyGrantsParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListCompanyGrantsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListCompanyGrantsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListCompanyGrantsParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListCompanyGrantsParams) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListCompanyGrantsRequestDir string

const (
	ListCompanyGrantsRequestDirAsc  ListCompanyGrantsRequestDir = "asc"
	ListCompanyGrantsRequestDirDesc ListCompanyGrantsRequestDir = "desc"
)

func NewListCompanyGrantsRequestDirFromString(s string) (ListCompanyGrantsRequestDir, error) {
	switch s {
	case "asc":
		return ListCompanyGrantsRequestDirAsc, nil
	case "desc":
		return ListCompanyGrantsRequestDirDesc, nil
	}
	var t ListCompanyGrantsRequestDir
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l ListCompanyGrantsRequestDir) Ptr() *ListCompanyGrantsRequestDir {
	return &l
}

type ListCompanyGrantsRequestOrder string

const (
	ListCompanyGrantsRequestOrderCreatedAt         ListCompanyGrantsRequestOrder = "created_at"
	ListCompanyGrantsRequestOrderExpiresAt         ListCompanyGrantsRequestOrder = "expires_at"
	ListCompanyGrantsRequestOrderQuantity          ListCompanyGrantsRequestOrder = "quantity"
	ListCompanyGrantsRequestOrderQuantityRemaining ListCompanyGrantsRequestOrder = "quantity_remaining"
)

func NewListCompanyGrantsRequestOrderFromString(s string) (ListCompanyGrantsRequestOrder, error) {
	switch s {
	case "created_at":
		return ListCompanyGrantsRequestOrderCreatedAt, nil
	case "expires_at":
		return ListCompanyGrantsRequestOrderExpiresAt, nil
	case "quantity":
		return ListCompanyGrantsRequestOrderQuantity, nil
	case "quantity_remaining":
		return ListCompanyGrantsRequestOrderQuantityRemaining, nil
	}
	var t ListCompanyGrantsRequestOrder
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l ListCompanyGrantsRequestOrder) Ptr() *ListCompanyGrantsRequestOrder {
	return &l
}

type ListCompanyGrantsResponse struct {
	Data []*BillingCreditGrantResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListCompanyGrantsParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListCompanyGrantsResponse) GetData() []*BillingCreditGrantResponseData {
	if l == nil {
		return nil
	}
	return l.Data
}

func (l *ListCompanyGrantsResponse) GetParams() *ListCompanyGrantsParams {
	if l == nil {
		return nil
	}
	return l.Params
}

func (l *ListCompanyGrantsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListCompanyGrantsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListCompanyGrantsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListCompanyGrantsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListCompanyGrantsResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListCompanyGrantsResponseParamsDir string

const (
	ListCompanyGrantsResponseParamsDirAsc  ListCompanyGrantsResponseParamsDir = "asc"
	ListCompanyGrantsResponseParamsDirDesc ListCompanyGrantsResponseParamsDir = "desc"
)

func NewListCompanyGrantsResponseParamsDirFromString(s string) (ListCompanyGrantsResponseParamsDir, error) {
	switch s {
	case "asc":
		return ListCompanyGrantsResponseParamsDirAsc, nil
	case "desc":
		return ListCompanyGrantsResponseParamsDirDesc, nil
	}
	var t ListCompanyGrantsResponseParamsDir
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l ListCompanyGrantsResponseParamsDir) Ptr() *ListCompanyGrantsResponseParamsDir {
	return &l
}

type ListCompanyGrantsResponseParamsOrder string

const (
	ListCompanyGrantsResponseParamsOrderCreatedAt         ListCompanyGrantsResponseParamsOrder = "created_at"
	ListCompanyGrantsResponseParamsOrderExpiresAt         ListCompanyGrantsResponseParamsOrder = "expires_at"
	ListCompanyGrantsResponseParamsOrderQuantity          ListCompanyGrantsResponseParamsOrder = "quantity"
	ListCompanyGrantsResponseParamsOrderQuantityRemaining ListCompanyGrantsResponseParamsOrder = "quantity_remaining"
)

func NewListCompanyGrantsResponseParamsOrderFromString(s string) (ListCompanyGrantsResponseParamsOrder, error) {
	switch s {
	case "created_at":
		return ListCompanyGrantsResponseParamsOrderCreatedAt, nil
	case "expires_at":
		return ListCompanyGrantsResponseParamsOrderExpiresAt, nil
	case "quantity":
		return ListCompanyGrantsResponseParamsOrderQuantity, nil
	case "quantity_remaining":
		return ListCompanyGrantsResponseParamsOrderQuantityRemaining, nil
	}
	var t ListCompanyGrantsResponseParamsOrder
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l ListCompanyGrantsResponseParamsOrder) Ptr() *ListCompanyGrantsResponseParamsOrder {
	return &l
}

// Input parameters
type ListCreditBundlesParams struct {
	BundleType *string  `json:"bundle_type,omitempty" url:"bundle_type,omitempty"`
	CreditID   *string  `json:"credit_id,omitempty" url:"credit_id,omitempty"`
	IDs        []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int                                   `json:"offset,omitempty" url:"offset,omitempty"`
	Status *ListCreditBundlesResponseParamsStatus `json:"status,omitempty" url:"status,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListCreditBundlesParams) GetCreditID() *string {
	if l == nil {
		return nil
	}
	return l.CreditID
}

func (l *ListCreditBundlesParams) GetIDs() []string {
	if l == nil {
		return nil
	}
	return l.IDs
}

func (l *ListCreditBundlesParams) GetLimit() *int {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListCreditBundlesParams) GetOffset() *int {
	if l == nil {
		return nil
	}
	return l.Offset
}

func (l *ListCreditBundlesParams) GetStatus() *ListCreditBundlesResponseParamsStatus {
	if l == nil {
		return nil
	}
	return l.Status
}

func (l *ListCreditBundlesParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListCreditBundlesParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListCreditBundlesParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListCreditBundlesParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListCreditBundlesParams) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListCreditBundlesRequestStatus string

const (
	ListCreditBundlesRequestStatusActive   ListCreditBundlesRequestStatus = "active"
	ListCreditBundlesRequestStatusInactive ListCreditBundlesRequestStatus = "inactive"
)

func NewListCreditBundlesRequestStatusFromString(s string) (ListCreditBundlesRequestStatus, error) {
	switch s {
	case "active":
		return ListCreditBundlesRequestStatusActive, nil
	case "inactive":
		return ListCreditBundlesRequestStatusInactive, nil
	}
	var t ListCreditBundlesRequestStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l ListCreditBundlesRequestStatus) Ptr() *ListCreditBundlesRequestStatus {
	return &l
}

type ListCreditBundlesResponse struct {
	Data []*BillingCreditBundleResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListCreditBundlesParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListCreditBundlesResponse) GetData() []*BillingCreditBundleResponseData {
	if l == nil {
		return nil
	}
	return l.Data
}

func (l *ListCreditBundlesResponse) GetParams() *ListCreditBundlesParams {
	if l == nil {
		return nil
	}
	return l.Params
}

func (l *ListCreditBundlesResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListCreditBundlesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListCreditBundlesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListCreditBundlesResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListCreditBundlesResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListCreditBundlesResponseParamsStatus string

const (
	ListCreditBundlesResponseParamsStatusActive   ListCreditBundlesResponseParamsStatus = "active"
	ListCreditBundlesResponseParamsStatusInactive ListCreditBundlesResponseParamsStatus = "inactive"
)

func NewListCreditBundlesResponseParamsStatusFromString(s string) (ListCreditBundlesResponseParamsStatus, error) {
	switch s {
	case "active":
		return ListCreditBundlesResponseParamsStatusActive, nil
	case "inactive":
		return ListCreditBundlesResponseParamsStatusInactive, nil
	}
	var t ListCreditBundlesResponseParamsStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l ListCreditBundlesResponseParamsStatus) Ptr() *ListCreditBundlesResponseParamsStatus {
	return &l
}

// Input parameters
type ListGrantsForCreditParams struct {
	CreditID *string  `json:"credit_id,omitempty" url:"credit_id,omitempty"`
	IDs      []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"offset,omitempty" url:"offset,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListGrantsForCreditParams) GetCreditID() *string {
	if l == nil {
		return nil
	}
	return l.CreditID
}

func (l *ListGrantsForCreditParams) GetIDs() []string {
	if l == nil {
		return nil
	}
	return l.IDs
}

func (l *ListGrantsForCreditParams) GetLimit() *int {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListGrantsForCreditParams) GetOffset() *int {
	if l == nil {
		return nil
	}
	return l.Offset
}

func (l *ListGrantsForCreditParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListGrantsForCreditParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListGrantsForCreditParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListGrantsForCreditParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListGrantsForCreditParams) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListGrantsForCreditResponse struct {
	Data []*BillingCreditGrantResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListGrantsForCreditParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListGrantsForCreditResponse) GetData() []*BillingCreditGrantResponseData {
	if l == nil {
		return nil
	}
	return l.Data
}

func (l *ListGrantsForCreditResponse) GetParams() *ListGrantsForCreditParams {
	if l == nil {
		return nil
	}
	return l.Params
}

func (l *ListGrantsForCreditResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListGrantsForCreditResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListGrantsForCreditResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListGrantsForCreditResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListGrantsForCreditResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type SoftDeleteBillingCreditResponse struct {
	Data *DeleteResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SoftDeleteBillingCreditResponse) GetData() *DeleteResponse {
	if s == nil {
		return nil
	}
	return s.Data
}

func (s *SoftDeleteBillingCreditResponse) GetParams() map[string]interface{} {
	if s == nil {
		return nil
	}
	return s.Params
}

func (s *SoftDeleteBillingCreditResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SoftDeleteBillingCreditResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SoftDeleteBillingCreditResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SoftDeleteBillingCreditResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SoftDeleteBillingCreditResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type UpdateBillingCreditRequestBodyBurnStrategy string

const (
	UpdateBillingCreditRequestBodyBurnStrategyPlanFirstThenCreditBundlesFirstInFirstOut UpdateBillingCreditRequestBodyBurnStrategy = "plan_first_then_credit_bundles_first_in_first_out"
	UpdateBillingCreditRequestBodyBurnStrategyFirstInFirstOut                           UpdateBillingCreditRequestBodyBurnStrategy = "first_in_first_out"
	UpdateBillingCreditRequestBodyBurnStrategyLastInFirstOut                            UpdateBillingCreditRequestBodyBurnStrategy = "last_in_first_out"
	UpdateBillingCreditRequestBodyBurnStrategyExpirationPriority                        UpdateBillingCreditRequestBodyBurnStrategy = "expiration_priority"
)

func NewUpdateBillingCreditRequestBodyBurnStrategyFromString(s string) (UpdateBillingCreditRequestBodyBurnStrategy, error) {
	switch s {
	case "plan_first_then_credit_bundles_first_in_first_out":
		return UpdateBillingCreditRequestBodyBurnStrategyPlanFirstThenCreditBundlesFirstInFirstOut, nil
	case "first_in_first_out":
		return UpdateBillingCreditRequestBodyBurnStrategyFirstInFirstOut, nil
	case "last_in_first_out":
		return UpdateBillingCreditRequestBodyBurnStrategyLastInFirstOut, nil
	case "expiration_priority":
		return UpdateBillingCreditRequestBodyBurnStrategyExpirationPriority, nil
	}
	var t UpdateBillingCreditRequestBodyBurnStrategy
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UpdateBillingCreditRequestBodyBurnStrategy) Ptr() *UpdateBillingCreditRequestBodyBurnStrategy {
	return &u
}

type UpdateBillingCreditRequestBodyDefaultRolloverPolicy string

const (
	UpdateBillingCreditRequestBodyDefaultRolloverPolicyNone     UpdateBillingCreditRequestBodyDefaultRolloverPolicy = "none"
	UpdateBillingCreditRequestBodyDefaultRolloverPolicyRollover UpdateBillingCreditRequestBodyDefaultRolloverPolicy = "rollover"
	UpdateBillingCreditRequestBodyDefaultRolloverPolicyExpire   UpdateBillingCreditRequestBodyDefaultRolloverPolicy = "expire"
)

func NewUpdateBillingCreditRequestBodyDefaultRolloverPolicyFromString(s string) (UpdateBillingCreditRequestBodyDefaultRolloverPolicy, error) {
	switch s {
	case "none":
		return UpdateBillingCreditRequestBodyDefaultRolloverPolicyNone, nil
	case "rollover":
		return UpdateBillingCreditRequestBodyDefaultRolloverPolicyRollover, nil
	case "expire":
		return UpdateBillingCreditRequestBodyDefaultRolloverPolicyExpire, nil
	}
	var t UpdateBillingCreditRequestBodyDefaultRolloverPolicy
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UpdateBillingCreditRequestBodyDefaultRolloverPolicy) Ptr() *UpdateBillingCreditRequestBodyDefaultRolloverPolicy {
	return &u
}

type UpdateBillingCreditResponse struct {
	Data *BillingCreditResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateBillingCreditResponse) GetData() *BillingCreditResponseData {
	if u == nil {
		return nil
	}
	return u.Data
}

func (u *UpdateBillingCreditResponse) GetParams() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.Params
}

func (u *UpdateBillingCreditResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateBillingCreditResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateBillingCreditResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateBillingCreditResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateBillingCreditResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateCreditBundleDetailsRequestBodyExpiryType string

const (
	UpdateCreditBundleDetailsRequestBodyExpiryTypeDuration               UpdateCreditBundleDetailsRequestBodyExpiryType = "duration"
	UpdateCreditBundleDetailsRequestBodyExpiryTypeNoExpiry               UpdateCreditBundleDetailsRequestBodyExpiryType = "no_expiry"
	UpdateCreditBundleDetailsRequestBodyExpiryTypeEndOfTrial             UpdateCreditBundleDetailsRequestBodyExpiryType = "end_of_trial"
	UpdateCreditBundleDetailsRequestBodyExpiryTypeEndOfBillingPeriod     UpdateCreditBundleDetailsRequestBodyExpiryType = "end_of_billing_period"
	UpdateCreditBundleDetailsRequestBodyExpiryTypeEndOfNextBillingPeriod UpdateCreditBundleDetailsRequestBodyExpiryType = "end_of_next_billing_period"
)

func NewUpdateCreditBundleDetailsRequestBodyExpiryTypeFromString(s string) (UpdateCreditBundleDetailsRequestBodyExpiryType, error) {
	switch s {
	case "duration":
		return UpdateCreditBundleDetailsRequestBodyExpiryTypeDuration, nil
	case "no_expiry":
		return UpdateCreditBundleDetailsRequestBodyExpiryTypeNoExpiry, nil
	case "end_of_trial":
		return UpdateCreditBundleDetailsRequestBodyExpiryTypeEndOfTrial, nil
	case "end_of_billing_period":
		return UpdateCreditBundleDetailsRequestBodyExpiryTypeEndOfBillingPeriod, nil
	case "end_of_next_billing_period":
		return UpdateCreditBundleDetailsRequestBodyExpiryTypeEndOfNextBillingPeriod, nil
	}
	var t UpdateCreditBundleDetailsRequestBodyExpiryType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UpdateCreditBundleDetailsRequestBodyExpiryType) Ptr() *UpdateCreditBundleDetailsRequestBodyExpiryType {
	return &u
}

type UpdateCreditBundleDetailsRequestBodyExpiryUnit string

const (
	UpdateCreditBundleDetailsRequestBodyExpiryUnitDays           UpdateCreditBundleDetailsRequestBodyExpiryUnit = "days"
	UpdateCreditBundleDetailsRequestBodyExpiryUnitBillingPeriods UpdateCreditBundleDetailsRequestBodyExpiryUnit = "billing_periods"
)

func NewUpdateCreditBundleDetailsRequestBodyExpiryUnitFromString(s string) (UpdateCreditBundleDetailsRequestBodyExpiryUnit, error) {
	switch s {
	case "days":
		return UpdateCreditBundleDetailsRequestBodyExpiryUnitDays, nil
	case "billing_periods":
		return UpdateCreditBundleDetailsRequestBodyExpiryUnitBillingPeriods, nil
	}
	var t UpdateCreditBundleDetailsRequestBodyExpiryUnit
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UpdateCreditBundleDetailsRequestBodyExpiryUnit) Ptr() *UpdateCreditBundleDetailsRequestBodyExpiryUnit {
	return &u
}

type UpdateCreditBundleDetailsRequestBodyStatus string

const (
	UpdateCreditBundleDetailsRequestBodyStatusActive   UpdateCreditBundleDetailsRequestBodyStatus = "active"
	UpdateCreditBundleDetailsRequestBodyStatusInactive UpdateCreditBundleDetailsRequestBodyStatus = "inactive"
)

func NewUpdateCreditBundleDetailsRequestBodyStatusFromString(s string) (UpdateCreditBundleDetailsRequestBodyStatus, error) {
	switch s {
	case "active":
		return UpdateCreditBundleDetailsRequestBodyStatusActive, nil
	case "inactive":
		return UpdateCreditBundleDetailsRequestBodyStatusInactive, nil
	}
	var t UpdateCreditBundleDetailsRequestBodyStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UpdateCreditBundleDetailsRequestBodyStatus) Ptr() *UpdateCreditBundleDetailsRequestBodyStatus {
	return &u
}

type UpdateCreditBundleDetailsResponse struct {
	Data *BillingCreditBundleResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateCreditBundleDetailsResponse) GetData() *BillingCreditBundleResponseData {
	if u == nil {
		return nil
	}
	return u.Data
}

func (u *UpdateCreditBundleDetailsResponse) GetParams() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.Params
}

func (u *UpdateCreditBundleDetailsResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateCreditBundleDetailsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateCreditBundleDetailsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateCreditBundleDetailsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateCreditBundleDetailsResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type ZeroOutGrantRequestBodyReason string

const (
	ZeroOutGrantRequestBodyReasonPlanChange      ZeroOutGrantRequestBodyReason = "plan_change"
	ZeroOutGrantRequestBodyReasonManual          ZeroOutGrantRequestBodyReason = "manual"
	ZeroOutGrantRequestBodyReasonPlanPeriodReset ZeroOutGrantRequestBodyReason = "plan_period_reset"
	ZeroOutGrantRequestBodyReasonExpired         ZeroOutGrantRequestBodyReason = "expired"
)

func NewZeroOutGrantRequestBodyReasonFromString(s string) (ZeroOutGrantRequestBodyReason, error) {
	switch s {
	case "plan_change":
		return ZeroOutGrantRequestBodyReasonPlanChange, nil
	case "manual":
		return ZeroOutGrantRequestBodyReasonManual, nil
	case "plan_period_reset":
		return ZeroOutGrantRequestBodyReasonPlanPeriodReset, nil
	case "expired":
		return ZeroOutGrantRequestBodyReasonExpired, nil
	}
	var t ZeroOutGrantRequestBodyReason
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (z ZeroOutGrantRequestBodyReason) Ptr() *ZeroOutGrantRequestBodyReason {
	return &z
}

type ZeroOutGrantResponse struct {
	Data *BillingCreditGrantResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (z *ZeroOutGrantResponse) GetData() *BillingCreditGrantResponseData {
	if z == nil {
		return nil
	}
	return z.Data
}

func (z *ZeroOutGrantResponse) GetParams() map[string]interface{} {
	if z == nil {
		return nil
	}
	return z.Params
}

func (z *ZeroOutGrantResponse) GetExtraProperties() map[string]interface{} {
	return z.extraProperties
}

func (z *ZeroOutGrantResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ZeroOutGrantResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*z = ZeroOutGrantResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *z)
	if err != nil {
		return err
	}
	z.extraProperties = extraProperties
	z.rawJSON = json.RawMessage(data)
	return nil
}

func (z *ZeroOutGrantResponse) String() string {
	if len(z.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(z.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(z); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", z)
}

type UpdateBillingCreditRequestBody struct {
	BurnStrategy           *UpdateBillingCreditRequestBodyBurnStrategy          `json:"burn_strategy,omitempty" url:"-"`
	DefaultExpiryUnit      *string                                              `json:"default_expiry_unit,omitempty" url:"-"`
	DefaultExpiryUnitCount *int                                                 `json:"default_expiry_unit_count,omitempty" url:"-"`
	DefaultRolloverPolicy  *UpdateBillingCreditRequestBodyDefaultRolloverPolicy `json:"default_rollover_policy,omitempty" url:"-"`
	Description            string                                               `json:"description" url:"-"`
	Icon                   *string                                              `json:"icon,omitempty" url:"-"`
	Name                   string                                               `json:"name" url:"-"`
	PerUnitPrice           *int                                                 `json:"per_unit_price,omitempty" url:"-"`
	PerUnitPriceDecimal    *string                                              `json:"per_unit_price_decimal,omitempty" url:"-"`
	PluralName             *string                                              `json:"plural_name,omitempty" url:"-"`
	SingularName           *string                                              `json:"singular_name,omitempty" url:"-"`
}

type UpdateCreditBundleDetailsRequestBody struct {
	BundleName          string                                          `json:"bundle_name" url:"-"`
	ExpiryType          *UpdateCreditBundleDetailsRequestBodyExpiryType `json:"expiry_type,omitempty" url:"-"`
	ExpiryUnit          *UpdateCreditBundleDetailsRequestBodyExpiryUnit `json:"expiry_unit,omitempty" url:"-"`
	ExpiryUnitCount     *int                                            `json:"expiry_unit_count,omitempty" url:"-"`
	PricePerUnit        int                                             `json:"price_per_unit" url:"-"`
	PricePerUnitDecimal *string                                         `json:"price_per_unit_decimal,omitempty" url:"-"`
	Quantity            *int                                            `json:"quantity,omitempty" url:"-"`
	Status              *UpdateCreditBundleDetailsRequestBodyStatus     `json:"status,omitempty" url:"-"`
}

type ZeroOutGrantRequestBody struct {
	Reason *ZeroOutGrantRequestBodyReason `json:"reason,omitempty" url:"-"`
}
