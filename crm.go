// This file was auto-generated by Fern from our API Definition.

package schematichq

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/schematichq/schematic-go/internal"
	time "time"
)

type ListCrmProductsRequest struct {
	IDs  []*string `json:"-" url:"ids,omitempty"`
	Name *string   `json:"-" url:"name,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type CrmDealResponseData struct {
	AccountID         string    `json:"account_id" url:"account_id"`
	Arr               string    `json:"arr" url:"arr"`
	CompanyExternalID *string   `json:"company_external_id,omitempty" url:"company_external_id,omitempty"`
	CreatedAt         time.Time `json:"created_at" url:"created_at"`
	DealExternalID    string    `json:"deal_external_id" url:"deal_external_id"`
	DealID            string    `json:"deal_id" url:"deal_id"`
	EnvironmentID     string    `json:"environment_id" url:"environment_id"`
	Mrr               string    `json:"mrr" url:"mrr"`
	Name              *string   `json:"name,omitempty" url:"name,omitempty"`
	ProductExternalID *string   `json:"product_external_id,omitempty" url:"product_external_id,omitempty"`
	UpdatedAt         time.Time `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CrmDealResponseData) GetAccountID() string {
	if c == nil {
		return ""
	}
	return c.AccountID
}

func (c *CrmDealResponseData) GetArr() string {
	if c == nil {
		return ""
	}
	return c.Arr
}

func (c *CrmDealResponseData) GetCompanyExternalID() *string {
	if c == nil {
		return nil
	}
	return c.CompanyExternalID
}

func (c *CrmDealResponseData) GetCreatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.CreatedAt
}

func (c *CrmDealResponseData) GetDealExternalID() string {
	if c == nil {
		return ""
	}
	return c.DealExternalID
}

func (c *CrmDealResponseData) GetDealID() string {
	if c == nil {
		return ""
	}
	return c.DealID
}

func (c *CrmDealResponseData) GetEnvironmentID() string {
	if c == nil {
		return ""
	}
	return c.EnvironmentID
}

func (c *CrmDealResponseData) GetMrr() string {
	if c == nil {
		return ""
	}
	return c.Mrr
}

func (c *CrmDealResponseData) GetName() *string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *CrmDealResponseData) GetProductExternalID() *string {
	if c == nil {
		return nil
	}
	return c.ProductExternalID
}

func (c *CrmDealResponseData) GetUpdatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.UpdatedAt
}

func (c *CrmDealResponseData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CrmDealResponseData) UnmarshalJSON(data []byte) error {
	type embed CrmDealResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CrmDealResponseData(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CrmDealResponseData) MarshalJSON() ([]byte, error) {
	type embed CrmDealResponseData
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*c),
		CreatedAt: internal.NewDateTime(c.CreatedAt),
		UpdatedAt: internal.NewDateTime(c.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *CrmDealResponseData) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CrmLineItemResponseData struct {
	AccountID         string    `json:"account_id" url:"account_id"`
	CreatedAt         time.Time `json:"created_at" url:"created_at"`
	DealID            *string   `json:"deal_id,omitempty" url:"deal_id,omitempty"`
	EnvironmentID     string    `json:"environment_id" url:"environment_id"`
	ProductExternalID *string   `json:"product_external_id,omitempty" url:"product_external_id,omitempty"`
	UpdatedAt         time.Time `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CrmLineItemResponseData) GetAccountID() string {
	if c == nil {
		return ""
	}
	return c.AccountID
}

func (c *CrmLineItemResponseData) GetCreatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.CreatedAt
}

func (c *CrmLineItemResponseData) GetDealID() *string {
	if c == nil {
		return nil
	}
	return c.DealID
}

func (c *CrmLineItemResponseData) GetEnvironmentID() string {
	if c == nil {
		return ""
	}
	return c.EnvironmentID
}

func (c *CrmLineItemResponseData) GetProductExternalID() *string {
	if c == nil {
		return nil
	}
	return c.ProductExternalID
}

func (c *CrmLineItemResponseData) GetUpdatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.UpdatedAt
}

func (c *CrmLineItemResponseData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CrmLineItemResponseData) UnmarshalJSON(data []byte) error {
	type embed CrmLineItemResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CrmLineItemResponseData(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CrmLineItemResponseData) MarshalJSON() ([]byte, error) {
	type embed CrmLineItemResponseData
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*c),
		CreatedAt: internal.NewDateTime(c.CreatedAt),
		UpdatedAt: internal.NewDateTime(c.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *CrmLineItemResponseData) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CrmProductResponseData struct {
	AccountID     string    `json:"account_id" url:"account_id"`
	CreatedAt     time.Time `json:"created_at" url:"created_at"`
	Currency      string    `json:"currency" url:"currency"`
	EnvironmentID string    `json:"environment_id" url:"environment_id"`
	ExternalID    string    `json:"external_id" url:"external_id"`
	Name          string    `json:"name" url:"name"`
	Price         string    `json:"price" url:"price"`
	ProductID     string    `json:"product_id" url:"product_id"`
	Quantity      float64   `json:"quantity" url:"quantity"`
	UpdatedAt     time.Time `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CrmProductResponseData) GetAccountID() string {
	if c == nil {
		return ""
	}
	return c.AccountID
}

func (c *CrmProductResponseData) GetCreatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.CreatedAt
}

func (c *CrmProductResponseData) GetCurrency() string {
	if c == nil {
		return ""
	}
	return c.Currency
}

func (c *CrmProductResponseData) GetEnvironmentID() string {
	if c == nil {
		return ""
	}
	return c.EnvironmentID
}

func (c *CrmProductResponseData) GetExternalID() string {
	if c == nil {
		return ""
	}
	return c.ExternalID
}

func (c *CrmProductResponseData) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *CrmProductResponseData) GetPrice() string {
	if c == nil {
		return ""
	}
	return c.Price
}

func (c *CrmProductResponseData) GetProductID() string {
	if c == nil {
		return ""
	}
	return c.ProductID
}

func (c *CrmProductResponseData) GetQuantity() float64 {
	if c == nil {
		return 0
	}
	return c.Quantity
}

func (c *CrmProductResponseData) GetUpdatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.UpdatedAt
}

func (c *CrmProductResponseData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CrmProductResponseData) UnmarshalJSON(data []byte) error {
	type embed CrmProductResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CrmProductResponseData(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CrmProductResponseData) MarshalJSON() ([]byte, error) {
	type embed CrmProductResponseData
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*c),
		CreatedAt: internal.NewDateTime(c.CreatedAt),
		UpdatedAt: internal.NewDateTime(c.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *CrmProductResponseData) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Input parameters
type ListCrmProductsParams struct {
	IDs []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int    `json:"limit,omitempty" url:"limit,omitempty"`
	Name  *string `json:"name,omitempty" url:"name,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"offset,omitempty" url:"offset,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListCrmProductsParams) GetIDs() []string {
	if l == nil {
		return nil
	}
	return l.IDs
}

func (l *ListCrmProductsParams) GetLimit() *int {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListCrmProductsParams) GetName() *string {
	if l == nil {
		return nil
	}
	return l.Name
}

func (l *ListCrmProductsParams) GetOffset() *int {
	if l == nil {
		return nil
	}
	return l.Offset
}

func (l *ListCrmProductsParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListCrmProductsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListCrmProductsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListCrmProductsParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListCrmProductsParams) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListCrmProductsResponse struct {
	Data []*CrmProductResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListCrmProductsParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListCrmProductsResponse) GetData() []*CrmProductResponseData {
	if l == nil {
		return nil
	}
	return l.Data
}

func (l *ListCrmProductsResponse) GetParams() *ListCrmProductsParams {
	if l == nil {
		return nil
	}
	return l.Params
}

func (l *ListCrmProductsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListCrmProductsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListCrmProductsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListCrmProductsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListCrmProductsResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type UpsertCrmDealResponse struct {
	Data *CrmDealResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpsertCrmDealResponse) GetData() *CrmDealResponseData {
	if u == nil {
		return nil
	}
	return u.Data
}

func (u *UpsertCrmDealResponse) GetParams() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.Params
}

func (u *UpsertCrmDealResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertCrmDealResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpsertCrmDealResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpsertCrmDealResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertCrmDealResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpsertCrmProductResponse struct {
	Data *CrmProductResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpsertCrmProductResponse) GetData() *CrmProductResponseData {
	if u == nil {
		return nil
	}
	return u.Data
}

func (u *UpsertCrmProductResponse) GetParams() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.Params
}

func (u *UpsertCrmProductResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertCrmProductResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpsertCrmProductResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpsertCrmProductResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertCrmProductResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpsertDealLineItemAssociationResponse struct {
	Data *CrmLineItemResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpsertDealLineItemAssociationResponse) GetData() *CrmLineItemResponseData {
	if u == nil {
		return nil
	}
	return u.Data
}

func (u *UpsertDealLineItemAssociationResponse) GetParams() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.Params
}

func (u *UpsertDealLineItemAssociationResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertDealLineItemAssociationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpsertDealLineItemAssociationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpsertDealLineItemAssociationResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertDealLineItemAssociationResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpsertLineItemResponse struct {
	Data *CrmLineItemResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpsertLineItemResponse) GetData() *CrmLineItemResponseData {
	if u == nil {
		return nil
	}
	return u.Data
}

func (u *UpsertLineItemResponse) GetParams() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.Params
}

func (u *UpsertLineItemResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertLineItemResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpsertLineItemResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpsertLineItemResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertLineItemResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type CreateCrmDealRequestBody struct {
	Arr            *string `json:"arr,omitempty" url:"-"`
	CrmCompanyID   *string `json:"crm_company_id,omitempty" url:"-"`
	CrmCompanyKey  string  `json:"crm_company_key" url:"-"`
	CrmProductID   *string `json:"crm_product_id,omitempty" url:"-"`
	CrmType        string  `json:"crm_type" url:"-"`
	DealExternalID string  `json:"deal_external_id" url:"-"`
	DealName       *string `json:"deal_name,omitempty" url:"-"`
	DealStage      *string `json:"deal_stage,omitempty" url:"-"`
	Mrr            *string `json:"mrr,omitempty" url:"-"`
}

type CreateCrmProductRequestBody struct {
	Currency    string `json:"currency" url:"-"`
	Description string `json:"description" url:"-"`
	ExternalID  string `json:"external_id" url:"-"`
	Interval    string `json:"interval" url:"-"`
	Name        string `json:"name" url:"-"`
	Price       string `json:"price" url:"-"`
	Quantity    int    `json:"quantity" url:"-"`
	Sku         string `json:"sku" url:"-"`
}

type CreateCrmDealLineItemAssociationRequestBody struct {
	DealExternalID     string `json:"deal_external_id" url:"-"`
	LineItemExternalID string `json:"line_item_external_id" url:"-"`
}

type CreateCrmLineItemRequestBody struct {
	Amount             string  `json:"amount" url:"-"`
	DiscountPercentage *string `json:"discount_percentage,omitempty" url:"-"`
	Interval           string  `json:"interval" url:"-"`
	LineItemExternalID string  `json:"line_item_external_id" url:"-"`
	ProductExternalID  string  `json:"product_external_id" url:"-"`
	Quantity           int     `json:"quantity" url:"-"`
	TermMonth          *int    `json:"term_month,omitempty" url:"-"`
	TotalDiscount      *string `json:"total_discount,omitempty" url:"-"`
}
