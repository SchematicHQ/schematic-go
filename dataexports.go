// This file was auto-generated by Fern from our API Definition.

package schematichq

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/schematichq/schematic-go/internal"
	time "time"
)

type CreateDataExportRequestBody struct {
	Metadata       string `json:"metadata" url:"-"`
	exportType     string
	outputFileType string
}

func (c *CreateDataExportRequestBody) ExportType() string {
	return c.exportType
}

func (c *CreateDataExportRequestBody) OutputFileType() string {
	return c.outputFileType
}

func (c *CreateDataExportRequestBody) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateDataExportRequestBody
	var body unmarshaler
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	*c = CreateDataExportRequestBody(body)
	c.exportType = "company-feature-usage"
	c.outputFileType = "csv"
	return nil
}

func (c *CreateDataExportRequestBody) MarshalJSON() ([]byte, error) {
	type embed CreateDataExportRequestBody
	var marshaler = struct {
		embed
		ExportType     string `json:"export_type"`
		OutputFileType string `json:"output_file_type"`
	}{
		embed:          embed(*c),
		ExportType:     "company-feature-usage",
		OutputFileType: "csv",
	}
	return json.Marshal(marshaler)
}

// The created resource
type DataExportResponseData struct {
	AccountID      string    `json:"account_id" url:"account_id"`
	CreatedAt      time.Time `json:"created_at" url:"created_at"`
	EnvironmentID  string    `json:"environment_id" url:"environment_id"`
	ExportType     string    `json:"export_type" url:"export_type"`
	ID             string    `json:"id" url:"id"`
	Metadata       string    `json:"metadata" url:"metadata"`
	OutputFileType string    `json:"output_file_type" url:"output_file_type"`
	Status         string    `json:"status" url:"status"`
	UpdatedAt      time.Time `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DataExportResponseData) GetAccountID() string {
	if d == nil {
		return ""
	}
	return d.AccountID
}

func (d *DataExportResponseData) GetCreatedAt() time.Time {
	if d == nil {
		return time.Time{}
	}
	return d.CreatedAt
}

func (d *DataExportResponseData) GetEnvironmentID() string {
	if d == nil {
		return ""
	}
	return d.EnvironmentID
}

func (d *DataExportResponseData) GetExportType() string {
	if d == nil {
		return ""
	}
	return d.ExportType
}

func (d *DataExportResponseData) GetID() string {
	if d == nil {
		return ""
	}
	return d.ID
}

func (d *DataExportResponseData) GetMetadata() string {
	if d == nil {
		return ""
	}
	return d.Metadata
}

func (d *DataExportResponseData) GetOutputFileType() string {
	if d == nil {
		return ""
	}
	return d.OutputFileType
}

func (d *DataExportResponseData) GetStatus() string {
	if d == nil {
		return ""
	}
	return d.Status
}

func (d *DataExportResponseData) GetUpdatedAt() time.Time {
	if d == nil {
		return time.Time{}
	}
	return d.UpdatedAt
}

func (d *DataExportResponseData) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DataExportResponseData) UnmarshalJSON(data []byte) error {
	type embed DataExportResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*d),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*d = DataExportResponseData(unmarshaler.embed)
	d.CreatedAt = unmarshaler.CreatedAt.Time()
	d.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DataExportResponseData) MarshalJSON() ([]byte, error) {
	type embed DataExportResponseData
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*d),
		CreatedAt: internal.NewDateTime(d.CreatedAt),
		UpdatedAt: internal.NewDateTime(d.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (d *DataExportResponseData) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type CreateDataExportResponse struct {
	Data *DataExportResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateDataExportResponse) GetData() *DataExportResponseData {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *CreateDataExportResponse) GetParams() map[string]interface{} {
	if c == nil {
		return nil
	}
	return c.Params
}

func (c *CreateDataExportResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateDataExportResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateDataExportResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateDataExportResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateDataExportResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}
