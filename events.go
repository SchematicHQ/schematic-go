// This file was auto-generated by Fern from our API Definition.

package schematichq

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/schematichq/schematic-go/core"
	time "time"
)

type CreateEventBatchRequestBody struct {
	Events []*CreateEventRequestBody `json:"events,omitempty" url:"-"`
}

type GetEventSummariesRequest struct {
	Q             *string   `json:"-" url:"q,omitempty"`
	EventSubtypes []*string `json:"-" url:"event_subtypes,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type ListEventsRequest struct {
	CompanyID    *string   `json:"-" url:"company_id,omitempty"`
	EventSubtype *string   `json:"-" url:"event_subtype,omitempty"`
	EventTypes   []*string `json:"-" url:"event_types,omitempty"`
	FlagID       *string   `json:"-" url:"flag_id,omitempty"`
	UserID       *string   `json:"-" url:"user_id,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type ListMetricCountsRequest struct {
	StartTime     *time.Time `json:"-" url:"start_time,omitempty"`
	EndTime       *time.Time `json:"-" url:"end_time,omitempty"`
	EventSubtype  *string    `json:"-" url:"event_subtype,omitempty"`
	EventSubtypes []*string  `json:"-" url:"event_subtypes,omitempty"`
	CompanyID     *string    `json:"-" url:"company_id,omitempty"`
	CompanyIDs    []*string  `json:"-" url:"company_ids,omitempty"`
	UserID        *string    `json:"-" url:"user_id,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset   *int    `json:"-" url:"offset,omitempty"`
	Grouping *string `json:"-" url:"grouping,omitempty"`
}

type CreateEventBatchResponse struct {
	Data *RawEventBatchResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateEventBatchResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateEventBatchResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateEventBatchResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateEventBatchResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateEventBatchResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateEventResponse struct {
	Data *RawEventResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateEventResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateEventResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateEventResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateEventResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateEventResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type GetEventResponse struct {
	Data *EventDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetEventResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetEventResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetEventResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetEventResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetEventResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetEventSummariesResponse struct {
	// The returned resources
	Data []*EventSummaryResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *GetEventSummariesParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetEventSummariesResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetEventSummariesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetEventSummariesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetEventSummariesResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetEventSummariesResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetEventSummaryBySubtypeResponse struct {
	Data *EventSummaryResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetEventSummaryBySubtypeResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetEventSummaryBySubtypeResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetEventSummaryBySubtypeResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetEventSummaryBySubtypeResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetEventSummaryBySubtypeResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetSegmentIntegrationStatusResponse struct {
	Data *SegmentStatusResp `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetSegmentIntegrationStatusResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetSegmentIntegrationStatusResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetSegmentIntegrationStatusResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetSegmentIntegrationStatusResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetSegmentIntegrationStatusResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ListEventsResponse struct {
	// The returned resources
	Data []*EventDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListEventsParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListEventsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListEventsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListEventsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListEventsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListEventsResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListMetricCountsResponse struct {
	// The returned resources
	Data []*MetricCountsHourlyResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListMetricCountsParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListMetricCountsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListMetricCountsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListMetricCountsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListMetricCountsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListMetricCountsResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}
