// This file was auto-generated by Fern from our API Definition.

package schematichq

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/schematichq/schematic-go/core"
)

type CountFeaturesRequest struct {
	IDs []*string `json:"-" url:"ids,omitempty"`
	Q   *string   `json:"-" url:"q,omitempty"`
	// Filter out features that already have a company override for the specified company ID
	WithoutCompanyOverrideFor *string `json:"-" url:"without_company_override_for,omitempty"`
	// Filter out features that already have a plan entitlement for the specified plan ID
	WithoutPlanEntitlementFor *string `json:"-" url:"without_plan_entitlement_for,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type CountFlagsRequest struct {
	FeatureID *string   `json:"-" url:"feature_id,omitempty"`
	IDs       []*string `json:"-" url:"ids,omitempty"`
	Q         *string   `json:"-" url:"q,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type CreateFeatureRequestBody struct {
	Description    string                                        `json:"description" url:"-"`
	EventSubtype   *core.Optional[string]                        `json:"event_subtype,omitempty" url:"-"`
	FeatureType    CreateFeatureRequestBodyFeatureType           `json:"feature_type" url:"-"`
	Flag           *core.Optional[CreateOrUpdateFlagRequestBody] `json:"flag,omitempty" url:"-"`
	Icon           *core.Optional[string]                        `json:"icon,omitempty" url:"-"`
	LifecyclePhase *core.Optional[string]                        `json:"lifecycle_phase,omitempty" url:"-"`
	MaintainerID   *core.Optional[string]                        `json:"maintainer_id,omitempty" url:"-"`
	Name           string                                        `json:"name" url:"-"`
	TraitID        *core.Optional[string]                        `json:"trait_id,omitempty" url:"-"`
}

type ListFeaturesRequest struct {
	IDs []*string `json:"-" url:"ids,omitempty"`
	Q   *string   `json:"-" url:"q,omitempty"`
	// Filter out features that already have a company override for the specified company ID
	WithoutCompanyOverrideFor *string `json:"-" url:"without_company_override_for,omitempty"`
	// Filter out features that already have a plan entitlement for the specified plan ID
	WithoutPlanEntitlementFor *string `json:"-" url:"without_plan_entitlement_for,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type ListFlagsRequest struct {
	FeatureID *string   `json:"-" url:"feature_id,omitempty"`
	IDs       []*string `json:"-" url:"ids,omitempty"`
	Q         *string   `json:"-" url:"q,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type CheckFlagResponse struct {
	Data *CheckFlagResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CheckFlagResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CheckFlagResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CheckFlagResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CheckFlagResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CheckFlagResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CheckFlagsResponse struct {
	Data *CheckFlagsResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CheckFlagsResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CheckFlagsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CheckFlagsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CheckFlagsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CheckFlagsResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CountAudienceCompaniesResponse struct {
	Data *CountResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CountAudienceCompaniesResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountAudienceCompaniesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CountAudienceCompaniesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountAudienceCompaniesResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountAudienceCompaniesResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CountAudienceUsersResponse struct {
	Data *CountResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CountAudienceUsersResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountAudienceUsersResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CountAudienceUsersResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountAudienceUsersResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountAudienceUsersResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CountFeaturesResponse struct {
	Data *CountResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *CountFeaturesParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CountFeaturesResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountFeaturesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CountFeaturesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountFeaturesResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountFeaturesResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CountFlagsResponse struct {
	Data *CountResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *CountFlagsParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CountFlagsResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountFlagsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CountFlagsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountFlagsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountFlagsResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateFeatureRequestBodyFeatureType string

const (
	CreateFeatureRequestBodyFeatureTypeBoolean CreateFeatureRequestBodyFeatureType = "boolean"
	CreateFeatureRequestBodyFeatureTypeEvent   CreateFeatureRequestBodyFeatureType = "event"
	CreateFeatureRequestBodyFeatureTypeTrait   CreateFeatureRequestBodyFeatureType = "trait"
)

func NewCreateFeatureRequestBodyFeatureTypeFromString(s string) (CreateFeatureRequestBodyFeatureType, error) {
	switch s {
	case "boolean":
		return CreateFeatureRequestBodyFeatureTypeBoolean, nil
	case "event":
		return CreateFeatureRequestBodyFeatureTypeEvent, nil
	case "trait":
		return CreateFeatureRequestBodyFeatureTypeTrait, nil
	}
	var t CreateFeatureRequestBodyFeatureType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CreateFeatureRequestBodyFeatureType) Ptr() *CreateFeatureRequestBodyFeatureType {
	return &c
}

type CreateFeatureResponse struct {
	Data *FeatureDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateFeatureResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateFeatureResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateFeatureResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateFeatureResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateFeatureResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateFlagResponse struct {
	Data *FlagDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateFlagResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateFlagResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateFlagResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateFlagResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateFlagResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DeleteFeatureResponse struct {
	Data *DeleteResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DeleteFeatureResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteFeatureResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteFeatureResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteFeatureResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteFeatureResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DeleteFlagResponse struct {
	Data *DeleteResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DeleteFlagResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteFlagResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteFlagResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteFlagResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteFlagResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type GetFeatureResponse struct {
	Data *FeatureDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetFeatureResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetFeatureResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetFeatureResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetFeatureResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetFeatureResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetFlagResponse struct {
	Data *FlagDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetFlagResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetFlagResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetFlagResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetFlagResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetFlagResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ListAudienceCompaniesResponse struct {
	// The returned resources
	Data []*CompanyDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListAudienceCompaniesResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListAudienceCompaniesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListAudienceCompaniesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListAudienceCompaniesResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListAudienceCompaniesResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListAudienceUsersResponse struct {
	// The returned resources
	Data []*UserDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListAudienceUsersResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListAudienceUsersResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListAudienceUsersResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListAudienceUsersResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListAudienceUsersResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListFeaturesResponse struct {
	// The returned resources
	Data []*FeatureDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListFeaturesParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListFeaturesResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListFeaturesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListFeaturesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListFeaturesResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListFeaturesResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListFlagsResponse struct {
	// The returned resources
	Data []*FlagDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListFlagsParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListFlagsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListFlagsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListFlagsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListFlagsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListFlagsResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type UpdateFeatureRequestBodyFeatureType string

const (
	UpdateFeatureRequestBodyFeatureTypeBoolean UpdateFeatureRequestBodyFeatureType = "boolean"
	UpdateFeatureRequestBodyFeatureTypeEvent   UpdateFeatureRequestBodyFeatureType = "event"
	UpdateFeatureRequestBodyFeatureTypeTrait   UpdateFeatureRequestBodyFeatureType = "trait"
)

func NewUpdateFeatureRequestBodyFeatureTypeFromString(s string) (UpdateFeatureRequestBodyFeatureType, error) {
	switch s {
	case "boolean":
		return UpdateFeatureRequestBodyFeatureTypeBoolean, nil
	case "event":
		return UpdateFeatureRequestBodyFeatureTypeEvent, nil
	case "trait":
		return UpdateFeatureRequestBodyFeatureTypeTrait, nil
	}
	var t UpdateFeatureRequestBodyFeatureType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UpdateFeatureRequestBodyFeatureType) Ptr() *UpdateFeatureRequestBodyFeatureType {
	return &u
}

type UpdateFeatureResponse struct {
	Data *FeatureDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpdateFeatureResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateFeatureResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateFeatureResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateFeatureResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateFeatureResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateFlagResponse struct {
	Data *FlagDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpdateFlagResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateFlagResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateFlagResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateFlagResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateFlagResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateFlagRulesResponse struct {
	Data *RulesDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpdateFlagRulesResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateFlagRulesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateFlagRulesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateFlagRulesResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateFlagRulesResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateFeatureRequestBody struct {
	Description    *core.Optional[string]                              `json:"description,omitempty" url:"-"`
	EventSubtype   *core.Optional[string]                              `json:"event_subtype,omitempty" url:"-"`
	FeatureType    *core.Optional[UpdateFeatureRequestBodyFeatureType] `json:"feature_type,omitempty" url:"-"`
	Flag           *core.Optional[CreateOrUpdateFlagRequestBody]       `json:"flag,omitempty" url:"-"`
	Icon           *core.Optional[string]                              `json:"icon,omitempty" url:"-"`
	LifecyclePhase *core.Optional[string]                              `json:"lifecycle_phase,omitempty" url:"-"`
	MaintainerID   *core.Optional[string]                              `json:"maintainer_id,omitempty" url:"-"`
	Name           *core.Optional[string]                              `json:"name,omitempty" url:"-"`
	TraitID        *core.Optional[string]                              `json:"trait_id,omitempty" url:"-"`
}

type UpdateFlagRulesRequestBody struct {
	Rules []*CreateOrUpdateRuleRequestBody `json:"rules,omitempty" url:"-"`
}
