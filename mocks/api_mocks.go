// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SchematicHQ/schematic-go/api (interfaces: HTTPClient,AccountsAPI,WebhooksAPI,CrmAPI,BillingAPI,CompaniesAPI,EntitlementsAPI,EventsAPI,FeaturesAPI,PlansAPI,PlangroupsAPI)
//
// Generated by this command:
//
//	mockgen -destination=mocks/api_mocks.go -package=mocks github.com/SchematicHQ/schematic-go/api HTTPClient,AccountsAPI,WebhooksAPI,CrmAPI,BillingAPI,CompaniesAPI,EntitlementsAPI,EventsAPI,FeaturesAPI,PlansAPI,PlangroupsAPI
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	api "github.com/SchematicHQ/schematic-go/api"
	gomock "go.uber.org/mock/gomock"
)

// MockHTTPClient is a mock of HTTPClient interface.
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient.
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance.
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHTTPClient) Do(arg0 *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHTTPClientMockRecorder) Do(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHTTPClient)(nil).Do), arg0)
}

// MockAccountsAPI is a mock of AccountsAPI interface.
type MockAccountsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAccountsAPIMockRecorder
}

// MockAccountsAPIMockRecorder is the mock recorder for MockAccountsAPI.
type MockAccountsAPIMockRecorder struct {
	mock *MockAccountsAPI
}

// NewMockAccountsAPI creates a new mock instance.
func NewMockAccountsAPI(ctrl *gomock.Controller) *MockAccountsAPI {
	mock := &MockAccountsAPI{ctrl: ctrl}
	mock.recorder = &MockAccountsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountsAPI) EXPECT() *MockAccountsAPIMockRecorder {
	return m.recorder
}

// CountApiKeys mocks base method.
func (m *MockAccountsAPI) CountApiKeys(arg0 context.Context) api.ApiCountApiKeysRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountApiKeys", arg0)
	ret0, _ := ret[0].(api.ApiCountApiKeysRequest)
	return ret0
}

// CountApiKeys indicates an expected call of CountApiKeys.
func (mr *MockAccountsAPIMockRecorder) CountApiKeys(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountApiKeys", reflect.TypeOf((*MockAccountsAPI)(nil).CountApiKeys), arg0)
}

// CountApiKeysExecute mocks base method.
func (m *MockAccountsAPI) CountApiKeysExecute(arg0 api.ApiCountApiKeysRequest) (*api.CountApiKeysResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountApiKeysExecute", arg0)
	ret0, _ := ret[0].(*api.CountApiKeysResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CountApiKeysExecute indicates an expected call of CountApiKeysExecute.
func (mr *MockAccountsAPIMockRecorder) CountApiKeysExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountApiKeysExecute", reflect.TypeOf((*MockAccountsAPI)(nil).CountApiKeysExecute), arg0)
}

// CountApiRequests mocks base method.
func (m *MockAccountsAPI) CountApiRequests(arg0 context.Context) api.ApiCountApiRequestsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountApiRequests", arg0)
	ret0, _ := ret[0].(api.ApiCountApiRequestsRequest)
	return ret0
}

// CountApiRequests indicates an expected call of CountApiRequests.
func (mr *MockAccountsAPIMockRecorder) CountApiRequests(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountApiRequests", reflect.TypeOf((*MockAccountsAPI)(nil).CountApiRequests), arg0)
}

// CountApiRequestsExecute mocks base method.
func (m *MockAccountsAPI) CountApiRequestsExecute(arg0 api.ApiCountApiRequestsRequest) (*api.CountApiRequestsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountApiRequestsExecute", arg0)
	ret0, _ := ret[0].(*api.CountApiRequestsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CountApiRequestsExecute indicates an expected call of CountApiRequestsExecute.
func (mr *MockAccountsAPIMockRecorder) CountApiRequestsExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountApiRequestsExecute", reflect.TypeOf((*MockAccountsAPI)(nil).CountApiRequestsExecute), arg0)
}

// CreateApiKey mocks base method.
func (m *MockAccountsAPI) CreateApiKey(arg0 context.Context) api.ApiCreateApiKeyRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApiKey", arg0)
	ret0, _ := ret[0].(api.ApiCreateApiKeyRequest)
	return ret0
}

// CreateApiKey indicates an expected call of CreateApiKey.
func (mr *MockAccountsAPIMockRecorder) CreateApiKey(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApiKey", reflect.TypeOf((*MockAccountsAPI)(nil).CreateApiKey), arg0)
}

// CreateApiKeyExecute mocks base method.
func (m *MockAccountsAPI) CreateApiKeyExecute(arg0 api.ApiCreateApiKeyRequest) (*api.CreateApiKeyResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApiKeyExecute", arg0)
	ret0, _ := ret[0].(*api.CreateApiKeyResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateApiKeyExecute indicates an expected call of CreateApiKeyExecute.
func (mr *MockAccountsAPIMockRecorder) CreateApiKeyExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApiKeyExecute", reflect.TypeOf((*MockAccountsAPI)(nil).CreateApiKeyExecute), arg0)
}

// CreateEnvironment mocks base method.
func (m *MockAccountsAPI) CreateEnvironment(arg0 context.Context) api.ApiCreateEnvironmentRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironment", arg0)
	ret0, _ := ret[0].(api.ApiCreateEnvironmentRequest)
	return ret0
}

// CreateEnvironment indicates an expected call of CreateEnvironment.
func (mr *MockAccountsAPIMockRecorder) CreateEnvironment(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironment", reflect.TypeOf((*MockAccountsAPI)(nil).CreateEnvironment), arg0)
}

// CreateEnvironmentExecute mocks base method.
func (m *MockAccountsAPI) CreateEnvironmentExecute(arg0 api.ApiCreateEnvironmentRequest) (*api.CreateEnvironmentResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnvironmentExecute", arg0)
	ret0, _ := ret[0].(*api.CreateEnvironmentResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateEnvironmentExecute indicates an expected call of CreateEnvironmentExecute.
func (mr *MockAccountsAPIMockRecorder) CreateEnvironmentExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironmentExecute", reflect.TypeOf((*MockAccountsAPI)(nil).CreateEnvironmentExecute), arg0)
}

// DeleteApiKey mocks base method.
func (m *MockAccountsAPI) DeleteApiKey(arg0 context.Context, arg1 string) api.ApiDeleteApiKeyRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApiKey", arg0, arg1)
	ret0, _ := ret[0].(api.ApiDeleteApiKeyRequest)
	return ret0
}

// DeleteApiKey indicates an expected call of DeleteApiKey.
func (mr *MockAccountsAPIMockRecorder) DeleteApiKey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApiKey", reflect.TypeOf((*MockAccountsAPI)(nil).DeleteApiKey), arg0, arg1)
}

// DeleteApiKeyExecute mocks base method.
func (m *MockAccountsAPI) DeleteApiKeyExecute(arg0 api.ApiDeleteApiKeyRequest) (*api.DeleteApiKeyResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApiKeyExecute", arg0)
	ret0, _ := ret[0].(*api.DeleteApiKeyResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteApiKeyExecute indicates an expected call of DeleteApiKeyExecute.
func (mr *MockAccountsAPIMockRecorder) DeleteApiKeyExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApiKeyExecute", reflect.TypeOf((*MockAccountsAPI)(nil).DeleteApiKeyExecute), arg0)
}

// DeleteEnvironment mocks base method.
func (m *MockAccountsAPI) DeleteEnvironment(arg0 context.Context, arg1 string) api.ApiDeleteEnvironmentRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironment", arg0, arg1)
	ret0, _ := ret[0].(api.ApiDeleteEnvironmentRequest)
	return ret0
}

// DeleteEnvironment indicates an expected call of DeleteEnvironment.
func (mr *MockAccountsAPIMockRecorder) DeleteEnvironment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironment", reflect.TypeOf((*MockAccountsAPI)(nil).DeleteEnvironment), arg0, arg1)
}

// DeleteEnvironmentExecute mocks base method.
func (m *MockAccountsAPI) DeleteEnvironmentExecute(arg0 api.ApiDeleteEnvironmentRequest) (*api.DeleteEnvironmentResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironmentExecute", arg0)
	ret0, _ := ret[0].(*api.DeleteEnvironmentResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteEnvironmentExecute indicates an expected call of DeleteEnvironmentExecute.
func (mr *MockAccountsAPIMockRecorder) DeleteEnvironmentExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironmentExecute", reflect.TypeOf((*MockAccountsAPI)(nil).DeleteEnvironmentExecute), arg0)
}

// GetApiKey mocks base method.
func (m *MockAccountsAPI) GetApiKey(arg0 context.Context, arg1 string) api.ApiGetApiKeyRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiKey", arg0, arg1)
	ret0, _ := ret[0].(api.ApiGetApiKeyRequest)
	return ret0
}

// GetApiKey indicates an expected call of GetApiKey.
func (mr *MockAccountsAPIMockRecorder) GetApiKey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiKey", reflect.TypeOf((*MockAccountsAPI)(nil).GetApiKey), arg0, arg1)
}

// GetApiKeyExecute mocks base method.
func (m *MockAccountsAPI) GetApiKeyExecute(arg0 api.ApiGetApiKeyRequest) (*api.GetApiKeyResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiKeyExecute", arg0)
	ret0, _ := ret[0].(*api.GetApiKeyResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetApiKeyExecute indicates an expected call of GetApiKeyExecute.
func (mr *MockAccountsAPIMockRecorder) GetApiKeyExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiKeyExecute", reflect.TypeOf((*MockAccountsAPI)(nil).GetApiKeyExecute), arg0)
}

// GetApiRequest mocks base method.
func (m *MockAccountsAPI) GetApiRequest(arg0 context.Context, arg1 string) api.ApiGetApiRequestRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiRequest", arg0, arg1)
	ret0, _ := ret[0].(api.ApiGetApiRequestRequest)
	return ret0
}

// GetApiRequest indicates an expected call of GetApiRequest.
func (mr *MockAccountsAPIMockRecorder) GetApiRequest(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiRequest", reflect.TypeOf((*MockAccountsAPI)(nil).GetApiRequest), arg0, arg1)
}

// GetApiRequestExecute mocks base method.
func (m *MockAccountsAPI) GetApiRequestExecute(arg0 api.ApiGetApiRequestRequest) (*api.GetApiRequestResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiRequestExecute", arg0)
	ret0, _ := ret[0].(*api.GetApiRequestResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetApiRequestExecute indicates an expected call of GetApiRequestExecute.
func (mr *MockAccountsAPIMockRecorder) GetApiRequestExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiRequestExecute", reflect.TypeOf((*MockAccountsAPI)(nil).GetApiRequestExecute), arg0)
}

// GetEnvironment mocks base method.
func (m *MockAccountsAPI) GetEnvironment(arg0 context.Context, arg1 string) api.ApiGetEnvironmentRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironment", arg0, arg1)
	ret0, _ := ret[0].(api.ApiGetEnvironmentRequest)
	return ret0
}

// GetEnvironment indicates an expected call of GetEnvironment.
func (mr *MockAccountsAPIMockRecorder) GetEnvironment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*MockAccountsAPI)(nil).GetEnvironment), arg0, arg1)
}

// GetEnvironmentExecute mocks base method.
func (m *MockAccountsAPI) GetEnvironmentExecute(arg0 api.ApiGetEnvironmentRequest) (*api.GetEnvironmentResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironmentExecute", arg0)
	ret0, _ := ret[0].(*api.GetEnvironmentResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEnvironmentExecute indicates an expected call of GetEnvironmentExecute.
func (mr *MockAccountsAPIMockRecorder) GetEnvironmentExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentExecute", reflect.TypeOf((*MockAccountsAPI)(nil).GetEnvironmentExecute), arg0)
}

// ListApiKeys mocks base method.
func (m *MockAccountsAPI) ListApiKeys(arg0 context.Context) api.ApiListApiKeysRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApiKeys", arg0)
	ret0, _ := ret[0].(api.ApiListApiKeysRequest)
	return ret0
}

// ListApiKeys indicates an expected call of ListApiKeys.
func (mr *MockAccountsAPIMockRecorder) ListApiKeys(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApiKeys", reflect.TypeOf((*MockAccountsAPI)(nil).ListApiKeys), arg0)
}

// ListApiKeysExecute mocks base method.
func (m *MockAccountsAPI) ListApiKeysExecute(arg0 api.ApiListApiKeysRequest) (*api.ListApiKeysResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApiKeysExecute", arg0)
	ret0, _ := ret[0].(*api.ListApiKeysResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListApiKeysExecute indicates an expected call of ListApiKeysExecute.
func (mr *MockAccountsAPIMockRecorder) ListApiKeysExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApiKeysExecute", reflect.TypeOf((*MockAccountsAPI)(nil).ListApiKeysExecute), arg0)
}

// ListApiRequests mocks base method.
func (m *MockAccountsAPI) ListApiRequests(arg0 context.Context) api.ApiListApiRequestsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApiRequests", arg0)
	ret0, _ := ret[0].(api.ApiListApiRequestsRequest)
	return ret0
}

// ListApiRequests indicates an expected call of ListApiRequests.
func (mr *MockAccountsAPIMockRecorder) ListApiRequests(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApiRequests", reflect.TypeOf((*MockAccountsAPI)(nil).ListApiRequests), arg0)
}

// ListApiRequestsExecute mocks base method.
func (m *MockAccountsAPI) ListApiRequestsExecute(arg0 api.ApiListApiRequestsRequest) (*api.ListApiRequestsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApiRequestsExecute", arg0)
	ret0, _ := ret[0].(*api.ListApiRequestsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListApiRequestsExecute indicates an expected call of ListApiRequestsExecute.
func (mr *MockAccountsAPIMockRecorder) ListApiRequestsExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApiRequestsExecute", reflect.TypeOf((*MockAccountsAPI)(nil).ListApiRequestsExecute), arg0)
}

// ListEnvironments mocks base method.
func (m *MockAccountsAPI) ListEnvironments(arg0 context.Context) api.ApiListEnvironmentsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironments", arg0)
	ret0, _ := ret[0].(api.ApiListEnvironmentsRequest)
	return ret0
}

// ListEnvironments indicates an expected call of ListEnvironments.
func (mr *MockAccountsAPIMockRecorder) ListEnvironments(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironments", reflect.TypeOf((*MockAccountsAPI)(nil).ListEnvironments), arg0)
}

// ListEnvironmentsExecute mocks base method.
func (m *MockAccountsAPI) ListEnvironmentsExecute(arg0 api.ApiListEnvironmentsRequest) (*api.ListEnvironmentsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnvironmentsExecute", arg0)
	ret0, _ := ret[0].(*api.ListEnvironmentsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEnvironmentsExecute indicates an expected call of ListEnvironmentsExecute.
func (mr *MockAccountsAPIMockRecorder) ListEnvironmentsExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironmentsExecute", reflect.TypeOf((*MockAccountsAPI)(nil).ListEnvironmentsExecute), arg0)
}

// UpdateApiKey mocks base method.
func (m *MockAccountsAPI) UpdateApiKey(arg0 context.Context, arg1 string) api.ApiUpdateApiKeyRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApiKey", arg0, arg1)
	ret0, _ := ret[0].(api.ApiUpdateApiKeyRequest)
	return ret0
}

// UpdateApiKey indicates an expected call of UpdateApiKey.
func (mr *MockAccountsAPIMockRecorder) UpdateApiKey(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApiKey", reflect.TypeOf((*MockAccountsAPI)(nil).UpdateApiKey), arg0, arg1)
}

// UpdateApiKeyExecute mocks base method.
func (m *MockAccountsAPI) UpdateApiKeyExecute(arg0 api.ApiUpdateApiKeyRequest) (*api.UpdateApiKeyResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApiKeyExecute", arg0)
	ret0, _ := ret[0].(*api.UpdateApiKeyResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateApiKeyExecute indicates an expected call of UpdateApiKeyExecute.
func (mr *MockAccountsAPIMockRecorder) UpdateApiKeyExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApiKeyExecute", reflect.TypeOf((*MockAccountsAPI)(nil).UpdateApiKeyExecute), arg0)
}

// UpdateEnvironment mocks base method.
func (m *MockAccountsAPI) UpdateEnvironment(arg0 context.Context, arg1 string) api.ApiUpdateEnvironmentRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironment", arg0, arg1)
	ret0, _ := ret[0].(api.ApiUpdateEnvironmentRequest)
	return ret0
}

// UpdateEnvironment indicates an expected call of UpdateEnvironment.
func (mr *MockAccountsAPIMockRecorder) UpdateEnvironment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironment", reflect.TypeOf((*MockAccountsAPI)(nil).UpdateEnvironment), arg0, arg1)
}

// UpdateEnvironmentExecute mocks base method.
func (m *MockAccountsAPI) UpdateEnvironmentExecute(arg0 api.ApiUpdateEnvironmentRequest) (*api.UpdateEnvironmentResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnvironmentExecute", arg0)
	ret0, _ := ret[0].(*api.UpdateEnvironmentResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateEnvironmentExecute indicates an expected call of UpdateEnvironmentExecute.
func (mr *MockAccountsAPIMockRecorder) UpdateEnvironmentExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnvironmentExecute", reflect.TypeOf((*MockAccountsAPI)(nil).UpdateEnvironmentExecute), arg0)
}

// MockWebhooksAPI is a mock of WebhooksAPI interface.
type MockWebhooksAPI struct {
	ctrl     *gomock.Controller
	recorder *MockWebhooksAPIMockRecorder
}

// MockWebhooksAPIMockRecorder is the mock recorder for MockWebhooksAPI.
type MockWebhooksAPIMockRecorder struct {
	mock *MockWebhooksAPI
}

// NewMockWebhooksAPI creates a new mock instance.
func NewMockWebhooksAPI(ctrl *gomock.Controller) *MockWebhooksAPI {
	mock := &MockWebhooksAPI{ctrl: ctrl}
	mock.recorder = &MockWebhooksAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhooksAPI) EXPECT() *MockWebhooksAPIMockRecorder {
	return m.recorder
}

// CountWebhookEvents mocks base method.
func (m *MockWebhooksAPI) CountWebhookEvents(arg0 context.Context) api.ApiCountWebhookEventsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountWebhookEvents", arg0)
	ret0, _ := ret[0].(api.ApiCountWebhookEventsRequest)
	return ret0
}

// CountWebhookEvents indicates an expected call of CountWebhookEvents.
func (mr *MockWebhooksAPIMockRecorder) CountWebhookEvents(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountWebhookEvents", reflect.TypeOf((*MockWebhooksAPI)(nil).CountWebhookEvents), arg0)
}

// CountWebhookEventsExecute mocks base method.
func (m *MockWebhooksAPI) CountWebhookEventsExecute(arg0 api.ApiCountWebhookEventsRequest) (*api.CountWebhookEventsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountWebhookEventsExecute", arg0)
	ret0, _ := ret[0].(*api.CountWebhookEventsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CountWebhookEventsExecute indicates an expected call of CountWebhookEventsExecute.
func (mr *MockWebhooksAPIMockRecorder) CountWebhookEventsExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountWebhookEventsExecute", reflect.TypeOf((*MockWebhooksAPI)(nil).CountWebhookEventsExecute), arg0)
}

// CountWebhooks mocks base method.
func (m *MockWebhooksAPI) CountWebhooks(arg0 context.Context) api.ApiCountWebhooksRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountWebhooks", arg0)
	ret0, _ := ret[0].(api.ApiCountWebhooksRequest)
	return ret0
}

// CountWebhooks indicates an expected call of CountWebhooks.
func (mr *MockWebhooksAPIMockRecorder) CountWebhooks(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountWebhooks", reflect.TypeOf((*MockWebhooksAPI)(nil).CountWebhooks), arg0)
}

// CountWebhooksExecute mocks base method.
func (m *MockWebhooksAPI) CountWebhooksExecute(arg0 api.ApiCountWebhooksRequest) (*api.CountWebhooksResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountWebhooksExecute", arg0)
	ret0, _ := ret[0].(*api.CountWebhooksResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CountWebhooksExecute indicates an expected call of CountWebhooksExecute.
func (mr *MockWebhooksAPIMockRecorder) CountWebhooksExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountWebhooksExecute", reflect.TypeOf((*MockWebhooksAPI)(nil).CountWebhooksExecute), arg0)
}

// CreateWebhook mocks base method.
func (m *MockWebhooksAPI) CreateWebhook(arg0 context.Context) api.ApiCreateWebhookRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWebhook", arg0)
	ret0, _ := ret[0].(api.ApiCreateWebhookRequest)
	return ret0
}

// CreateWebhook indicates an expected call of CreateWebhook.
func (mr *MockWebhooksAPIMockRecorder) CreateWebhook(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebhook", reflect.TypeOf((*MockWebhooksAPI)(nil).CreateWebhook), arg0)
}

// CreateWebhookExecute mocks base method.
func (m *MockWebhooksAPI) CreateWebhookExecute(arg0 api.ApiCreateWebhookRequest) (*api.CreateWebhookResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWebhookExecute", arg0)
	ret0, _ := ret[0].(*api.CreateWebhookResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateWebhookExecute indicates an expected call of CreateWebhookExecute.
func (mr *MockWebhooksAPIMockRecorder) CreateWebhookExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWebhookExecute", reflect.TypeOf((*MockWebhooksAPI)(nil).CreateWebhookExecute), arg0)
}

// DeleteWebhook mocks base method.
func (m *MockWebhooksAPI) DeleteWebhook(arg0 context.Context, arg1 string) api.ApiDeleteWebhookRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWebhook", arg0, arg1)
	ret0, _ := ret[0].(api.ApiDeleteWebhookRequest)
	return ret0
}

// DeleteWebhook indicates an expected call of DeleteWebhook.
func (mr *MockWebhooksAPIMockRecorder) DeleteWebhook(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebhook", reflect.TypeOf((*MockWebhooksAPI)(nil).DeleteWebhook), arg0, arg1)
}

// DeleteWebhookExecute mocks base method.
func (m *MockWebhooksAPI) DeleteWebhookExecute(arg0 api.ApiDeleteWebhookRequest) (*api.DeleteWebhookResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWebhookExecute", arg0)
	ret0, _ := ret[0].(*api.DeleteWebhookResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteWebhookExecute indicates an expected call of DeleteWebhookExecute.
func (mr *MockWebhooksAPIMockRecorder) DeleteWebhookExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebhookExecute", reflect.TypeOf((*MockWebhooksAPI)(nil).DeleteWebhookExecute), arg0)
}

// GetWebhook mocks base method.
func (m *MockWebhooksAPI) GetWebhook(arg0 context.Context, arg1 string) api.ApiGetWebhookRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhook", arg0, arg1)
	ret0, _ := ret[0].(api.ApiGetWebhookRequest)
	return ret0
}

// GetWebhook indicates an expected call of GetWebhook.
func (mr *MockWebhooksAPIMockRecorder) GetWebhook(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhook", reflect.TypeOf((*MockWebhooksAPI)(nil).GetWebhook), arg0, arg1)
}

// GetWebhookEvent mocks base method.
func (m *MockWebhooksAPI) GetWebhookEvent(arg0 context.Context, arg1 string) api.ApiGetWebhookEventRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookEvent", arg0, arg1)
	ret0, _ := ret[0].(api.ApiGetWebhookEventRequest)
	return ret0
}

// GetWebhookEvent indicates an expected call of GetWebhookEvent.
func (mr *MockWebhooksAPIMockRecorder) GetWebhookEvent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookEvent", reflect.TypeOf((*MockWebhooksAPI)(nil).GetWebhookEvent), arg0, arg1)
}

// GetWebhookEventExecute mocks base method.
func (m *MockWebhooksAPI) GetWebhookEventExecute(arg0 api.ApiGetWebhookEventRequest) (*api.GetWebhookEventResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookEventExecute", arg0)
	ret0, _ := ret[0].(*api.GetWebhookEventResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWebhookEventExecute indicates an expected call of GetWebhookEventExecute.
func (mr *MockWebhooksAPIMockRecorder) GetWebhookEventExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookEventExecute", reflect.TypeOf((*MockWebhooksAPI)(nil).GetWebhookEventExecute), arg0)
}

// GetWebhookExecute mocks base method.
func (m *MockWebhooksAPI) GetWebhookExecute(arg0 api.ApiGetWebhookRequest) (*api.GetWebhookResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookExecute", arg0)
	ret0, _ := ret[0].(*api.GetWebhookResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWebhookExecute indicates an expected call of GetWebhookExecute.
func (mr *MockWebhooksAPIMockRecorder) GetWebhookExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookExecute", reflect.TypeOf((*MockWebhooksAPI)(nil).GetWebhookExecute), arg0)
}

// ListWebhookEvents mocks base method.
func (m *MockWebhooksAPI) ListWebhookEvents(arg0 context.Context) api.ApiListWebhookEventsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWebhookEvents", arg0)
	ret0, _ := ret[0].(api.ApiListWebhookEventsRequest)
	return ret0
}

// ListWebhookEvents indicates an expected call of ListWebhookEvents.
func (mr *MockWebhooksAPIMockRecorder) ListWebhookEvents(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWebhookEvents", reflect.TypeOf((*MockWebhooksAPI)(nil).ListWebhookEvents), arg0)
}

// ListWebhookEventsExecute mocks base method.
func (m *MockWebhooksAPI) ListWebhookEventsExecute(arg0 api.ApiListWebhookEventsRequest) (*api.ListWebhookEventsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWebhookEventsExecute", arg0)
	ret0, _ := ret[0].(*api.ListWebhookEventsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListWebhookEventsExecute indicates an expected call of ListWebhookEventsExecute.
func (mr *MockWebhooksAPIMockRecorder) ListWebhookEventsExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWebhookEventsExecute", reflect.TypeOf((*MockWebhooksAPI)(nil).ListWebhookEventsExecute), arg0)
}

// ListWebhooks mocks base method.
func (m *MockWebhooksAPI) ListWebhooks(arg0 context.Context) api.ApiListWebhooksRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWebhooks", arg0)
	ret0, _ := ret[0].(api.ApiListWebhooksRequest)
	return ret0
}

// ListWebhooks indicates an expected call of ListWebhooks.
func (mr *MockWebhooksAPIMockRecorder) ListWebhooks(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWebhooks", reflect.TypeOf((*MockWebhooksAPI)(nil).ListWebhooks), arg0)
}

// ListWebhooksExecute mocks base method.
func (m *MockWebhooksAPI) ListWebhooksExecute(arg0 api.ApiListWebhooksRequest) (*api.ListWebhooksResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWebhooksExecute", arg0)
	ret0, _ := ret[0].(*api.ListWebhooksResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListWebhooksExecute indicates an expected call of ListWebhooksExecute.
func (mr *MockWebhooksAPIMockRecorder) ListWebhooksExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWebhooksExecute", reflect.TypeOf((*MockWebhooksAPI)(nil).ListWebhooksExecute), arg0)
}

// UpdateWebhook mocks base method.
func (m *MockWebhooksAPI) UpdateWebhook(arg0 context.Context, arg1 string) api.ApiUpdateWebhookRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWebhook", arg0, arg1)
	ret0, _ := ret[0].(api.ApiUpdateWebhookRequest)
	return ret0
}

// UpdateWebhook indicates an expected call of UpdateWebhook.
func (mr *MockWebhooksAPIMockRecorder) UpdateWebhook(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWebhook", reflect.TypeOf((*MockWebhooksAPI)(nil).UpdateWebhook), arg0, arg1)
}

// UpdateWebhookExecute mocks base method.
func (m *MockWebhooksAPI) UpdateWebhookExecute(arg0 api.ApiUpdateWebhookRequest) (*api.UpdateWebhookResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWebhookExecute", arg0)
	ret0, _ := ret[0].(*api.UpdateWebhookResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateWebhookExecute indicates an expected call of UpdateWebhookExecute.
func (mr *MockWebhooksAPIMockRecorder) UpdateWebhookExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWebhookExecute", reflect.TypeOf((*MockWebhooksAPI)(nil).UpdateWebhookExecute), arg0)
}

// MockCrmAPI is a mock of CrmAPI interface.
type MockCrmAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCrmAPIMockRecorder
}

// MockCrmAPIMockRecorder is the mock recorder for MockCrmAPI.
type MockCrmAPIMockRecorder struct {
	mock *MockCrmAPI
}

// NewMockCrmAPI creates a new mock instance.
func NewMockCrmAPI(ctrl *gomock.Controller) *MockCrmAPI {
	mock := &MockCrmAPI{ctrl: ctrl}
	mock.recorder = &MockCrmAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrmAPI) EXPECT() *MockCrmAPIMockRecorder {
	return m.recorder
}

// ListCrmProducts mocks base method.
func (m *MockCrmAPI) ListCrmProducts(arg0 context.Context) api.ApiListCrmProductsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCrmProducts", arg0)
	ret0, _ := ret[0].(api.ApiListCrmProductsRequest)
	return ret0
}

// ListCrmProducts indicates an expected call of ListCrmProducts.
func (mr *MockCrmAPIMockRecorder) ListCrmProducts(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCrmProducts", reflect.TypeOf((*MockCrmAPI)(nil).ListCrmProducts), arg0)
}

// ListCrmProductsExecute mocks base method.
func (m *MockCrmAPI) ListCrmProductsExecute(arg0 api.ApiListCrmProductsRequest) (*api.ListCrmProductsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCrmProductsExecute", arg0)
	ret0, _ := ret[0].(*api.ListCrmProductsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCrmProductsExecute indicates an expected call of ListCrmProductsExecute.
func (mr *MockCrmAPIMockRecorder) ListCrmProductsExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCrmProductsExecute", reflect.TypeOf((*MockCrmAPI)(nil).ListCrmProductsExecute), arg0)
}

// UpsertCrmDeal mocks base method.
func (m *MockCrmAPI) UpsertCrmDeal(arg0 context.Context) api.ApiUpsertCrmDealRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertCrmDeal", arg0)
	ret0, _ := ret[0].(api.ApiUpsertCrmDealRequest)
	return ret0
}

// UpsertCrmDeal indicates an expected call of UpsertCrmDeal.
func (mr *MockCrmAPIMockRecorder) UpsertCrmDeal(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertCrmDeal", reflect.TypeOf((*MockCrmAPI)(nil).UpsertCrmDeal), arg0)
}

// UpsertCrmDealExecute mocks base method.
func (m *MockCrmAPI) UpsertCrmDealExecute(arg0 api.ApiUpsertCrmDealRequest) (*api.UpsertCrmDealResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertCrmDealExecute", arg0)
	ret0, _ := ret[0].(*api.UpsertCrmDealResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpsertCrmDealExecute indicates an expected call of UpsertCrmDealExecute.
func (mr *MockCrmAPIMockRecorder) UpsertCrmDealExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertCrmDealExecute", reflect.TypeOf((*MockCrmAPI)(nil).UpsertCrmDealExecute), arg0)
}

// UpsertCrmProduct mocks base method.
func (m *MockCrmAPI) UpsertCrmProduct(arg0 context.Context) api.ApiUpsertCrmProductRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertCrmProduct", arg0)
	ret0, _ := ret[0].(api.ApiUpsertCrmProductRequest)
	return ret0
}

// UpsertCrmProduct indicates an expected call of UpsertCrmProduct.
func (mr *MockCrmAPIMockRecorder) UpsertCrmProduct(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertCrmProduct", reflect.TypeOf((*MockCrmAPI)(nil).UpsertCrmProduct), arg0)
}

// UpsertCrmProductExecute mocks base method.
func (m *MockCrmAPI) UpsertCrmProductExecute(arg0 api.ApiUpsertCrmProductRequest) (*api.UpsertCrmProductResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertCrmProductExecute", arg0)
	ret0, _ := ret[0].(*api.UpsertCrmProductResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpsertCrmProductExecute indicates an expected call of UpsertCrmProductExecute.
func (mr *MockCrmAPIMockRecorder) UpsertCrmProductExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertCrmProductExecute", reflect.TypeOf((*MockCrmAPI)(nil).UpsertCrmProductExecute), arg0)
}

// UpsertDealLineItemAssociation mocks base method.
func (m *MockCrmAPI) UpsertDealLineItemAssociation(arg0 context.Context) api.ApiUpsertDealLineItemAssociationRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertDealLineItemAssociation", arg0)
	ret0, _ := ret[0].(api.ApiUpsertDealLineItemAssociationRequest)
	return ret0
}

// UpsertDealLineItemAssociation indicates an expected call of UpsertDealLineItemAssociation.
func (mr *MockCrmAPIMockRecorder) UpsertDealLineItemAssociation(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertDealLineItemAssociation", reflect.TypeOf((*MockCrmAPI)(nil).UpsertDealLineItemAssociation), arg0)
}

// UpsertDealLineItemAssociationExecute mocks base method.
func (m *MockCrmAPI) UpsertDealLineItemAssociationExecute(arg0 api.ApiUpsertDealLineItemAssociationRequest) (*api.UpsertDealLineItemAssociationResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertDealLineItemAssociationExecute", arg0)
	ret0, _ := ret[0].(*api.UpsertDealLineItemAssociationResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpsertDealLineItemAssociationExecute indicates an expected call of UpsertDealLineItemAssociationExecute.
func (mr *MockCrmAPIMockRecorder) UpsertDealLineItemAssociationExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertDealLineItemAssociationExecute", reflect.TypeOf((*MockCrmAPI)(nil).UpsertDealLineItemAssociationExecute), arg0)
}

// UpsertLineItem mocks base method.
func (m *MockCrmAPI) UpsertLineItem(arg0 context.Context) api.ApiUpsertLineItemRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertLineItem", arg0)
	ret0, _ := ret[0].(api.ApiUpsertLineItemRequest)
	return ret0
}

// UpsertLineItem indicates an expected call of UpsertLineItem.
func (mr *MockCrmAPIMockRecorder) UpsertLineItem(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertLineItem", reflect.TypeOf((*MockCrmAPI)(nil).UpsertLineItem), arg0)
}

// UpsertLineItemExecute mocks base method.
func (m *MockCrmAPI) UpsertLineItemExecute(arg0 api.ApiUpsertLineItemRequest) (*api.UpsertLineItemResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertLineItemExecute", arg0)
	ret0, _ := ret[0].(*api.UpsertLineItemResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpsertLineItemExecute indicates an expected call of UpsertLineItemExecute.
func (mr *MockCrmAPIMockRecorder) UpsertLineItemExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertLineItemExecute", reflect.TypeOf((*MockCrmAPI)(nil).UpsertLineItemExecute), arg0)
}

// MockBillingAPI is a mock of BillingAPI interface.
type MockBillingAPI struct {
	ctrl     *gomock.Controller
	recorder *MockBillingAPIMockRecorder
}

// MockBillingAPIMockRecorder is the mock recorder for MockBillingAPI.
type MockBillingAPIMockRecorder struct {
	mock *MockBillingAPI
}

// NewMockBillingAPI creates a new mock instance.
func NewMockBillingAPI(ctrl *gomock.Controller) *MockBillingAPI {
	mock := &MockBillingAPI{ctrl: ctrl}
	mock.recorder = &MockBillingAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingAPI) EXPECT() *MockBillingAPIMockRecorder {
	return m.recorder
}

// CountBillingProducts mocks base method.
func (m *MockBillingAPI) CountBillingProducts(arg0 context.Context) api.ApiCountBillingProductsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountBillingProducts", arg0)
	ret0, _ := ret[0].(api.ApiCountBillingProductsRequest)
	return ret0
}

// CountBillingProducts indicates an expected call of CountBillingProducts.
func (mr *MockBillingAPIMockRecorder) CountBillingProducts(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountBillingProducts", reflect.TypeOf((*MockBillingAPI)(nil).CountBillingProducts), arg0)
}

// CountBillingProductsExecute mocks base method.
func (m *MockBillingAPI) CountBillingProductsExecute(arg0 api.ApiCountBillingProductsRequest) (*api.CountBillingProductsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountBillingProductsExecute", arg0)
	ret0, _ := ret[0].(*api.CountBillingProductsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CountBillingProductsExecute indicates an expected call of CountBillingProductsExecute.
func (mr *MockBillingAPIMockRecorder) CountBillingProductsExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountBillingProductsExecute", reflect.TypeOf((*MockBillingAPI)(nil).CountBillingProductsExecute), arg0)
}

// CountCustomers mocks base method.
func (m *MockBillingAPI) CountCustomers(arg0 context.Context) api.ApiCountCustomersRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountCustomers", arg0)
	ret0, _ := ret[0].(api.ApiCountCustomersRequest)
	return ret0
}

// CountCustomers indicates an expected call of CountCustomers.
func (mr *MockBillingAPIMockRecorder) CountCustomers(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountCustomers", reflect.TypeOf((*MockBillingAPI)(nil).CountCustomers), arg0)
}

// CountCustomersExecute mocks base method.
func (m *MockBillingAPI) CountCustomersExecute(arg0 api.ApiCountCustomersRequest) (*api.CountCustomersResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountCustomersExecute", arg0)
	ret0, _ := ret[0].(*api.CountCustomersResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CountCustomersExecute indicates an expected call of CountCustomersExecute.
func (mr *MockBillingAPIMockRecorder) CountCustomersExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountCustomersExecute", reflect.TypeOf((*MockBillingAPI)(nil).CountCustomersExecute), arg0)
}

// ListBillingProducts mocks base method.
func (m *MockBillingAPI) ListBillingProducts(arg0 context.Context) api.ApiListBillingProductsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBillingProducts", arg0)
	ret0, _ := ret[0].(api.ApiListBillingProductsRequest)
	return ret0
}

// ListBillingProducts indicates an expected call of ListBillingProducts.
func (mr *MockBillingAPIMockRecorder) ListBillingProducts(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBillingProducts", reflect.TypeOf((*MockBillingAPI)(nil).ListBillingProducts), arg0)
}

// ListBillingProductsExecute mocks base method.
func (m *MockBillingAPI) ListBillingProductsExecute(arg0 api.ApiListBillingProductsRequest) (*api.ListBillingProductsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBillingProductsExecute", arg0)
	ret0, _ := ret[0].(*api.ListBillingProductsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListBillingProductsExecute indicates an expected call of ListBillingProductsExecute.
func (mr *MockBillingAPIMockRecorder) ListBillingProductsExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBillingProductsExecute", reflect.TypeOf((*MockBillingAPI)(nil).ListBillingProductsExecute), arg0)
}

// ListCustomers mocks base method.
func (m *MockBillingAPI) ListCustomers(arg0 context.Context) api.ApiListCustomersRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomers", arg0)
	ret0, _ := ret[0].(api.ApiListCustomersRequest)
	return ret0
}

// ListCustomers indicates an expected call of ListCustomers.
func (mr *MockBillingAPIMockRecorder) ListCustomers(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomers", reflect.TypeOf((*MockBillingAPI)(nil).ListCustomers), arg0)
}

// ListCustomersExecute mocks base method.
func (m *MockBillingAPI) ListCustomersExecute(arg0 api.ApiListCustomersRequest) (*api.ListCustomersResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCustomersExecute", arg0)
	ret0, _ := ret[0].(*api.ListCustomersResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCustomersExecute indicates an expected call of ListCustomersExecute.
func (mr *MockBillingAPIMockRecorder) ListCustomersExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomersExecute", reflect.TypeOf((*MockBillingAPI)(nil).ListCustomersExecute), arg0)
}

// ListInvoices mocks base method.
func (m *MockBillingAPI) ListInvoices(arg0 context.Context) api.ApiListInvoicesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvoices", arg0)
	ret0, _ := ret[0].(api.ApiListInvoicesRequest)
	return ret0
}

// ListInvoices indicates an expected call of ListInvoices.
func (mr *MockBillingAPIMockRecorder) ListInvoices(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvoices", reflect.TypeOf((*MockBillingAPI)(nil).ListInvoices), arg0)
}

// ListInvoicesExecute mocks base method.
func (m *MockBillingAPI) ListInvoicesExecute(arg0 api.ApiListInvoicesRequest) (*api.ListInvoicesResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvoicesExecute", arg0)
	ret0, _ := ret[0].(*api.ListInvoicesResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListInvoicesExecute indicates an expected call of ListInvoicesExecute.
func (mr *MockBillingAPIMockRecorder) ListInvoicesExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvoicesExecute", reflect.TypeOf((*MockBillingAPI)(nil).ListInvoicesExecute), arg0)
}

// ListPaymentMethods mocks base method.
func (m *MockBillingAPI) ListPaymentMethods(arg0 context.Context) api.ApiListPaymentMethodsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPaymentMethods", arg0)
	ret0, _ := ret[0].(api.ApiListPaymentMethodsRequest)
	return ret0
}

// ListPaymentMethods indicates an expected call of ListPaymentMethods.
func (mr *MockBillingAPIMockRecorder) ListPaymentMethods(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPaymentMethods", reflect.TypeOf((*MockBillingAPI)(nil).ListPaymentMethods), arg0)
}

// ListPaymentMethodsExecute mocks base method.
func (m *MockBillingAPI) ListPaymentMethodsExecute(arg0 api.ApiListPaymentMethodsRequest) (*api.ListPaymentMethodsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPaymentMethodsExecute", arg0)
	ret0, _ := ret[0].(*api.ListPaymentMethodsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPaymentMethodsExecute indicates an expected call of ListPaymentMethodsExecute.
func (mr *MockBillingAPIMockRecorder) ListPaymentMethodsExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPaymentMethodsExecute", reflect.TypeOf((*MockBillingAPI)(nil).ListPaymentMethodsExecute), arg0)
}

// ListProductPrices mocks base method.
func (m *MockBillingAPI) ListProductPrices(arg0 context.Context) api.ApiListProductPricesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductPrices", arg0)
	ret0, _ := ret[0].(api.ApiListProductPricesRequest)
	return ret0
}

// ListProductPrices indicates an expected call of ListProductPrices.
func (mr *MockBillingAPIMockRecorder) ListProductPrices(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductPrices", reflect.TypeOf((*MockBillingAPI)(nil).ListProductPrices), arg0)
}

// ListProductPricesExecute mocks base method.
func (m *MockBillingAPI) ListProductPricesExecute(arg0 api.ApiListProductPricesRequest) (*api.ListProductPricesResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductPricesExecute", arg0)
	ret0, _ := ret[0].(*api.ListProductPricesResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProductPricesExecute indicates an expected call of ListProductPricesExecute.
func (mr *MockBillingAPIMockRecorder) ListProductPricesExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductPricesExecute", reflect.TypeOf((*MockBillingAPI)(nil).ListProductPricesExecute), arg0)
}

// UpsertBillingCustomer mocks base method.
func (m *MockBillingAPI) UpsertBillingCustomer(arg0 context.Context) api.ApiUpsertBillingCustomerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertBillingCustomer", arg0)
	ret0, _ := ret[0].(api.ApiUpsertBillingCustomerRequest)
	return ret0
}

// UpsertBillingCustomer indicates an expected call of UpsertBillingCustomer.
func (mr *MockBillingAPIMockRecorder) UpsertBillingCustomer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertBillingCustomer", reflect.TypeOf((*MockBillingAPI)(nil).UpsertBillingCustomer), arg0)
}

// UpsertBillingCustomerExecute mocks base method.
func (m *MockBillingAPI) UpsertBillingCustomerExecute(arg0 api.ApiUpsertBillingCustomerRequest) (*api.UpsertBillingCustomerResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertBillingCustomerExecute", arg0)
	ret0, _ := ret[0].(*api.UpsertBillingCustomerResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpsertBillingCustomerExecute indicates an expected call of UpsertBillingCustomerExecute.
func (mr *MockBillingAPIMockRecorder) UpsertBillingCustomerExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertBillingCustomerExecute", reflect.TypeOf((*MockBillingAPI)(nil).UpsertBillingCustomerExecute), arg0)
}

// UpsertBillingPrice mocks base method.
func (m *MockBillingAPI) UpsertBillingPrice(arg0 context.Context) api.ApiUpsertBillingPriceRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertBillingPrice", arg0)
	ret0, _ := ret[0].(api.ApiUpsertBillingPriceRequest)
	return ret0
}

// UpsertBillingPrice indicates an expected call of UpsertBillingPrice.
func (mr *MockBillingAPIMockRecorder) UpsertBillingPrice(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertBillingPrice", reflect.TypeOf((*MockBillingAPI)(nil).UpsertBillingPrice), arg0)
}

// UpsertBillingPriceExecute mocks base method.
func (m *MockBillingAPI) UpsertBillingPriceExecute(arg0 api.ApiUpsertBillingPriceRequest) (*api.UpsertBillingPriceResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertBillingPriceExecute", arg0)
	ret0, _ := ret[0].(*api.UpsertBillingPriceResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpsertBillingPriceExecute indicates an expected call of UpsertBillingPriceExecute.
func (mr *MockBillingAPIMockRecorder) UpsertBillingPriceExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertBillingPriceExecute", reflect.TypeOf((*MockBillingAPI)(nil).UpsertBillingPriceExecute), arg0)
}

// UpsertBillingProduct mocks base method.
func (m *MockBillingAPI) UpsertBillingProduct(arg0 context.Context) api.ApiUpsertBillingProductRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertBillingProduct", arg0)
	ret0, _ := ret[0].(api.ApiUpsertBillingProductRequest)
	return ret0
}

// UpsertBillingProduct indicates an expected call of UpsertBillingProduct.
func (mr *MockBillingAPIMockRecorder) UpsertBillingProduct(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertBillingProduct", reflect.TypeOf((*MockBillingAPI)(nil).UpsertBillingProduct), arg0)
}

// UpsertBillingProductExecute mocks base method.
func (m *MockBillingAPI) UpsertBillingProductExecute(arg0 api.ApiUpsertBillingProductRequest) (*api.UpsertBillingProductResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertBillingProductExecute", arg0)
	ret0, _ := ret[0].(*api.UpsertBillingProductResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpsertBillingProductExecute indicates an expected call of UpsertBillingProductExecute.
func (mr *MockBillingAPIMockRecorder) UpsertBillingProductExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertBillingProductExecute", reflect.TypeOf((*MockBillingAPI)(nil).UpsertBillingProductExecute), arg0)
}

// UpsertBillingSubscription mocks base method.
func (m *MockBillingAPI) UpsertBillingSubscription(arg0 context.Context) api.ApiUpsertBillingSubscriptionRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertBillingSubscription", arg0)
	ret0, _ := ret[0].(api.ApiUpsertBillingSubscriptionRequest)
	return ret0
}

// UpsertBillingSubscription indicates an expected call of UpsertBillingSubscription.
func (mr *MockBillingAPIMockRecorder) UpsertBillingSubscription(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertBillingSubscription", reflect.TypeOf((*MockBillingAPI)(nil).UpsertBillingSubscription), arg0)
}

// UpsertBillingSubscriptionExecute mocks base method.
func (m *MockBillingAPI) UpsertBillingSubscriptionExecute(arg0 api.ApiUpsertBillingSubscriptionRequest) (*api.UpsertBillingSubscriptionResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertBillingSubscriptionExecute", arg0)
	ret0, _ := ret[0].(*api.UpsertBillingSubscriptionResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpsertBillingSubscriptionExecute indicates an expected call of UpsertBillingSubscriptionExecute.
func (mr *MockBillingAPIMockRecorder) UpsertBillingSubscriptionExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertBillingSubscriptionExecute", reflect.TypeOf((*MockBillingAPI)(nil).UpsertBillingSubscriptionExecute), arg0)
}

// UpsertInvoice mocks base method.
func (m *MockBillingAPI) UpsertInvoice(arg0 context.Context) api.ApiUpsertInvoiceRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertInvoice", arg0)
	ret0, _ := ret[0].(api.ApiUpsertInvoiceRequest)
	return ret0
}

// UpsertInvoice indicates an expected call of UpsertInvoice.
func (mr *MockBillingAPIMockRecorder) UpsertInvoice(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertInvoice", reflect.TypeOf((*MockBillingAPI)(nil).UpsertInvoice), arg0)
}

// UpsertInvoiceExecute mocks base method.
func (m *MockBillingAPI) UpsertInvoiceExecute(arg0 api.ApiUpsertInvoiceRequest) (*api.UpsertInvoiceResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertInvoiceExecute", arg0)
	ret0, _ := ret[0].(*api.UpsertInvoiceResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpsertInvoiceExecute indicates an expected call of UpsertInvoiceExecute.
func (mr *MockBillingAPIMockRecorder) UpsertInvoiceExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertInvoiceExecute", reflect.TypeOf((*MockBillingAPI)(nil).UpsertInvoiceExecute), arg0)
}

// UpsertPaymentMethod mocks base method.
func (m *MockBillingAPI) UpsertPaymentMethod(arg0 context.Context) api.ApiUpsertPaymentMethodRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertPaymentMethod", arg0)
	ret0, _ := ret[0].(api.ApiUpsertPaymentMethodRequest)
	return ret0
}

// UpsertPaymentMethod indicates an expected call of UpsertPaymentMethod.
func (mr *MockBillingAPIMockRecorder) UpsertPaymentMethod(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertPaymentMethod", reflect.TypeOf((*MockBillingAPI)(nil).UpsertPaymentMethod), arg0)
}

// UpsertPaymentMethodExecute mocks base method.
func (m *MockBillingAPI) UpsertPaymentMethodExecute(arg0 api.ApiUpsertPaymentMethodRequest) (*api.UpsertPaymentMethodResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertPaymentMethodExecute", arg0)
	ret0, _ := ret[0].(*api.UpsertPaymentMethodResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpsertPaymentMethodExecute indicates an expected call of UpsertPaymentMethodExecute.
func (mr *MockBillingAPIMockRecorder) UpsertPaymentMethodExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertPaymentMethodExecute", reflect.TypeOf((*MockBillingAPI)(nil).UpsertPaymentMethodExecute), arg0)
}

// MockCompaniesAPI is a mock of CompaniesAPI interface.
type MockCompaniesAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCompaniesAPIMockRecorder
}

// MockCompaniesAPIMockRecorder is the mock recorder for MockCompaniesAPI.
type MockCompaniesAPIMockRecorder struct {
	mock *MockCompaniesAPI
}

// NewMockCompaniesAPI creates a new mock instance.
func NewMockCompaniesAPI(ctrl *gomock.Controller) *MockCompaniesAPI {
	mock := &MockCompaniesAPI{ctrl: ctrl}
	mock.recorder = &MockCompaniesAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompaniesAPI) EXPECT() *MockCompaniesAPIMockRecorder {
	return m.recorder
}

// CountCompanies mocks base method.
func (m *MockCompaniesAPI) CountCompanies(arg0 context.Context) api.ApiCountCompaniesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountCompanies", arg0)
	ret0, _ := ret[0].(api.ApiCountCompaniesRequest)
	return ret0
}

// CountCompanies indicates an expected call of CountCompanies.
func (mr *MockCompaniesAPIMockRecorder) CountCompanies(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountCompanies", reflect.TypeOf((*MockCompaniesAPI)(nil).CountCompanies), arg0)
}

// CountCompaniesExecute mocks base method.
func (m *MockCompaniesAPI) CountCompaniesExecute(arg0 api.ApiCountCompaniesRequest) (*api.CountCompaniesResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountCompaniesExecute", arg0)
	ret0, _ := ret[0].(*api.CountCompaniesResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CountCompaniesExecute indicates an expected call of CountCompaniesExecute.
func (mr *MockCompaniesAPIMockRecorder) CountCompaniesExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountCompaniesExecute", reflect.TypeOf((*MockCompaniesAPI)(nil).CountCompaniesExecute), arg0)
}

// CountEntityKeyDefinitions mocks base method.
func (m *MockCompaniesAPI) CountEntityKeyDefinitions(arg0 context.Context) api.ApiCountEntityKeyDefinitionsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountEntityKeyDefinitions", arg0)
	ret0, _ := ret[0].(api.ApiCountEntityKeyDefinitionsRequest)
	return ret0
}

// CountEntityKeyDefinitions indicates an expected call of CountEntityKeyDefinitions.
func (mr *MockCompaniesAPIMockRecorder) CountEntityKeyDefinitions(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountEntityKeyDefinitions", reflect.TypeOf((*MockCompaniesAPI)(nil).CountEntityKeyDefinitions), arg0)
}

// CountEntityKeyDefinitionsExecute mocks base method.
func (m *MockCompaniesAPI) CountEntityKeyDefinitionsExecute(arg0 api.ApiCountEntityKeyDefinitionsRequest) (*api.CountEntityKeyDefinitionsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountEntityKeyDefinitionsExecute", arg0)
	ret0, _ := ret[0].(*api.CountEntityKeyDefinitionsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CountEntityKeyDefinitionsExecute indicates an expected call of CountEntityKeyDefinitionsExecute.
func (mr *MockCompaniesAPIMockRecorder) CountEntityKeyDefinitionsExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountEntityKeyDefinitionsExecute", reflect.TypeOf((*MockCompaniesAPI)(nil).CountEntityKeyDefinitionsExecute), arg0)
}

// CountEntityTraitDefinitions mocks base method.
func (m *MockCompaniesAPI) CountEntityTraitDefinitions(arg0 context.Context) api.ApiCountEntityTraitDefinitionsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountEntityTraitDefinitions", arg0)
	ret0, _ := ret[0].(api.ApiCountEntityTraitDefinitionsRequest)
	return ret0
}

// CountEntityTraitDefinitions indicates an expected call of CountEntityTraitDefinitions.
func (mr *MockCompaniesAPIMockRecorder) CountEntityTraitDefinitions(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountEntityTraitDefinitions", reflect.TypeOf((*MockCompaniesAPI)(nil).CountEntityTraitDefinitions), arg0)
}

// CountEntityTraitDefinitionsExecute mocks base method.
func (m *MockCompaniesAPI) CountEntityTraitDefinitionsExecute(arg0 api.ApiCountEntityTraitDefinitionsRequest) (*api.CountEntityTraitDefinitionsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountEntityTraitDefinitionsExecute", arg0)
	ret0, _ := ret[0].(*api.CountEntityTraitDefinitionsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CountEntityTraitDefinitionsExecute indicates an expected call of CountEntityTraitDefinitionsExecute.
func (mr *MockCompaniesAPIMockRecorder) CountEntityTraitDefinitionsExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountEntityTraitDefinitionsExecute", reflect.TypeOf((*MockCompaniesAPI)(nil).CountEntityTraitDefinitionsExecute), arg0)
}

// CountUsers mocks base method.
func (m *MockCompaniesAPI) CountUsers(arg0 context.Context) api.ApiCountUsersRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUsers", arg0)
	ret0, _ := ret[0].(api.ApiCountUsersRequest)
	return ret0
}

// CountUsers indicates an expected call of CountUsers.
func (mr *MockCompaniesAPIMockRecorder) CountUsers(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUsers", reflect.TypeOf((*MockCompaniesAPI)(nil).CountUsers), arg0)
}

// CountUsersExecute mocks base method.
func (m *MockCompaniesAPI) CountUsersExecute(arg0 api.ApiCountUsersRequest) (*api.CountUsersResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUsersExecute", arg0)
	ret0, _ := ret[0].(*api.CountUsersResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CountUsersExecute indicates an expected call of CountUsersExecute.
func (mr *MockCompaniesAPIMockRecorder) CountUsersExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUsersExecute", reflect.TypeOf((*MockCompaniesAPI)(nil).CountUsersExecute), arg0)
}

// CreateCompany mocks base method.
func (m *MockCompaniesAPI) CreateCompany(arg0 context.Context) api.ApiCreateCompanyRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompany", arg0)
	ret0, _ := ret[0].(api.ApiCreateCompanyRequest)
	return ret0
}

// CreateCompany indicates an expected call of CreateCompany.
func (mr *MockCompaniesAPIMockRecorder) CreateCompany(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompany", reflect.TypeOf((*MockCompaniesAPI)(nil).CreateCompany), arg0)
}

// CreateCompanyExecute mocks base method.
func (m *MockCompaniesAPI) CreateCompanyExecute(arg0 api.ApiCreateCompanyRequest) (*api.CreateCompanyResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompanyExecute", arg0)
	ret0, _ := ret[0].(*api.CreateCompanyResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCompanyExecute indicates an expected call of CreateCompanyExecute.
func (mr *MockCompaniesAPIMockRecorder) CreateCompanyExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompanyExecute", reflect.TypeOf((*MockCompaniesAPI)(nil).CreateCompanyExecute), arg0)
}

// CreateUser mocks base method.
func (m *MockCompaniesAPI) CreateUser(arg0 context.Context) api.ApiCreateUserRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(api.ApiCreateUserRequest)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockCompaniesAPIMockRecorder) CreateUser(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockCompaniesAPI)(nil).CreateUser), arg0)
}

// CreateUserExecute mocks base method.
func (m *MockCompaniesAPI) CreateUserExecute(arg0 api.ApiCreateUserRequest) (*api.CreateUserResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserExecute", arg0)
	ret0, _ := ret[0].(*api.CreateUserResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateUserExecute indicates an expected call of CreateUserExecute.
func (mr *MockCompaniesAPIMockRecorder) CreateUserExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserExecute", reflect.TypeOf((*MockCompaniesAPI)(nil).CreateUserExecute), arg0)
}

// DeleteCompany mocks base method.
func (m *MockCompaniesAPI) DeleteCompany(arg0 context.Context, arg1 string) api.ApiDeleteCompanyRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCompany", arg0, arg1)
	ret0, _ := ret[0].(api.ApiDeleteCompanyRequest)
	return ret0
}

// DeleteCompany indicates an expected call of DeleteCompany.
func (mr *MockCompaniesAPIMockRecorder) DeleteCompany(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCompany", reflect.TypeOf((*MockCompaniesAPI)(nil).DeleteCompany), arg0, arg1)
}

// DeleteCompanyByKeys mocks base method.
func (m *MockCompaniesAPI) DeleteCompanyByKeys(arg0 context.Context) api.ApiDeleteCompanyByKeysRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCompanyByKeys", arg0)
	ret0, _ := ret[0].(api.ApiDeleteCompanyByKeysRequest)
	return ret0
}

// DeleteCompanyByKeys indicates an expected call of DeleteCompanyByKeys.
func (mr *MockCompaniesAPIMockRecorder) DeleteCompanyByKeys(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCompanyByKeys", reflect.TypeOf((*MockCompaniesAPI)(nil).DeleteCompanyByKeys), arg0)
}

// DeleteCompanyByKeysExecute mocks base method.
func (m *MockCompaniesAPI) DeleteCompanyByKeysExecute(arg0 api.ApiDeleteCompanyByKeysRequest) (*api.DeleteCompanyByKeysResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCompanyByKeysExecute", arg0)
	ret0, _ := ret[0].(*api.DeleteCompanyByKeysResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteCompanyByKeysExecute indicates an expected call of DeleteCompanyByKeysExecute.
func (mr *MockCompaniesAPIMockRecorder) DeleteCompanyByKeysExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCompanyByKeysExecute", reflect.TypeOf((*MockCompaniesAPI)(nil).DeleteCompanyByKeysExecute), arg0)
}

// DeleteCompanyExecute mocks base method.
func (m *MockCompaniesAPI) DeleteCompanyExecute(arg0 api.ApiDeleteCompanyRequest) (*api.DeleteCompanyResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCompanyExecute", arg0)
	ret0, _ := ret[0].(*api.DeleteCompanyResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteCompanyExecute indicates an expected call of DeleteCompanyExecute.
func (mr *MockCompaniesAPIMockRecorder) DeleteCompanyExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCompanyExecute", reflect.TypeOf((*MockCompaniesAPI)(nil).DeleteCompanyExecute), arg0)
}

// DeleteCompanyMembership mocks base method.
func (m *MockCompaniesAPI) DeleteCompanyMembership(arg0 context.Context, arg1 string) api.ApiDeleteCompanyMembershipRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCompanyMembership", arg0, arg1)
	ret0, _ := ret[0].(api.ApiDeleteCompanyMembershipRequest)
	return ret0
}

// DeleteCompanyMembership indicates an expected call of DeleteCompanyMembership.
func (mr *MockCompaniesAPIMockRecorder) DeleteCompanyMembership(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCompanyMembership", reflect.TypeOf((*MockCompaniesAPI)(nil).DeleteCompanyMembership), arg0, arg1)
}

// DeleteCompanyMembershipExecute mocks base method.
func (m *MockCompaniesAPI) DeleteCompanyMembershipExecute(arg0 api.ApiDeleteCompanyMembershipRequest) (*api.DeleteCompanyMembershipResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCompanyMembershipExecute", arg0)
	ret0, _ := ret[0].(*api.DeleteCompanyMembershipResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteCompanyMembershipExecute indicates an expected call of DeleteCompanyMembershipExecute.
func (mr *MockCompaniesAPIMockRecorder) DeleteCompanyMembershipExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCompanyMembershipExecute", reflect.TypeOf((*MockCompaniesAPI)(nil).DeleteCompanyMembershipExecute), arg0)
}

// DeleteUser mocks base method.
func (m *MockCompaniesAPI) DeleteUser(arg0 context.Context, arg1 string) api.ApiDeleteUserRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(api.ApiDeleteUserRequest)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockCompaniesAPIMockRecorder) DeleteUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockCompaniesAPI)(nil).DeleteUser), arg0, arg1)
}

// DeleteUserByKeys mocks base method.
func (m *MockCompaniesAPI) DeleteUserByKeys(arg0 context.Context) api.ApiDeleteUserByKeysRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByKeys", arg0)
	ret0, _ := ret[0].(api.ApiDeleteUserByKeysRequest)
	return ret0
}

// DeleteUserByKeys indicates an expected call of DeleteUserByKeys.
func (mr *MockCompaniesAPIMockRecorder) DeleteUserByKeys(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByKeys", reflect.TypeOf((*MockCompaniesAPI)(nil).DeleteUserByKeys), arg0)
}

// DeleteUserByKeysExecute mocks base method.
func (m *MockCompaniesAPI) DeleteUserByKeysExecute(arg0 api.ApiDeleteUserByKeysRequest) (*api.DeleteUserByKeysResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByKeysExecute", arg0)
	ret0, _ := ret[0].(*api.DeleteUserByKeysResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteUserByKeysExecute indicates an expected call of DeleteUserByKeysExecute.
func (mr *MockCompaniesAPIMockRecorder) DeleteUserByKeysExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByKeysExecute", reflect.TypeOf((*MockCompaniesAPI)(nil).DeleteUserByKeysExecute), arg0)
}

// DeleteUserExecute mocks base method.
func (m *MockCompaniesAPI) DeleteUserExecute(arg0 api.ApiDeleteUserRequest) (*api.DeleteUserResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserExecute", arg0)
	ret0, _ := ret[0].(*api.DeleteUserResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteUserExecute indicates an expected call of DeleteUserExecute.
func (mr *MockCompaniesAPIMockRecorder) DeleteUserExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserExecute", reflect.TypeOf((*MockCompaniesAPI)(nil).DeleteUserExecute), arg0)
}

// GetActiveCompanySubscription mocks base method.
func (m *MockCompaniesAPI) GetActiveCompanySubscription(arg0 context.Context) api.ApiGetActiveCompanySubscriptionRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveCompanySubscription", arg0)
	ret0, _ := ret[0].(api.ApiGetActiveCompanySubscriptionRequest)
	return ret0
}

// GetActiveCompanySubscription indicates an expected call of GetActiveCompanySubscription.
func (mr *MockCompaniesAPIMockRecorder) GetActiveCompanySubscription(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveCompanySubscription", reflect.TypeOf((*MockCompaniesAPI)(nil).GetActiveCompanySubscription), arg0)
}

// GetActiveCompanySubscriptionExecute mocks base method.
func (m *MockCompaniesAPI) GetActiveCompanySubscriptionExecute(arg0 api.ApiGetActiveCompanySubscriptionRequest) (*api.GetActiveCompanySubscriptionResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveCompanySubscriptionExecute", arg0)
	ret0, _ := ret[0].(*api.GetActiveCompanySubscriptionResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetActiveCompanySubscriptionExecute indicates an expected call of GetActiveCompanySubscriptionExecute.
func (mr *MockCompaniesAPIMockRecorder) GetActiveCompanySubscriptionExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveCompanySubscriptionExecute", reflect.TypeOf((*MockCompaniesAPI)(nil).GetActiveCompanySubscriptionExecute), arg0)
}

// GetActiveDeals mocks base method.
func (m *MockCompaniesAPI) GetActiveDeals(arg0 context.Context) api.ApiGetActiveDealsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveDeals", arg0)
	ret0, _ := ret[0].(api.ApiGetActiveDealsRequest)
	return ret0
}

// GetActiveDeals indicates an expected call of GetActiveDeals.
func (mr *MockCompaniesAPIMockRecorder) GetActiveDeals(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveDeals", reflect.TypeOf((*MockCompaniesAPI)(nil).GetActiveDeals), arg0)
}

// GetActiveDealsExecute mocks base method.
func (m *MockCompaniesAPI) GetActiveDealsExecute(arg0 api.ApiGetActiveDealsRequest) (*api.GetActiveDealsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveDealsExecute", arg0)
	ret0, _ := ret[0].(*api.GetActiveDealsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetActiveDealsExecute indicates an expected call of GetActiveDealsExecute.
func (mr *MockCompaniesAPIMockRecorder) GetActiveDealsExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveDealsExecute", reflect.TypeOf((*MockCompaniesAPI)(nil).GetActiveDealsExecute), arg0)
}

// GetCompany mocks base method.
func (m *MockCompaniesAPI) GetCompany(arg0 context.Context, arg1 string) api.ApiGetCompanyRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompany", arg0, arg1)
	ret0, _ := ret[0].(api.ApiGetCompanyRequest)
	return ret0
}

// GetCompany indicates an expected call of GetCompany.
func (mr *MockCompaniesAPIMockRecorder) GetCompany(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompany", reflect.TypeOf((*MockCompaniesAPI)(nil).GetCompany), arg0, arg1)
}

// GetCompanyExecute mocks base method.
func (m *MockCompaniesAPI) GetCompanyExecute(arg0 api.ApiGetCompanyRequest) (*api.GetCompanyResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyExecute", arg0)
	ret0, _ := ret[0].(*api.GetCompanyResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCompanyExecute indicates an expected call of GetCompanyExecute.
func (mr *MockCompaniesAPIMockRecorder) GetCompanyExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyExecute", reflect.TypeOf((*MockCompaniesAPI)(nil).GetCompanyExecute), arg0)
}

// GetEntityTraitDefinition mocks base method.
func (m *MockCompaniesAPI) GetEntityTraitDefinition(arg0 context.Context, arg1 string) api.ApiGetEntityTraitDefinitionRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityTraitDefinition", arg0, arg1)
	ret0, _ := ret[0].(api.ApiGetEntityTraitDefinitionRequest)
	return ret0
}

// GetEntityTraitDefinition indicates an expected call of GetEntityTraitDefinition.
func (mr *MockCompaniesAPIMockRecorder) GetEntityTraitDefinition(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityTraitDefinition", reflect.TypeOf((*MockCompaniesAPI)(nil).GetEntityTraitDefinition), arg0, arg1)
}

// GetEntityTraitDefinitionExecute mocks base method.
func (m *MockCompaniesAPI) GetEntityTraitDefinitionExecute(arg0 api.ApiGetEntityTraitDefinitionRequest) (*api.GetEntityTraitDefinitionResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityTraitDefinitionExecute", arg0)
	ret0, _ := ret[0].(*api.GetEntityTraitDefinitionResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEntityTraitDefinitionExecute indicates an expected call of GetEntityTraitDefinitionExecute.
func (mr *MockCompaniesAPIMockRecorder) GetEntityTraitDefinitionExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityTraitDefinitionExecute", reflect.TypeOf((*MockCompaniesAPI)(nil).GetEntityTraitDefinitionExecute), arg0)
}

// GetEntityTraitValues mocks base method.
func (m *MockCompaniesAPI) GetEntityTraitValues(arg0 context.Context) api.ApiGetEntityTraitValuesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityTraitValues", arg0)
	ret0, _ := ret[0].(api.ApiGetEntityTraitValuesRequest)
	return ret0
}

// GetEntityTraitValues indicates an expected call of GetEntityTraitValues.
func (mr *MockCompaniesAPIMockRecorder) GetEntityTraitValues(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityTraitValues", reflect.TypeOf((*MockCompaniesAPI)(nil).GetEntityTraitValues), arg0)
}

// GetEntityTraitValuesExecute mocks base method.
func (m *MockCompaniesAPI) GetEntityTraitValuesExecute(arg0 api.ApiGetEntityTraitValuesRequest) (*api.GetEntityTraitValuesResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntityTraitValuesExecute", arg0)
	ret0, _ := ret[0].(*api.GetEntityTraitValuesResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEntityTraitValuesExecute indicates an expected call of GetEntityTraitValuesExecute.
func (mr *MockCompaniesAPIMockRecorder) GetEntityTraitValuesExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntityTraitValuesExecute", reflect.TypeOf((*MockCompaniesAPI)(nil).GetEntityTraitValuesExecute), arg0)
}

// GetOrCreateCompanyMembership mocks base method.
func (m *MockCompaniesAPI) GetOrCreateCompanyMembership(arg0 context.Context) api.ApiGetOrCreateCompanyMembershipRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateCompanyMembership", arg0)
	ret0, _ := ret[0].(api.ApiGetOrCreateCompanyMembershipRequest)
	return ret0
}

// GetOrCreateCompanyMembership indicates an expected call of GetOrCreateCompanyMembership.
func (mr *MockCompaniesAPIMockRecorder) GetOrCreateCompanyMembership(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateCompanyMembership", reflect.TypeOf((*MockCompaniesAPI)(nil).GetOrCreateCompanyMembership), arg0)
}

// GetOrCreateCompanyMembershipExecute mocks base method.
func (m *MockCompaniesAPI) GetOrCreateCompanyMembershipExecute(arg0 api.ApiGetOrCreateCompanyMembershipRequest) (*api.GetOrCreateCompanyMembershipResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateCompanyMembershipExecute", arg0)
	ret0, _ := ret[0].(*api.GetOrCreateCompanyMembershipResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrCreateCompanyMembershipExecute indicates an expected call of GetOrCreateCompanyMembershipExecute.
func (mr *MockCompaniesAPIMockRecorder) GetOrCreateCompanyMembershipExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateCompanyMembershipExecute", reflect.TypeOf((*MockCompaniesAPI)(nil).GetOrCreateCompanyMembershipExecute), arg0)
}

// GetOrCreateEntityTraitDefinition mocks base method.
func (m *MockCompaniesAPI) GetOrCreateEntityTraitDefinition(arg0 context.Context) api.ApiGetOrCreateEntityTraitDefinitionRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateEntityTraitDefinition", arg0)
	ret0, _ := ret[0].(api.ApiGetOrCreateEntityTraitDefinitionRequest)
	return ret0
}

// GetOrCreateEntityTraitDefinition indicates an expected call of GetOrCreateEntityTraitDefinition.
func (mr *MockCompaniesAPIMockRecorder) GetOrCreateEntityTraitDefinition(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateEntityTraitDefinition", reflect.TypeOf((*MockCompaniesAPI)(nil).GetOrCreateEntityTraitDefinition), arg0)
}

// GetOrCreateEntityTraitDefinitionExecute mocks base method.
func (m *MockCompaniesAPI) GetOrCreateEntityTraitDefinitionExecute(arg0 api.ApiGetOrCreateEntityTraitDefinitionRequest) (*api.GetOrCreateEntityTraitDefinitionResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateEntityTraitDefinitionExecute", arg0)
	ret0, _ := ret[0].(*api.GetOrCreateEntityTraitDefinitionResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrCreateEntityTraitDefinitionExecute indicates an expected call of GetOrCreateEntityTraitDefinitionExecute.
func (mr *MockCompaniesAPIMockRecorder) GetOrCreateEntityTraitDefinitionExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateEntityTraitDefinitionExecute", reflect.TypeOf((*MockCompaniesAPI)(nil).GetOrCreateEntityTraitDefinitionExecute), arg0)
}

// GetUser mocks base method.
func (m *MockCompaniesAPI) GetUser(arg0 context.Context, arg1 string) api.ApiGetUserRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(api.ApiGetUserRequest)
	return ret0
}

// GetUser indicates an expected call of GetUser.
func (mr *MockCompaniesAPIMockRecorder) GetUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockCompaniesAPI)(nil).GetUser), arg0, arg1)
}

// GetUserExecute mocks base method.
func (m *MockCompaniesAPI) GetUserExecute(arg0 api.ApiGetUserRequest) (*api.GetUserResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserExecute", arg0)
	ret0, _ := ret[0].(*api.GetUserResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserExecute indicates an expected call of GetUserExecute.
func (mr *MockCompaniesAPIMockRecorder) GetUserExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserExecute", reflect.TypeOf((*MockCompaniesAPI)(nil).GetUserExecute), arg0)
}

// ListCompanies mocks base method.
func (m *MockCompaniesAPI) ListCompanies(arg0 context.Context) api.ApiListCompaniesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCompanies", arg0)
	ret0, _ := ret[0].(api.ApiListCompaniesRequest)
	return ret0
}

// ListCompanies indicates an expected call of ListCompanies.
func (mr *MockCompaniesAPIMockRecorder) ListCompanies(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCompanies", reflect.TypeOf((*MockCompaniesAPI)(nil).ListCompanies), arg0)
}

// ListCompaniesExecute mocks base method.
func (m *MockCompaniesAPI) ListCompaniesExecute(arg0 api.ApiListCompaniesRequest) (*api.ListCompaniesResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCompaniesExecute", arg0)
	ret0, _ := ret[0].(*api.ListCompaniesResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCompaniesExecute indicates an expected call of ListCompaniesExecute.
func (mr *MockCompaniesAPIMockRecorder) ListCompaniesExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCompaniesExecute", reflect.TypeOf((*MockCompaniesAPI)(nil).ListCompaniesExecute), arg0)
}

// ListCompanyMemberships mocks base method.
func (m *MockCompaniesAPI) ListCompanyMemberships(arg0 context.Context) api.ApiListCompanyMembershipsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCompanyMemberships", arg0)
	ret0, _ := ret[0].(api.ApiListCompanyMembershipsRequest)
	return ret0
}

// ListCompanyMemberships indicates an expected call of ListCompanyMemberships.
func (mr *MockCompaniesAPIMockRecorder) ListCompanyMemberships(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCompanyMemberships", reflect.TypeOf((*MockCompaniesAPI)(nil).ListCompanyMemberships), arg0)
}

// ListCompanyMembershipsExecute mocks base method.
func (m *MockCompaniesAPI) ListCompanyMembershipsExecute(arg0 api.ApiListCompanyMembershipsRequest) (*api.ListCompanyMembershipsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCompanyMembershipsExecute", arg0)
	ret0, _ := ret[0].(*api.ListCompanyMembershipsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCompanyMembershipsExecute indicates an expected call of ListCompanyMembershipsExecute.
func (mr *MockCompaniesAPIMockRecorder) ListCompanyMembershipsExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCompanyMembershipsExecute", reflect.TypeOf((*MockCompaniesAPI)(nil).ListCompanyMembershipsExecute), arg0)
}

// ListEntityKeyDefinitions mocks base method.
func (m *MockCompaniesAPI) ListEntityKeyDefinitions(arg0 context.Context) api.ApiListEntityKeyDefinitionsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEntityKeyDefinitions", arg0)
	ret0, _ := ret[0].(api.ApiListEntityKeyDefinitionsRequest)
	return ret0
}

// ListEntityKeyDefinitions indicates an expected call of ListEntityKeyDefinitions.
func (mr *MockCompaniesAPIMockRecorder) ListEntityKeyDefinitions(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntityKeyDefinitions", reflect.TypeOf((*MockCompaniesAPI)(nil).ListEntityKeyDefinitions), arg0)
}

// ListEntityKeyDefinitionsExecute mocks base method.
func (m *MockCompaniesAPI) ListEntityKeyDefinitionsExecute(arg0 api.ApiListEntityKeyDefinitionsRequest) (*api.ListEntityKeyDefinitionsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEntityKeyDefinitionsExecute", arg0)
	ret0, _ := ret[0].(*api.ListEntityKeyDefinitionsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEntityKeyDefinitionsExecute indicates an expected call of ListEntityKeyDefinitionsExecute.
func (mr *MockCompaniesAPIMockRecorder) ListEntityKeyDefinitionsExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntityKeyDefinitionsExecute", reflect.TypeOf((*MockCompaniesAPI)(nil).ListEntityKeyDefinitionsExecute), arg0)
}

// ListEntityTraitDefinitions mocks base method.
func (m *MockCompaniesAPI) ListEntityTraitDefinitions(arg0 context.Context) api.ApiListEntityTraitDefinitionsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEntityTraitDefinitions", arg0)
	ret0, _ := ret[0].(api.ApiListEntityTraitDefinitionsRequest)
	return ret0
}

// ListEntityTraitDefinitions indicates an expected call of ListEntityTraitDefinitions.
func (mr *MockCompaniesAPIMockRecorder) ListEntityTraitDefinitions(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntityTraitDefinitions", reflect.TypeOf((*MockCompaniesAPI)(nil).ListEntityTraitDefinitions), arg0)
}

// ListEntityTraitDefinitionsExecute mocks base method.
func (m *MockCompaniesAPI) ListEntityTraitDefinitionsExecute(arg0 api.ApiListEntityTraitDefinitionsRequest) (*api.ListEntityTraitDefinitionsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEntityTraitDefinitionsExecute", arg0)
	ret0, _ := ret[0].(*api.ListEntityTraitDefinitionsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEntityTraitDefinitionsExecute indicates an expected call of ListEntityTraitDefinitionsExecute.
func (mr *MockCompaniesAPIMockRecorder) ListEntityTraitDefinitionsExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntityTraitDefinitionsExecute", reflect.TypeOf((*MockCompaniesAPI)(nil).ListEntityTraitDefinitionsExecute), arg0)
}

// ListUsers mocks base method.
func (m *MockCompaniesAPI) ListUsers(arg0 context.Context) api.ApiListUsersRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0)
	ret0, _ := ret[0].(api.ApiListUsersRequest)
	return ret0
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockCompaniesAPIMockRecorder) ListUsers(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockCompaniesAPI)(nil).ListUsers), arg0)
}

// ListUsersExecute mocks base method.
func (m *MockCompaniesAPI) ListUsersExecute(arg0 api.ApiListUsersRequest) (*api.ListUsersResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersExecute", arg0)
	ret0, _ := ret[0].(*api.ListUsersResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUsersExecute indicates an expected call of ListUsersExecute.
func (mr *MockCompaniesAPIMockRecorder) ListUsersExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersExecute", reflect.TypeOf((*MockCompaniesAPI)(nil).ListUsersExecute), arg0)
}

// LookupCompany mocks base method.
func (m *MockCompaniesAPI) LookupCompany(arg0 context.Context) api.ApiLookupCompanyRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupCompany", arg0)
	ret0, _ := ret[0].(api.ApiLookupCompanyRequest)
	return ret0
}

// LookupCompany indicates an expected call of LookupCompany.
func (mr *MockCompaniesAPIMockRecorder) LookupCompany(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupCompany", reflect.TypeOf((*MockCompaniesAPI)(nil).LookupCompany), arg0)
}

// LookupCompanyExecute mocks base method.
func (m *MockCompaniesAPI) LookupCompanyExecute(arg0 api.ApiLookupCompanyRequest) (*api.LookupCompanyResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupCompanyExecute", arg0)
	ret0, _ := ret[0].(*api.LookupCompanyResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LookupCompanyExecute indicates an expected call of LookupCompanyExecute.
func (mr *MockCompaniesAPIMockRecorder) LookupCompanyExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupCompanyExecute", reflect.TypeOf((*MockCompaniesAPI)(nil).LookupCompanyExecute), arg0)
}

// LookupUser mocks base method.
func (m *MockCompaniesAPI) LookupUser(arg0 context.Context) api.ApiLookupUserRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupUser", arg0)
	ret0, _ := ret[0].(api.ApiLookupUserRequest)
	return ret0
}

// LookupUser indicates an expected call of LookupUser.
func (mr *MockCompaniesAPIMockRecorder) LookupUser(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupUser", reflect.TypeOf((*MockCompaniesAPI)(nil).LookupUser), arg0)
}

// LookupUserExecute mocks base method.
func (m *MockCompaniesAPI) LookupUserExecute(arg0 api.ApiLookupUserRequest) (*api.LookupUserResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupUserExecute", arg0)
	ret0, _ := ret[0].(*api.LookupUserResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LookupUserExecute indicates an expected call of LookupUserExecute.
func (mr *MockCompaniesAPIMockRecorder) LookupUserExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupUserExecute", reflect.TypeOf((*MockCompaniesAPI)(nil).LookupUserExecute), arg0)
}

// UpdateEntityTraitDefinition mocks base method.
func (m *MockCompaniesAPI) UpdateEntityTraitDefinition(arg0 context.Context, arg1 string) api.ApiUpdateEntityTraitDefinitionRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEntityTraitDefinition", arg0, arg1)
	ret0, _ := ret[0].(api.ApiUpdateEntityTraitDefinitionRequest)
	return ret0
}

// UpdateEntityTraitDefinition indicates an expected call of UpdateEntityTraitDefinition.
func (mr *MockCompaniesAPIMockRecorder) UpdateEntityTraitDefinition(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntityTraitDefinition", reflect.TypeOf((*MockCompaniesAPI)(nil).UpdateEntityTraitDefinition), arg0, arg1)
}

// UpdateEntityTraitDefinitionExecute mocks base method.
func (m *MockCompaniesAPI) UpdateEntityTraitDefinitionExecute(arg0 api.ApiUpdateEntityTraitDefinitionRequest) (*api.UpdateEntityTraitDefinitionResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEntityTraitDefinitionExecute", arg0)
	ret0, _ := ret[0].(*api.UpdateEntityTraitDefinitionResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateEntityTraitDefinitionExecute indicates an expected call of UpdateEntityTraitDefinitionExecute.
func (mr *MockCompaniesAPIMockRecorder) UpdateEntityTraitDefinitionExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntityTraitDefinitionExecute", reflect.TypeOf((*MockCompaniesAPI)(nil).UpdateEntityTraitDefinitionExecute), arg0)
}

// UpsertCompany mocks base method.
func (m *MockCompaniesAPI) UpsertCompany(arg0 context.Context) api.ApiUpsertCompanyRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertCompany", arg0)
	ret0, _ := ret[0].(api.ApiUpsertCompanyRequest)
	return ret0
}

// UpsertCompany indicates an expected call of UpsertCompany.
func (mr *MockCompaniesAPIMockRecorder) UpsertCompany(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertCompany", reflect.TypeOf((*MockCompaniesAPI)(nil).UpsertCompany), arg0)
}

// UpsertCompanyExecute mocks base method.
func (m *MockCompaniesAPI) UpsertCompanyExecute(arg0 api.ApiUpsertCompanyRequest) (*api.UpsertCompanyResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertCompanyExecute", arg0)
	ret0, _ := ret[0].(*api.UpsertCompanyResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpsertCompanyExecute indicates an expected call of UpsertCompanyExecute.
func (mr *MockCompaniesAPIMockRecorder) UpsertCompanyExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertCompanyExecute", reflect.TypeOf((*MockCompaniesAPI)(nil).UpsertCompanyExecute), arg0)
}

// UpsertCompanyTrait mocks base method.
func (m *MockCompaniesAPI) UpsertCompanyTrait(arg0 context.Context) api.ApiUpsertCompanyTraitRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertCompanyTrait", arg0)
	ret0, _ := ret[0].(api.ApiUpsertCompanyTraitRequest)
	return ret0
}

// UpsertCompanyTrait indicates an expected call of UpsertCompanyTrait.
func (mr *MockCompaniesAPIMockRecorder) UpsertCompanyTrait(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertCompanyTrait", reflect.TypeOf((*MockCompaniesAPI)(nil).UpsertCompanyTrait), arg0)
}

// UpsertCompanyTraitExecute mocks base method.
func (m *MockCompaniesAPI) UpsertCompanyTraitExecute(arg0 api.ApiUpsertCompanyTraitRequest) (*api.UpsertCompanyTraitResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertCompanyTraitExecute", arg0)
	ret0, _ := ret[0].(*api.UpsertCompanyTraitResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpsertCompanyTraitExecute indicates an expected call of UpsertCompanyTraitExecute.
func (mr *MockCompaniesAPIMockRecorder) UpsertCompanyTraitExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertCompanyTraitExecute", reflect.TypeOf((*MockCompaniesAPI)(nil).UpsertCompanyTraitExecute), arg0)
}

// UpsertUser mocks base method.
func (m *MockCompaniesAPI) UpsertUser(arg0 context.Context) api.ApiUpsertUserRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertUser", arg0)
	ret0, _ := ret[0].(api.ApiUpsertUserRequest)
	return ret0
}

// UpsertUser indicates an expected call of UpsertUser.
func (mr *MockCompaniesAPIMockRecorder) UpsertUser(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUser", reflect.TypeOf((*MockCompaniesAPI)(nil).UpsertUser), arg0)
}

// UpsertUserExecute mocks base method.
func (m *MockCompaniesAPI) UpsertUserExecute(arg0 api.ApiUpsertUserRequest) (*api.UpsertUserResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertUserExecute", arg0)
	ret0, _ := ret[0].(*api.UpsertUserResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpsertUserExecute indicates an expected call of UpsertUserExecute.
func (mr *MockCompaniesAPIMockRecorder) UpsertUserExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUserExecute", reflect.TypeOf((*MockCompaniesAPI)(nil).UpsertUserExecute), arg0)
}

// UpsertUserTrait mocks base method.
func (m *MockCompaniesAPI) UpsertUserTrait(arg0 context.Context) api.ApiUpsertUserTraitRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertUserTrait", arg0)
	ret0, _ := ret[0].(api.ApiUpsertUserTraitRequest)
	return ret0
}

// UpsertUserTrait indicates an expected call of UpsertUserTrait.
func (mr *MockCompaniesAPIMockRecorder) UpsertUserTrait(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUserTrait", reflect.TypeOf((*MockCompaniesAPI)(nil).UpsertUserTrait), arg0)
}

// UpsertUserTraitExecute mocks base method.
func (m *MockCompaniesAPI) UpsertUserTraitExecute(arg0 api.ApiUpsertUserTraitRequest) (*api.UpsertUserTraitResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertUserTraitExecute", arg0)
	ret0, _ := ret[0].(*api.UpsertUserTraitResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpsertUserTraitExecute indicates an expected call of UpsertUserTraitExecute.
func (mr *MockCompaniesAPIMockRecorder) UpsertUserTraitExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUserTraitExecute", reflect.TypeOf((*MockCompaniesAPI)(nil).UpsertUserTraitExecute), arg0)
}

// MockEntitlementsAPI is a mock of EntitlementsAPI interface.
type MockEntitlementsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockEntitlementsAPIMockRecorder
}

// MockEntitlementsAPIMockRecorder is the mock recorder for MockEntitlementsAPI.
type MockEntitlementsAPIMockRecorder struct {
	mock *MockEntitlementsAPI
}

// NewMockEntitlementsAPI creates a new mock instance.
func NewMockEntitlementsAPI(ctrl *gomock.Controller) *MockEntitlementsAPI {
	mock := &MockEntitlementsAPI{ctrl: ctrl}
	mock.recorder = &MockEntitlementsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntitlementsAPI) EXPECT() *MockEntitlementsAPIMockRecorder {
	return m.recorder
}

// CountCompanyOverrides mocks base method.
func (m *MockEntitlementsAPI) CountCompanyOverrides(arg0 context.Context) api.ApiCountCompanyOverridesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountCompanyOverrides", arg0)
	ret0, _ := ret[0].(api.ApiCountCompanyOverridesRequest)
	return ret0
}

// CountCompanyOverrides indicates an expected call of CountCompanyOverrides.
func (mr *MockEntitlementsAPIMockRecorder) CountCompanyOverrides(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountCompanyOverrides", reflect.TypeOf((*MockEntitlementsAPI)(nil).CountCompanyOverrides), arg0)
}

// CountCompanyOverridesExecute mocks base method.
func (m *MockEntitlementsAPI) CountCompanyOverridesExecute(arg0 api.ApiCountCompanyOverridesRequest) (*api.CountCompanyOverridesResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountCompanyOverridesExecute", arg0)
	ret0, _ := ret[0].(*api.CountCompanyOverridesResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CountCompanyOverridesExecute indicates an expected call of CountCompanyOverridesExecute.
func (mr *MockEntitlementsAPIMockRecorder) CountCompanyOverridesExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountCompanyOverridesExecute", reflect.TypeOf((*MockEntitlementsAPI)(nil).CountCompanyOverridesExecute), arg0)
}

// CountFeatureCompanies mocks base method.
func (m *MockEntitlementsAPI) CountFeatureCompanies(arg0 context.Context) api.ApiCountFeatureCompaniesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountFeatureCompanies", arg0)
	ret0, _ := ret[0].(api.ApiCountFeatureCompaniesRequest)
	return ret0
}

// CountFeatureCompanies indicates an expected call of CountFeatureCompanies.
func (mr *MockEntitlementsAPIMockRecorder) CountFeatureCompanies(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountFeatureCompanies", reflect.TypeOf((*MockEntitlementsAPI)(nil).CountFeatureCompanies), arg0)
}

// CountFeatureCompaniesExecute mocks base method.
func (m *MockEntitlementsAPI) CountFeatureCompaniesExecute(arg0 api.ApiCountFeatureCompaniesRequest) (*api.CountFeatureCompaniesResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountFeatureCompaniesExecute", arg0)
	ret0, _ := ret[0].(*api.CountFeatureCompaniesResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CountFeatureCompaniesExecute indicates an expected call of CountFeatureCompaniesExecute.
func (mr *MockEntitlementsAPIMockRecorder) CountFeatureCompaniesExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountFeatureCompaniesExecute", reflect.TypeOf((*MockEntitlementsAPI)(nil).CountFeatureCompaniesExecute), arg0)
}

// CountFeatureUsage mocks base method.
func (m *MockEntitlementsAPI) CountFeatureUsage(arg0 context.Context) api.ApiCountFeatureUsageRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountFeatureUsage", arg0)
	ret0, _ := ret[0].(api.ApiCountFeatureUsageRequest)
	return ret0
}

// CountFeatureUsage indicates an expected call of CountFeatureUsage.
func (mr *MockEntitlementsAPIMockRecorder) CountFeatureUsage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountFeatureUsage", reflect.TypeOf((*MockEntitlementsAPI)(nil).CountFeatureUsage), arg0)
}

// CountFeatureUsageExecute mocks base method.
func (m *MockEntitlementsAPI) CountFeatureUsageExecute(arg0 api.ApiCountFeatureUsageRequest) (*api.CountFeatureUsageResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountFeatureUsageExecute", arg0)
	ret0, _ := ret[0].(*api.CountFeatureUsageResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CountFeatureUsageExecute indicates an expected call of CountFeatureUsageExecute.
func (mr *MockEntitlementsAPIMockRecorder) CountFeatureUsageExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountFeatureUsageExecute", reflect.TypeOf((*MockEntitlementsAPI)(nil).CountFeatureUsageExecute), arg0)
}

// CountFeatureUsers mocks base method.
func (m *MockEntitlementsAPI) CountFeatureUsers(arg0 context.Context) api.ApiCountFeatureUsersRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountFeatureUsers", arg0)
	ret0, _ := ret[0].(api.ApiCountFeatureUsersRequest)
	return ret0
}

// CountFeatureUsers indicates an expected call of CountFeatureUsers.
func (mr *MockEntitlementsAPIMockRecorder) CountFeatureUsers(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountFeatureUsers", reflect.TypeOf((*MockEntitlementsAPI)(nil).CountFeatureUsers), arg0)
}

// CountFeatureUsersExecute mocks base method.
func (m *MockEntitlementsAPI) CountFeatureUsersExecute(arg0 api.ApiCountFeatureUsersRequest) (*api.CountFeatureUsersResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountFeatureUsersExecute", arg0)
	ret0, _ := ret[0].(*api.CountFeatureUsersResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CountFeatureUsersExecute indicates an expected call of CountFeatureUsersExecute.
func (mr *MockEntitlementsAPIMockRecorder) CountFeatureUsersExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountFeatureUsersExecute", reflect.TypeOf((*MockEntitlementsAPI)(nil).CountFeatureUsersExecute), arg0)
}

// CountPlanEntitlements mocks base method.
func (m *MockEntitlementsAPI) CountPlanEntitlements(arg0 context.Context) api.ApiCountPlanEntitlementsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPlanEntitlements", arg0)
	ret0, _ := ret[0].(api.ApiCountPlanEntitlementsRequest)
	return ret0
}

// CountPlanEntitlements indicates an expected call of CountPlanEntitlements.
func (mr *MockEntitlementsAPIMockRecorder) CountPlanEntitlements(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPlanEntitlements", reflect.TypeOf((*MockEntitlementsAPI)(nil).CountPlanEntitlements), arg0)
}

// CountPlanEntitlementsExecute mocks base method.
func (m *MockEntitlementsAPI) CountPlanEntitlementsExecute(arg0 api.ApiCountPlanEntitlementsRequest) (*api.CountPlanEntitlementsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPlanEntitlementsExecute", arg0)
	ret0, _ := ret[0].(*api.CountPlanEntitlementsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CountPlanEntitlementsExecute indicates an expected call of CountPlanEntitlementsExecute.
func (mr *MockEntitlementsAPIMockRecorder) CountPlanEntitlementsExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPlanEntitlementsExecute", reflect.TypeOf((*MockEntitlementsAPI)(nil).CountPlanEntitlementsExecute), arg0)
}

// CreateCompanyOverride mocks base method.
func (m *MockEntitlementsAPI) CreateCompanyOverride(arg0 context.Context) api.ApiCreateCompanyOverrideRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompanyOverride", arg0)
	ret0, _ := ret[0].(api.ApiCreateCompanyOverrideRequest)
	return ret0
}

// CreateCompanyOverride indicates an expected call of CreateCompanyOverride.
func (mr *MockEntitlementsAPIMockRecorder) CreateCompanyOverride(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompanyOverride", reflect.TypeOf((*MockEntitlementsAPI)(nil).CreateCompanyOverride), arg0)
}

// CreateCompanyOverrideExecute mocks base method.
func (m *MockEntitlementsAPI) CreateCompanyOverrideExecute(arg0 api.ApiCreateCompanyOverrideRequest) (*api.CreateCompanyOverrideResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompanyOverrideExecute", arg0)
	ret0, _ := ret[0].(*api.CreateCompanyOverrideResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCompanyOverrideExecute indicates an expected call of CreateCompanyOverrideExecute.
func (mr *MockEntitlementsAPIMockRecorder) CreateCompanyOverrideExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompanyOverrideExecute", reflect.TypeOf((*MockEntitlementsAPI)(nil).CreateCompanyOverrideExecute), arg0)
}

// CreatePlanEntitlement mocks base method.
func (m *MockEntitlementsAPI) CreatePlanEntitlement(arg0 context.Context) api.ApiCreatePlanEntitlementRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlanEntitlement", arg0)
	ret0, _ := ret[0].(api.ApiCreatePlanEntitlementRequest)
	return ret0
}

// CreatePlanEntitlement indicates an expected call of CreatePlanEntitlement.
func (mr *MockEntitlementsAPIMockRecorder) CreatePlanEntitlement(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlanEntitlement", reflect.TypeOf((*MockEntitlementsAPI)(nil).CreatePlanEntitlement), arg0)
}

// CreatePlanEntitlementExecute mocks base method.
func (m *MockEntitlementsAPI) CreatePlanEntitlementExecute(arg0 api.ApiCreatePlanEntitlementRequest) (*api.CreatePlanEntitlementResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlanEntitlementExecute", arg0)
	ret0, _ := ret[0].(*api.CreatePlanEntitlementResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreatePlanEntitlementExecute indicates an expected call of CreatePlanEntitlementExecute.
func (mr *MockEntitlementsAPIMockRecorder) CreatePlanEntitlementExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlanEntitlementExecute", reflect.TypeOf((*MockEntitlementsAPI)(nil).CreatePlanEntitlementExecute), arg0)
}

// DeleteCompanyOverride mocks base method.
func (m *MockEntitlementsAPI) DeleteCompanyOverride(arg0 context.Context, arg1 string) api.ApiDeleteCompanyOverrideRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCompanyOverride", arg0, arg1)
	ret0, _ := ret[0].(api.ApiDeleteCompanyOverrideRequest)
	return ret0
}

// DeleteCompanyOverride indicates an expected call of DeleteCompanyOverride.
func (mr *MockEntitlementsAPIMockRecorder) DeleteCompanyOverride(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCompanyOverride", reflect.TypeOf((*MockEntitlementsAPI)(nil).DeleteCompanyOverride), arg0, arg1)
}

// DeleteCompanyOverrideExecute mocks base method.
func (m *MockEntitlementsAPI) DeleteCompanyOverrideExecute(arg0 api.ApiDeleteCompanyOverrideRequest) (*api.DeleteCompanyOverrideResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCompanyOverrideExecute", arg0)
	ret0, _ := ret[0].(*api.DeleteCompanyOverrideResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteCompanyOverrideExecute indicates an expected call of DeleteCompanyOverrideExecute.
func (mr *MockEntitlementsAPIMockRecorder) DeleteCompanyOverrideExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCompanyOverrideExecute", reflect.TypeOf((*MockEntitlementsAPI)(nil).DeleteCompanyOverrideExecute), arg0)
}

// DeletePlanEntitlement mocks base method.
func (m *MockEntitlementsAPI) DeletePlanEntitlement(arg0 context.Context, arg1 string) api.ApiDeletePlanEntitlementRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlanEntitlement", arg0, arg1)
	ret0, _ := ret[0].(api.ApiDeletePlanEntitlementRequest)
	return ret0
}

// DeletePlanEntitlement indicates an expected call of DeletePlanEntitlement.
func (mr *MockEntitlementsAPIMockRecorder) DeletePlanEntitlement(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlanEntitlement", reflect.TypeOf((*MockEntitlementsAPI)(nil).DeletePlanEntitlement), arg0, arg1)
}

// DeletePlanEntitlementExecute mocks base method.
func (m *MockEntitlementsAPI) DeletePlanEntitlementExecute(arg0 api.ApiDeletePlanEntitlementRequest) (*api.DeletePlanEntitlementResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlanEntitlementExecute", arg0)
	ret0, _ := ret[0].(*api.DeletePlanEntitlementResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeletePlanEntitlementExecute indicates an expected call of DeletePlanEntitlementExecute.
func (mr *MockEntitlementsAPIMockRecorder) DeletePlanEntitlementExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlanEntitlementExecute", reflect.TypeOf((*MockEntitlementsAPI)(nil).DeletePlanEntitlementExecute), arg0)
}

// GetCompanyOverride mocks base method.
func (m *MockEntitlementsAPI) GetCompanyOverride(arg0 context.Context, arg1 string) api.ApiGetCompanyOverrideRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyOverride", arg0, arg1)
	ret0, _ := ret[0].(api.ApiGetCompanyOverrideRequest)
	return ret0
}

// GetCompanyOverride indicates an expected call of GetCompanyOverride.
func (mr *MockEntitlementsAPIMockRecorder) GetCompanyOverride(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyOverride", reflect.TypeOf((*MockEntitlementsAPI)(nil).GetCompanyOverride), arg0, arg1)
}

// GetCompanyOverrideExecute mocks base method.
func (m *MockEntitlementsAPI) GetCompanyOverrideExecute(arg0 api.ApiGetCompanyOverrideRequest) (*api.GetCompanyOverrideResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyOverrideExecute", arg0)
	ret0, _ := ret[0].(*api.GetCompanyOverrideResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCompanyOverrideExecute indicates an expected call of GetCompanyOverrideExecute.
func (mr *MockEntitlementsAPIMockRecorder) GetCompanyOverrideExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyOverrideExecute", reflect.TypeOf((*MockEntitlementsAPI)(nil).GetCompanyOverrideExecute), arg0)
}

// GetFeatureUsageByCompany mocks base method.
func (m *MockEntitlementsAPI) GetFeatureUsageByCompany(arg0 context.Context) api.ApiGetFeatureUsageByCompanyRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeatureUsageByCompany", arg0)
	ret0, _ := ret[0].(api.ApiGetFeatureUsageByCompanyRequest)
	return ret0
}

// GetFeatureUsageByCompany indicates an expected call of GetFeatureUsageByCompany.
func (mr *MockEntitlementsAPIMockRecorder) GetFeatureUsageByCompany(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeatureUsageByCompany", reflect.TypeOf((*MockEntitlementsAPI)(nil).GetFeatureUsageByCompany), arg0)
}

// GetFeatureUsageByCompanyExecute mocks base method.
func (m *MockEntitlementsAPI) GetFeatureUsageByCompanyExecute(arg0 api.ApiGetFeatureUsageByCompanyRequest) (*api.GetFeatureUsageByCompanyResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeatureUsageByCompanyExecute", arg0)
	ret0, _ := ret[0].(*api.GetFeatureUsageByCompanyResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFeatureUsageByCompanyExecute indicates an expected call of GetFeatureUsageByCompanyExecute.
func (mr *MockEntitlementsAPIMockRecorder) GetFeatureUsageByCompanyExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeatureUsageByCompanyExecute", reflect.TypeOf((*MockEntitlementsAPI)(nil).GetFeatureUsageByCompanyExecute), arg0)
}

// GetPlanEntitlement mocks base method.
func (m *MockEntitlementsAPI) GetPlanEntitlement(arg0 context.Context, arg1 string) api.ApiGetPlanEntitlementRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlanEntitlement", arg0, arg1)
	ret0, _ := ret[0].(api.ApiGetPlanEntitlementRequest)
	return ret0
}

// GetPlanEntitlement indicates an expected call of GetPlanEntitlement.
func (mr *MockEntitlementsAPIMockRecorder) GetPlanEntitlement(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlanEntitlement", reflect.TypeOf((*MockEntitlementsAPI)(nil).GetPlanEntitlement), arg0, arg1)
}

// GetPlanEntitlementExecute mocks base method.
func (m *MockEntitlementsAPI) GetPlanEntitlementExecute(arg0 api.ApiGetPlanEntitlementRequest) (*api.GetPlanEntitlementResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlanEntitlementExecute", arg0)
	ret0, _ := ret[0].(*api.GetPlanEntitlementResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPlanEntitlementExecute indicates an expected call of GetPlanEntitlementExecute.
func (mr *MockEntitlementsAPIMockRecorder) GetPlanEntitlementExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlanEntitlementExecute", reflect.TypeOf((*MockEntitlementsAPI)(nil).GetPlanEntitlementExecute), arg0)
}

// ListCompanyOverrides mocks base method.
func (m *MockEntitlementsAPI) ListCompanyOverrides(arg0 context.Context) api.ApiListCompanyOverridesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCompanyOverrides", arg0)
	ret0, _ := ret[0].(api.ApiListCompanyOverridesRequest)
	return ret0
}

// ListCompanyOverrides indicates an expected call of ListCompanyOverrides.
func (mr *MockEntitlementsAPIMockRecorder) ListCompanyOverrides(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCompanyOverrides", reflect.TypeOf((*MockEntitlementsAPI)(nil).ListCompanyOverrides), arg0)
}

// ListCompanyOverridesExecute mocks base method.
func (m *MockEntitlementsAPI) ListCompanyOverridesExecute(arg0 api.ApiListCompanyOverridesRequest) (*api.ListCompanyOverridesResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCompanyOverridesExecute", arg0)
	ret0, _ := ret[0].(*api.ListCompanyOverridesResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCompanyOverridesExecute indicates an expected call of ListCompanyOverridesExecute.
func (mr *MockEntitlementsAPIMockRecorder) ListCompanyOverridesExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCompanyOverridesExecute", reflect.TypeOf((*MockEntitlementsAPI)(nil).ListCompanyOverridesExecute), arg0)
}

// ListFeatureCompanies mocks base method.
func (m *MockEntitlementsAPI) ListFeatureCompanies(arg0 context.Context) api.ApiListFeatureCompaniesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFeatureCompanies", arg0)
	ret0, _ := ret[0].(api.ApiListFeatureCompaniesRequest)
	return ret0
}

// ListFeatureCompanies indicates an expected call of ListFeatureCompanies.
func (mr *MockEntitlementsAPIMockRecorder) ListFeatureCompanies(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFeatureCompanies", reflect.TypeOf((*MockEntitlementsAPI)(nil).ListFeatureCompanies), arg0)
}

// ListFeatureCompaniesExecute mocks base method.
func (m *MockEntitlementsAPI) ListFeatureCompaniesExecute(arg0 api.ApiListFeatureCompaniesRequest) (*api.ListFeatureCompaniesResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFeatureCompaniesExecute", arg0)
	ret0, _ := ret[0].(*api.ListFeatureCompaniesResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListFeatureCompaniesExecute indicates an expected call of ListFeatureCompaniesExecute.
func (mr *MockEntitlementsAPIMockRecorder) ListFeatureCompaniesExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFeatureCompaniesExecute", reflect.TypeOf((*MockEntitlementsAPI)(nil).ListFeatureCompaniesExecute), arg0)
}

// ListFeatureUsage mocks base method.
func (m *MockEntitlementsAPI) ListFeatureUsage(arg0 context.Context) api.ApiListFeatureUsageRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFeatureUsage", arg0)
	ret0, _ := ret[0].(api.ApiListFeatureUsageRequest)
	return ret0
}

// ListFeatureUsage indicates an expected call of ListFeatureUsage.
func (mr *MockEntitlementsAPIMockRecorder) ListFeatureUsage(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFeatureUsage", reflect.TypeOf((*MockEntitlementsAPI)(nil).ListFeatureUsage), arg0)
}

// ListFeatureUsageExecute mocks base method.
func (m *MockEntitlementsAPI) ListFeatureUsageExecute(arg0 api.ApiListFeatureUsageRequest) (*api.ListFeatureUsageResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFeatureUsageExecute", arg0)
	ret0, _ := ret[0].(*api.ListFeatureUsageResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListFeatureUsageExecute indicates an expected call of ListFeatureUsageExecute.
func (mr *MockEntitlementsAPIMockRecorder) ListFeatureUsageExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFeatureUsageExecute", reflect.TypeOf((*MockEntitlementsAPI)(nil).ListFeatureUsageExecute), arg0)
}

// ListFeatureUsers mocks base method.
func (m *MockEntitlementsAPI) ListFeatureUsers(arg0 context.Context) api.ApiListFeatureUsersRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFeatureUsers", arg0)
	ret0, _ := ret[0].(api.ApiListFeatureUsersRequest)
	return ret0
}

// ListFeatureUsers indicates an expected call of ListFeatureUsers.
func (mr *MockEntitlementsAPIMockRecorder) ListFeatureUsers(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFeatureUsers", reflect.TypeOf((*MockEntitlementsAPI)(nil).ListFeatureUsers), arg0)
}

// ListFeatureUsersExecute mocks base method.
func (m *MockEntitlementsAPI) ListFeatureUsersExecute(arg0 api.ApiListFeatureUsersRequest) (*api.ListFeatureUsersResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFeatureUsersExecute", arg0)
	ret0, _ := ret[0].(*api.ListFeatureUsersResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListFeatureUsersExecute indicates an expected call of ListFeatureUsersExecute.
func (mr *MockEntitlementsAPIMockRecorder) ListFeatureUsersExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFeatureUsersExecute", reflect.TypeOf((*MockEntitlementsAPI)(nil).ListFeatureUsersExecute), arg0)
}

// ListPlanEntitlements mocks base method.
func (m *MockEntitlementsAPI) ListPlanEntitlements(arg0 context.Context) api.ApiListPlanEntitlementsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlanEntitlements", arg0)
	ret0, _ := ret[0].(api.ApiListPlanEntitlementsRequest)
	return ret0
}

// ListPlanEntitlements indicates an expected call of ListPlanEntitlements.
func (mr *MockEntitlementsAPIMockRecorder) ListPlanEntitlements(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlanEntitlements", reflect.TypeOf((*MockEntitlementsAPI)(nil).ListPlanEntitlements), arg0)
}

// ListPlanEntitlementsExecute mocks base method.
func (m *MockEntitlementsAPI) ListPlanEntitlementsExecute(arg0 api.ApiListPlanEntitlementsRequest) (*api.ListPlanEntitlementsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlanEntitlementsExecute", arg0)
	ret0, _ := ret[0].(*api.ListPlanEntitlementsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPlanEntitlementsExecute indicates an expected call of ListPlanEntitlementsExecute.
func (mr *MockEntitlementsAPIMockRecorder) ListPlanEntitlementsExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlanEntitlementsExecute", reflect.TypeOf((*MockEntitlementsAPI)(nil).ListPlanEntitlementsExecute), arg0)
}

// UpdateCompanyOverride mocks base method.
func (m *MockEntitlementsAPI) UpdateCompanyOverride(arg0 context.Context, arg1 string) api.ApiUpdateCompanyOverrideRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCompanyOverride", arg0, arg1)
	ret0, _ := ret[0].(api.ApiUpdateCompanyOverrideRequest)
	return ret0
}

// UpdateCompanyOverride indicates an expected call of UpdateCompanyOverride.
func (mr *MockEntitlementsAPIMockRecorder) UpdateCompanyOverride(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCompanyOverride", reflect.TypeOf((*MockEntitlementsAPI)(nil).UpdateCompanyOverride), arg0, arg1)
}

// UpdateCompanyOverrideExecute mocks base method.
func (m *MockEntitlementsAPI) UpdateCompanyOverrideExecute(arg0 api.ApiUpdateCompanyOverrideRequest) (*api.UpdateCompanyOverrideResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCompanyOverrideExecute", arg0)
	ret0, _ := ret[0].(*api.UpdateCompanyOverrideResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateCompanyOverrideExecute indicates an expected call of UpdateCompanyOverrideExecute.
func (mr *MockEntitlementsAPIMockRecorder) UpdateCompanyOverrideExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCompanyOverrideExecute", reflect.TypeOf((*MockEntitlementsAPI)(nil).UpdateCompanyOverrideExecute), arg0)
}

// UpdatePlanEntitlement mocks base method.
func (m *MockEntitlementsAPI) UpdatePlanEntitlement(arg0 context.Context, arg1 string) api.ApiUpdatePlanEntitlementRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlanEntitlement", arg0, arg1)
	ret0, _ := ret[0].(api.ApiUpdatePlanEntitlementRequest)
	return ret0
}

// UpdatePlanEntitlement indicates an expected call of UpdatePlanEntitlement.
func (mr *MockEntitlementsAPIMockRecorder) UpdatePlanEntitlement(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlanEntitlement", reflect.TypeOf((*MockEntitlementsAPI)(nil).UpdatePlanEntitlement), arg0, arg1)
}

// UpdatePlanEntitlementExecute mocks base method.
func (m *MockEntitlementsAPI) UpdatePlanEntitlementExecute(arg0 api.ApiUpdatePlanEntitlementRequest) (*api.UpdatePlanEntitlementResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlanEntitlementExecute", arg0)
	ret0, _ := ret[0].(*api.UpdatePlanEntitlementResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdatePlanEntitlementExecute indicates an expected call of UpdatePlanEntitlementExecute.
func (mr *MockEntitlementsAPIMockRecorder) UpdatePlanEntitlementExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlanEntitlementExecute", reflect.TypeOf((*MockEntitlementsAPI)(nil).UpdatePlanEntitlementExecute), arg0)
}

// MockEventsAPI is a mock of EventsAPI interface.
type MockEventsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockEventsAPIMockRecorder
}

// MockEventsAPIMockRecorder is the mock recorder for MockEventsAPI.
type MockEventsAPIMockRecorder struct {
	mock *MockEventsAPI
}

// NewMockEventsAPI creates a new mock instance.
func NewMockEventsAPI(ctrl *gomock.Controller) *MockEventsAPI {
	mock := &MockEventsAPI{ctrl: ctrl}
	mock.recorder = &MockEventsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventsAPI) EXPECT() *MockEventsAPIMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockEventsAPI) CreateEvent(arg0 context.Context) api.ApiCreateEventRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", arg0)
	ret0, _ := ret[0].(api.ApiCreateEventRequest)
	return ret0
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockEventsAPIMockRecorder) CreateEvent(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockEventsAPI)(nil).CreateEvent), arg0)
}

// CreateEventBatch mocks base method.
func (m *MockEventsAPI) CreateEventBatch(arg0 context.Context) api.ApiCreateEventBatchRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEventBatch", arg0)
	ret0, _ := ret[0].(api.ApiCreateEventBatchRequest)
	return ret0
}

// CreateEventBatch indicates an expected call of CreateEventBatch.
func (mr *MockEventsAPIMockRecorder) CreateEventBatch(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventBatch", reflect.TypeOf((*MockEventsAPI)(nil).CreateEventBatch), arg0)
}

// CreateEventBatchExecute mocks base method.
func (m *MockEventsAPI) CreateEventBatchExecute(arg0 api.ApiCreateEventBatchRequest) (*api.CreateEventBatchResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEventBatchExecute", arg0)
	ret0, _ := ret[0].(*api.CreateEventBatchResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateEventBatchExecute indicates an expected call of CreateEventBatchExecute.
func (mr *MockEventsAPIMockRecorder) CreateEventBatchExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventBatchExecute", reflect.TypeOf((*MockEventsAPI)(nil).CreateEventBatchExecute), arg0)
}

// CreateEventExecute mocks base method.
func (m *MockEventsAPI) CreateEventExecute(arg0 api.ApiCreateEventRequest) (*api.CreateEventResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEventExecute", arg0)
	ret0, _ := ret[0].(*api.CreateEventResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateEventExecute indicates an expected call of CreateEventExecute.
func (mr *MockEventsAPIMockRecorder) CreateEventExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventExecute", reflect.TypeOf((*MockEventsAPI)(nil).CreateEventExecute), arg0)
}

// GetEvent mocks base method.
func (m *MockEventsAPI) GetEvent(arg0 context.Context, arg1 string) api.ApiGetEventRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", arg0, arg1)
	ret0, _ := ret[0].(api.ApiGetEventRequest)
	return ret0
}

// GetEvent indicates an expected call of GetEvent.
func (mr *MockEventsAPIMockRecorder) GetEvent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockEventsAPI)(nil).GetEvent), arg0, arg1)
}

// GetEventExecute mocks base method.
func (m *MockEventsAPI) GetEventExecute(arg0 api.ApiGetEventRequest) (*api.GetEventResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventExecute", arg0)
	ret0, _ := ret[0].(*api.GetEventResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEventExecute indicates an expected call of GetEventExecute.
func (mr *MockEventsAPIMockRecorder) GetEventExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventExecute", reflect.TypeOf((*MockEventsAPI)(nil).GetEventExecute), arg0)
}

// GetEventSummaries mocks base method.
func (m *MockEventsAPI) GetEventSummaries(arg0 context.Context) api.ApiGetEventSummariesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventSummaries", arg0)
	ret0, _ := ret[0].(api.ApiGetEventSummariesRequest)
	return ret0
}

// GetEventSummaries indicates an expected call of GetEventSummaries.
func (mr *MockEventsAPIMockRecorder) GetEventSummaries(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventSummaries", reflect.TypeOf((*MockEventsAPI)(nil).GetEventSummaries), arg0)
}

// GetEventSummariesExecute mocks base method.
func (m *MockEventsAPI) GetEventSummariesExecute(arg0 api.ApiGetEventSummariesRequest) (*api.GetEventSummariesResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventSummariesExecute", arg0)
	ret0, _ := ret[0].(*api.GetEventSummariesResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEventSummariesExecute indicates an expected call of GetEventSummariesExecute.
func (mr *MockEventsAPIMockRecorder) GetEventSummariesExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventSummariesExecute", reflect.TypeOf((*MockEventsAPI)(nil).GetEventSummariesExecute), arg0)
}

// GetEventSummaryBySubtype mocks base method.
func (m *MockEventsAPI) GetEventSummaryBySubtype(arg0 context.Context, arg1 string) api.ApiGetEventSummaryBySubtypeRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventSummaryBySubtype", arg0, arg1)
	ret0, _ := ret[0].(api.ApiGetEventSummaryBySubtypeRequest)
	return ret0
}

// GetEventSummaryBySubtype indicates an expected call of GetEventSummaryBySubtype.
func (mr *MockEventsAPIMockRecorder) GetEventSummaryBySubtype(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventSummaryBySubtype", reflect.TypeOf((*MockEventsAPI)(nil).GetEventSummaryBySubtype), arg0, arg1)
}

// GetEventSummaryBySubtypeExecute mocks base method.
func (m *MockEventsAPI) GetEventSummaryBySubtypeExecute(arg0 api.ApiGetEventSummaryBySubtypeRequest) (*api.GetEventSummaryBySubtypeResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventSummaryBySubtypeExecute", arg0)
	ret0, _ := ret[0].(*api.GetEventSummaryBySubtypeResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEventSummaryBySubtypeExecute indicates an expected call of GetEventSummaryBySubtypeExecute.
func (mr *MockEventsAPIMockRecorder) GetEventSummaryBySubtypeExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventSummaryBySubtypeExecute", reflect.TypeOf((*MockEventsAPI)(nil).GetEventSummaryBySubtypeExecute), arg0)
}

// GetSegmentIntegrationStatus mocks base method.
func (m *MockEventsAPI) GetSegmentIntegrationStatus(arg0 context.Context) api.ApiGetSegmentIntegrationStatusRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSegmentIntegrationStatus", arg0)
	ret0, _ := ret[0].(api.ApiGetSegmentIntegrationStatusRequest)
	return ret0
}

// GetSegmentIntegrationStatus indicates an expected call of GetSegmentIntegrationStatus.
func (mr *MockEventsAPIMockRecorder) GetSegmentIntegrationStatus(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSegmentIntegrationStatus", reflect.TypeOf((*MockEventsAPI)(nil).GetSegmentIntegrationStatus), arg0)
}

// GetSegmentIntegrationStatusExecute mocks base method.
func (m *MockEventsAPI) GetSegmentIntegrationStatusExecute(arg0 api.ApiGetSegmentIntegrationStatusRequest) (*api.GetSegmentIntegrationStatusResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSegmentIntegrationStatusExecute", arg0)
	ret0, _ := ret[0].(*api.GetSegmentIntegrationStatusResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSegmentIntegrationStatusExecute indicates an expected call of GetSegmentIntegrationStatusExecute.
func (mr *MockEventsAPIMockRecorder) GetSegmentIntegrationStatusExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSegmentIntegrationStatusExecute", reflect.TypeOf((*MockEventsAPI)(nil).GetSegmentIntegrationStatusExecute), arg0)
}

// ListEvents mocks base method.
func (m *MockEventsAPI) ListEvents(arg0 context.Context) api.ApiListEventsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvents", arg0)
	ret0, _ := ret[0].(api.ApiListEventsRequest)
	return ret0
}

// ListEvents indicates an expected call of ListEvents.
func (mr *MockEventsAPIMockRecorder) ListEvents(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvents", reflect.TypeOf((*MockEventsAPI)(nil).ListEvents), arg0)
}

// ListEventsExecute mocks base method.
func (m *MockEventsAPI) ListEventsExecute(arg0 api.ApiListEventsRequest) (*api.ListEventsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEventsExecute", arg0)
	ret0, _ := ret[0].(*api.ListEventsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEventsExecute indicates an expected call of ListEventsExecute.
func (mr *MockEventsAPIMockRecorder) ListEventsExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventsExecute", reflect.TypeOf((*MockEventsAPI)(nil).ListEventsExecute), arg0)
}

// ListMetricCounts mocks base method.
func (m *MockEventsAPI) ListMetricCounts(arg0 context.Context) api.ApiListMetricCountsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMetricCounts", arg0)
	ret0, _ := ret[0].(api.ApiListMetricCountsRequest)
	return ret0
}

// ListMetricCounts indicates an expected call of ListMetricCounts.
func (mr *MockEventsAPIMockRecorder) ListMetricCounts(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetricCounts", reflect.TypeOf((*MockEventsAPI)(nil).ListMetricCounts), arg0)
}

// ListMetricCountsExecute mocks base method.
func (m *MockEventsAPI) ListMetricCountsExecute(arg0 api.ApiListMetricCountsRequest) (*api.ListMetricCountsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMetricCountsExecute", arg0)
	ret0, _ := ret[0].(*api.ListMetricCountsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListMetricCountsExecute indicates an expected call of ListMetricCountsExecute.
func (mr *MockEventsAPIMockRecorder) ListMetricCountsExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetricCountsExecute", reflect.TypeOf((*MockEventsAPI)(nil).ListMetricCountsExecute), arg0)
}

// MockFeaturesAPI is a mock of FeaturesAPI interface.
type MockFeaturesAPI struct {
	ctrl     *gomock.Controller
	recorder *MockFeaturesAPIMockRecorder
}

// MockFeaturesAPIMockRecorder is the mock recorder for MockFeaturesAPI.
type MockFeaturesAPIMockRecorder struct {
	mock *MockFeaturesAPI
}

// NewMockFeaturesAPI creates a new mock instance.
func NewMockFeaturesAPI(ctrl *gomock.Controller) *MockFeaturesAPI {
	mock := &MockFeaturesAPI{ctrl: ctrl}
	mock.recorder = &MockFeaturesAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeaturesAPI) EXPECT() *MockFeaturesAPIMockRecorder {
	return m.recorder
}

// CheckFlag mocks base method.
func (m *MockFeaturesAPI) CheckFlag(arg0 context.Context, arg1 string) api.ApiCheckFlagRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckFlag", arg0, arg1)
	ret0, _ := ret[0].(api.ApiCheckFlagRequest)
	return ret0
}

// CheckFlag indicates an expected call of CheckFlag.
func (mr *MockFeaturesAPIMockRecorder) CheckFlag(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckFlag", reflect.TypeOf((*MockFeaturesAPI)(nil).CheckFlag), arg0, arg1)
}

// CheckFlagExecute mocks base method.
func (m *MockFeaturesAPI) CheckFlagExecute(arg0 api.ApiCheckFlagRequest) (*api.CheckFlagResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckFlagExecute", arg0)
	ret0, _ := ret[0].(*api.CheckFlagResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckFlagExecute indicates an expected call of CheckFlagExecute.
func (mr *MockFeaturesAPIMockRecorder) CheckFlagExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckFlagExecute", reflect.TypeOf((*MockFeaturesAPI)(nil).CheckFlagExecute), arg0)
}

// CheckFlags mocks base method.
func (m *MockFeaturesAPI) CheckFlags(arg0 context.Context) api.ApiCheckFlagsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckFlags", arg0)
	ret0, _ := ret[0].(api.ApiCheckFlagsRequest)
	return ret0
}

// CheckFlags indicates an expected call of CheckFlags.
func (mr *MockFeaturesAPIMockRecorder) CheckFlags(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckFlags", reflect.TypeOf((*MockFeaturesAPI)(nil).CheckFlags), arg0)
}

// CheckFlagsExecute mocks base method.
func (m *MockFeaturesAPI) CheckFlagsExecute(arg0 api.ApiCheckFlagsRequest) (*api.CheckFlagsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckFlagsExecute", arg0)
	ret0, _ := ret[0].(*api.CheckFlagsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckFlagsExecute indicates an expected call of CheckFlagsExecute.
func (mr *MockFeaturesAPIMockRecorder) CheckFlagsExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckFlagsExecute", reflect.TypeOf((*MockFeaturesAPI)(nil).CheckFlagsExecute), arg0)
}

// CountAudienceCompanies mocks base method.
func (m *MockFeaturesAPI) CountAudienceCompanies(arg0 context.Context) api.ApiCountAudienceCompaniesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAudienceCompanies", arg0)
	ret0, _ := ret[0].(api.ApiCountAudienceCompaniesRequest)
	return ret0
}

// CountAudienceCompanies indicates an expected call of CountAudienceCompanies.
func (mr *MockFeaturesAPIMockRecorder) CountAudienceCompanies(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAudienceCompanies", reflect.TypeOf((*MockFeaturesAPI)(nil).CountAudienceCompanies), arg0)
}

// CountAudienceCompaniesExecute mocks base method.
func (m *MockFeaturesAPI) CountAudienceCompaniesExecute(arg0 api.ApiCountAudienceCompaniesRequest) (*api.CountAudienceCompaniesResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAudienceCompaniesExecute", arg0)
	ret0, _ := ret[0].(*api.CountAudienceCompaniesResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CountAudienceCompaniesExecute indicates an expected call of CountAudienceCompaniesExecute.
func (mr *MockFeaturesAPIMockRecorder) CountAudienceCompaniesExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAudienceCompaniesExecute", reflect.TypeOf((*MockFeaturesAPI)(nil).CountAudienceCompaniesExecute), arg0)
}

// CountAudienceUsers mocks base method.
func (m *MockFeaturesAPI) CountAudienceUsers(arg0 context.Context) api.ApiCountAudienceUsersRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAudienceUsers", arg0)
	ret0, _ := ret[0].(api.ApiCountAudienceUsersRequest)
	return ret0
}

// CountAudienceUsers indicates an expected call of CountAudienceUsers.
func (mr *MockFeaturesAPIMockRecorder) CountAudienceUsers(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAudienceUsers", reflect.TypeOf((*MockFeaturesAPI)(nil).CountAudienceUsers), arg0)
}

// CountAudienceUsersExecute mocks base method.
func (m *MockFeaturesAPI) CountAudienceUsersExecute(arg0 api.ApiCountAudienceUsersRequest) (*api.CountAudienceUsersResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAudienceUsersExecute", arg0)
	ret0, _ := ret[0].(*api.CountAudienceUsersResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CountAudienceUsersExecute indicates an expected call of CountAudienceUsersExecute.
func (mr *MockFeaturesAPIMockRecorder) CountAudienceUsersExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAudienceUsersExecute", reflect.TypeOf((*MockFeaturesAPI)(nil).CountAudienceUsersExecute), arg0)
}

// CountFeatures mocks base method.
func (m *MockFeaturesAPI) CountFeatures(arg0 context.Context) api.ApiCountFeaturesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountFeatures", arg0)
	ret0, _ := ret[0].(api.ApiCountFeaturesRequest)
	return ret0
}

// CountFeatures indicates an expected call of CountFeatures.
func (mr *MockFeaturesAPIMockRecorder) CountFeatures(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountFeatures", reflect.TypeOf((*MockFeaturesAPI)(nil).CountFeatures), arg0)
}

// CountFeaturesExecute mocks base method.
func (m *MockFeaturesAPI) CountFeaturesExecute(arg0 api.ApiCountFeaturesRequest) (*api.CountFeaturesResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountFeaturesExecute", arg0)
	ret0, _ := ret[0].(*api.CountFeaturesResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CountFeaturesExecute indicates an expected call of CountFeaturesExecute.
func (mr *MockFeaturesAPIMockRecorder) CountFeaturesExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountFeaturesExecute", reflect.TypeOf((*MockFeaturesAPI)(nil).CountFeaturesExecute), arg0)
}

// CountFlags mocks base method.
func (m *MockFeaturesAPI) CountFlags(arg0 context.Context) api.ApiCountFlagsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountFlags", arg0)
	ret0, _ := ret[0].(api.ApiCountFlagsRequest)
	return ret0
}

// CountFlags indicates an expected call of CountFlags.
func (mr *MockFeaturesAPIMockRecorder) CountFlags(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountFlags", reflect.TypeOf((*MockFeaturesAPI)(nil).CountFlags), arg0)
}

// CountFlagsExecute mocks base method.
func (m *MockFeaturesAPI) CountFlagsExecute(arg0 api.ApiCountFlagsRequest) (*api.CountFlagsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountFlagsExecute", arg0)
	ret0, _ := ret[0].(*api.CountFlagsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CountFlagsExecute indicates an expected call of CountFlagsExecute.
func (mr *MockFeaturesAPIMockRecorder) CountFlagsExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountFlagsExecute", reflect.TypeOf((*MockFeaturesAPI)(nil).CountFlagsExecute), arg0)
}

// CreateFeature mocks base method.
func (m *MockFeaturesAPI) CreateFeature(arg0 context.Context) api.ApiCreateFeatureRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFeature", arg0)
	ret0, _ := ret[0].(api.ApiCreateFeatureRequest)
	return ret0
}

// CreateFeature indicates an expected call of CreateFeature.
func (mr *MockFeaturesAPIMockRecorder) CreateFeature(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFeature", reflect.TypeOf((*MockFeaturesAPI)(nil).CreateFeature), arg0)
}

// CreateFeatureExecute mocks base method.
func (m *MockFeaturesAPI) CreateFeatureExecute(arg0 api.ApiCreateFeatureRequest) (*api.CreateFeatureResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFeatureExecute", arg0)
	ret0, _ := ret[0].(*api.CreateFeatureResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateFeatureExecute indicates an expected call of CreateFeatureExecute.
func (mr *MockFeaturesAPIMockRecorder) CreateFeatureExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFeatureExecute", reflect.TypeOf((*MockFeaturesAPI)(nil).CreateFeatureExecute), arg0)
}

// CreateFlag mocks base method.
func (m *MockFeaturesAPI) CreateFlag(arg0 context.Context) api.ApiCreateFlagRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFlag", arg0)
	ret0, _ := ret[0].(api.ApiCreateFlagRequest)
	return ret0
}

// CreateFlag indicates an expected call of CreateFlag.
func (mr *MockFeaturesAPIMockRecorder) CreateFlag(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlag", reflect.TypeOf((*MockFeaturesAPI)(nil).CreateFlag), arg0)
}

// CreateFlagExecute mocks base method.
func (m *MockFeaturesAPI) CreateFlagExecute(arg0 api.ApiCreateFlagRequest) (*api.CreateFlagResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFlagExecute", arg0)
	ret0, _ := ret[0].(*api.CreateFlagResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateFlagExecute indicates an expected call of CreateFlagExecute.
func (mr *MockFeaturesAPIMockRecorder) CreateFlagExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlagExecute", reflect.TypeOf((*MockFeaturesAPI)(nil).CreateFlagExecute), arg0)
}

// DeleteFeature mocks base method.
func (m *MockFeaturesAPI) DeleteFeature(arg0 context.Context, arg1 string) api.ApiDeleteFeatureRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFeature", arg0, arg1)
	ret0, _ := ret[0].(api.ApiDeleteFeatureRequest)
	return ret0
}

// DeleteFeature indicates an expected call of DeleteFeature.
func (mr *MockFeaturesAPIMockRecorder) DeleteFeature(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFeature", reflect.TypeOf((*MockFeaturesAPI)(nil).DeleteFeature), arg0, arg1)
}

// DeleteFeatureExecute mocks base method.
func (m *MockFeaturesAPI) DeleteFeatureExecute(arg0 api.ApiDeleteFeatureRequest) (*api.DeleteFeatureResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFeatureExecute", arg0)
	ret0, _ := ret[0].(*api.DeleteFeatureResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteFeatureExecute indicates an expected call of DeleteFeatureExecute.
func (mr *MockFeaturesAPIMockRecorder) DeleteFeatureExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFeatureExecute", reflect.TypeOf((*MockFeaturesAPI)(nil).DeleteFeatureExecute), arg0)
}

// DeleteFlag mocks base method.
func (m *MockFeaturesAPI) DeleteFlag(arg0 context.Context, arg1 string) api.ApiDeleteFlagRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFlag", arg0, arg1)
	ret0, _ := ret[0].(api.ApiDeleteFlagRequest)
	return ret0
}

// DeleteFlag indicates an expected call of DeleteFlag.
func (mr *MockFeaturesAPIMockRecorder) DeleteFlag(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFlag", reflect.TypeOf((*MockFeaturesAPI)(nil).DeleteFlag), arg0, arg1)
}

// DeleteFlagExecute mocks base method.
func (m *MockFeaturesAPI) DeleteFlagExecute(arg0 api.ApiDeleteFlagRequest) (*api.DeleteFlagResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFlagExecute", arg0)
	ret0, _ := ret[0].(*api.DeleteFlagResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteFlagExecute indicates an expected call of DeleteFlagExecute.
func (mr *MockFeaturesAPIMockRecorder) DeleteFlagExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFlagExecute", reflect.TypeOf((*MockFeaturesAPI)(nil).DeleteFlagExecute), arg0)
}

// GetFeature mocks base method.
func (m *MockFeaturesAPI) GetFeature(arg0 context.Context, arg1 string) api.ApiGetFeatureRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeature", arg0, arg1)
	ret0, _ := ret[0].(api.ApiGetFeatureRequest)
	return ret0
}

// GetFeature indicates an expected call of GetFeature.
func (mr *MockFeaturesAPIMockRecorder) GetFeature(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeature", reflect.TypeOf((*MockFeaturesAPI)(nil).GetFeature), arg0, arg1)
}

// GetFeatureExecute mocks base method.
func (m *MockFeaturesAPI) GetFeatureExecute(arg0 api.ApiGetFeatureRequest) (*api.GetFeatureResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeatureExecute", arg0)
	ret0, _ := ret[0].(*api.GetFeatureResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFeatureExecute indicates an expected call of GetFeatureExecute.
func (mr *MockFeaturesAPIMockRecorder) GetFeatureExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeatureExecute", reflect.TypeOf((*MockFeaturesAPI)(nil).GetFeatureExecute), arg0)
}

// GetFlag mocks base method.
func (m *MockFeaturesAPI) GetFlag(arg0 context.Context, arg1 string) api.ApiGetFlagRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlag", arg0, arg1)
	ret0, _ := ret[0].(api.ApiGetFlagRequest)
	return ret0
}

// GetFlag indicates an expected call of GetFlag.
func (mr *MockFeaturesAPIMockRecorder) GetFlag(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlag", reflect.TypeOf((*MockFeaturesAPI)(nil).GetFlag), arg0, arg1)
}

// GetFlagExecute mocks base method.
func (m *MockFeaturesAPI) GetFlagExecute(arg0 api.ApiGetFlagRequest) (*api.GetFlagResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlagExecute", arg0)
	ret0, _ := ret[0].(*api.GetFlagResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFlagExecute indicates an expected call of GetFlagExecute.
func (mr *MockFeaturesAPIMockRecorder) GetFlagExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlagExecute", reflect.TypeOf((*MockFeaturesAPI)(nil).GetFlagExecute), arg0)
}

// ListAudienceCompanies mocks base method.
func (m *MockFeaturesAPI) ListAudienceCompanies(arg0 context.Context) api.ApiListAudienceCompaniesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAudienceCompanies", arg0)
	ret0, _ := ret[0].(api.ApiListAudienceCompaniesRequest)
	return ret0
}

// ListAudienceCompanies indicates an expected call of ListAudienceCompanies.
func (mr *MockFeaturesAPIMockRecorder) ListAudienceCompanies(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAudienceCompanies", reflect.TypeOf((*MockFeaturesAPI)(nil).ListAudienceCompanies), arg0)
}

// ListAudienceCompaniesExecute mocks base method.
func (m *MockFeaturesAPI) ListAudienceCompaniesExecute(arg0 api.ApiListAudienceCompaniesRequest) (*api.ListAudienceCompaniesResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAudienceCompaniesExecute", arg0)
	ret0, _ := ret[0].(*api.ListAudienceCompaniesResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAudienceCompaniesExecute indicates an expected call of ListAudienceCompaniesExecute.
func (mr *MockFeaturesAPIMockRecorder) ListAudienceCompaniesExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAudienceCompaniesExecute", reflect.TypeOf((*MockFeaturesAPI)(nil).ListAudienceCompaniesExecute), arg0)
}

// ListAudienceUsers mocks base method.
func (m *MockFeaturesAPI) ListAudienceUsers(arg0 context.Context) api.ApiListAudienceUsersRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAudienceUsers", arg0)
	ret0, _ := ret[0].(api.ApiListAudienceUsersRequest)
	return ret0
}

// ListAudienceUsers indicates an expected call of ListAudienceUsers.
func (mr *MockFeaturesAPIMockRecorder) ListAudienceUsers(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAudienceUsers", reflect.TypeOf((*MockFeaturesAPI)(nil).ListAudienceUsers), arg0)
}

// ListAudienceUsersExecute mocks base method.
func (m *MockFeaturesAPI) ListAudienceUsersExecute(arg0 api.ApiListAudienceUsersRequest) (*api.ListAudienceUsersResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAudienceUsersExecute", arg0)
	ret0, _ := ret[0].(*api.ListAudienceUsersResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAudienceUsersExecute indicates an expected call of ListAudienceUsersExecute.
func (mr *MockFeaturesAPIMockRecorder) ListAudienceUsersExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAudienceUsersExecute", reflect.TypeOf((*MockFeaturesAPI)(nil).ListAudienceUsersExecute), arg0)
}

// ListFeatures mocks base method.
func (m *MockFeaturesAPI) ListFeatures(arg0 context.Context) api.ApiListFeaturesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFeatures", arg0)
	ret0, _ := ret[0].(api.ApiListFeaturesRequest)
	return ret0
}

// ListFeatures indicates an expected call of ListFeatures.
func (mr *MockFeaturesAPIMockRecorder) ListFeatures(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFeatures", reflect.TypeOf((*MockFeaturesAPI)(nil).ListFeatures), arg0)
}

// ListFeaturesExecute mocks base method.
func (m *MockFeaturesAPI) ListFeaturesExecute(arg0 api.ApiListFeaturesRequest) (*api.ListFeaturesResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFeaturesExecute", arg0)
	ret0, _ := ret[0].(*api.ListFeaturesResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListFeaturesExecute indicates an expected call of ListFeaturesExecute.
func (mr *MockFeaturesAPIMockRecorder) ListFeaturesExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFeaturesExecute", reflect.TypeOf((*MockFeaturesAPI)(nil).ListFeaturesExecute), arg0)
}

// ListFlags mocks base method.
func (m *MockFeaturesAPI) ListFlags(arg0 context.Context) api.ApiListFlagsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFlags", arg0)
	ret0, _ := ret[0].(api.ApiListFlagsRequest)
	return ret0
}

// ListFlags indicates an expected call of ListFlags.
func (mr *MockFeaturesAPIMockRecorder) ListFlags(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlags", reflect.TypeOf((*MockFeaturesAPI)(nil).ListFlags), arg0)
}

// ListFlagsExecute mocks base method.
func (m *MockFeaturesAPI) ListFlagsExecute(arg0 api.ApiListFlagsRequest) (*api.ListFlagsResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFlagsExecute", arg0)
	ret0, _ := ret[0].(*api.ListFlagsResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListFlagsExecute indicates an expected call of ListFlagsExecute.
func (mr *MockFeaturesAPIMockRecorder) ListFlagsExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlagsExecute", reflect.TypeOf((*MockFeaturesAPI)(nil).ListFlagsExecute), arg0)
}

// UpdateFeature mocks base method.
func (m *MockFeaturesAPI) UpdateFeature(arg0 context.Context, arg1 string) api.ApiUpdateFeatureRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFeature", arg0, arg1)
	ret0, _ := ret[0].(api.ApiUpdateFeatureRequest)
	return ret0
}

// UpdateFeature indicates an expected call of UpdateFeature.
func (mr *MockFeaturesAPIMockRecorder) UpdateFeature(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFeature", reflect.TypeOf((*MockFeaturesAPI)(nil).UpdateFeature), arg0, arg1)
}

// UpdateFeatureExecute mocks base method.
func (m *MockFeaturesAPI) UpdateFeatureExecute(arg0 api.ApiUpdateFeatureRequest) (*api.UpdateFeatureResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFeatureExecute", arg0)
	ret0, _ := ret[0].(*api.UpdateFeatureResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateFeatureExecute indicates an expected call of UpdateFeatureExecute.
func (mr *MockFeaturesAPIMockRecorder) UpdateFeatureExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFeatureExecute", reflect.TypeOf((*MockFeaturesAPI)(nil).UpdateFeatureExecute), arg0)
}

// UpdateFlag mocks base method.
func (m *MockFeaturesAPI) UpdateFlag(arg0 context.Context, arg1 string) api.ApiUpdateFlagRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlag", arg0, arg1)
	ret0, _ := ret[0].(api.ApiUpdateFlagRequest)
	return ret0
}

// UpdateFlag indicates an expected call of UpdateFlag.
func (mr *MockFeaturesAPIMockRecorder) UpdateFlag(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlag", reflect.TypeOf((*MockFeaturesAPI)(nil).UpdateFlag), arg0, arg1)
}

// UpdateFlagExecute mocks base method.
func (m *MockFeaturesAPI) UpdateFlagExecute(arg0 api.ApiUpdateFlagRequest) (*api.UpdateFlagResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlagExecute", arg0)
	ret0, _ := ret[0].(*api.UpdateFlagResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateFlagExecute indicates an expected call of UpdateFlagExecute.
func (mr *MockFeaturesAPIMockRecorder) UpdateFlagExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlagExecute", reflect.TypeOf((*MockFeaturesAPI)(nil).UpdateFlagExecute), arg0)
}

// UpdateFlagRules mocks base method.
func (m *MockFeaturesAPI) UpdateFlagRules(arg0 context.Context, arg1 string) api.ApiUpdateFlagRulesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlagRules", arg0, arg1)
	ret0, _ := ret[0].(api.ApiUpdateFlagRulesRequest)
	return ret0
}

// UpdateFlagRules indicates an expected call of UpdateFlagRules.
func (mr *MockFeaturesAPIMockRecorder) UpdateFlagRules(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlagRules", reflect.TypeOf((*MockFeaturesAPI)(nil).UpdateFlagRules), arg0, arg1)
}

// UpdateFlagRulesExecute mocks base method.
func (m *MockFeaturesAPI) UpdateFlagRulesExecute(arg0 api.ApiUpdateFlagRulesRequest) (*api.UpdateFlagRulesResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFlagRulesExecute", arg0)
	ret0, _ := ret[0].(*api.UpdateFlagRulesResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateFlagRulesExecute indicates an expected call of UpdateFlagRulesExecute.
func (mr *MockFeaturesAPIMockRecorder) UpdateFlagRulesExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFlagRulesExecute", reflect.TypeOf((*MockFeaturesAPI)(nil).UpdateFlagRulesExecute), arg0)
}

// MockPlansAPI is a mock of PlansAPI interface.
type MockPlansAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPlansAPIMockRecorder
}

// MockPlansAPIMockRecorder is the mock recorder for MockPlansAPI.
type MockPlansAPIMockRecorder struct {
	mock *MockPlansAPI
}

// NewMockPlansAPI creates a new mock instance.
func NewMockPlansAPI(ctrl *gomock.Controller) *MockPlansAPI {
	mock := &MockPlansAPI{ctrl: ctrl}
	mock.recorder = &MockPlansAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlansAPI) EXPECT() *MockPlansAPIMockRecorder {
	return m.recorder
}

// CountPlans mocks base method.
func (m *MockPlansAPI) CountPlans(arg0 context.Context) api.ApiCountPlansRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPlans", arg0)
	ret0, _ := ret[0].(api.ApiCountPlansRequest)
	return ret0
}

// CountPlans indicates an expected call of CountPlans.
func (mr *MockPlansAPIMockRecorder) CountPlans(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPlans", reflect.TypeOf((*MockPlansAPI)(nil).CountPlans), arg0)
}

// CountPlansExecute mocks base method.
func (m *MockPlansAPI) CountPlansExecute(arg0 api.ApiCountPlansRequest) (*api.CountPlansResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPlansExecute", arg0)
	ret0, _ := ret[0].(*api.CountPlansResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CountPlansExecute indicates an expected call of CountPlansExecute.
func (mr *MockPlansAPIMockRecorder) CountPlansExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPlansExecute", reflect.TypeOf((*MockPlansAPI)(nil).CountPlansExecute), arg0)
}

// CreatePlan mocks base method.
func (m *MockPlansAPI) CreatePlan(arg0 context.Context) api.ApiCreatePlanRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlan", arg0)
	ret0, _ := ret[0].(api.ApiCreatePlanRequest)
	return ret0
}

// CreatePlan indicates an expected call of CreatePlan.
func (mr *MockPlansAPIMockRecorder) CreatePlan(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlan", reflect.TypeOf((*MockPlansAPI)(nil).CreatePlan), arg0)
}

// CreatePlanExecute mocks base method.
func (m *MockPlansAPI) CreatePlanExecute(arg0 api.ApiCreatePlanRequest) (*api.CreatePlanResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlanExecute", arg0)
	ret0, _ := ret[0].(*api.CreatePlanResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreatePlanExecute indicates an expected call of CreatePlanExecute.
func (mr *MockPlansAPIMockRecorder) CreatePlanExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlanExecute", reflect.TypeOf((*MockPlansAPI)(nil).CreatePlanExecute), arg0)
}

// DeleteAudience mocks base method.
func (m *MockPlansAPI) DeleteAudience(arg0 context.Context, arg1 string) api.ApiDeleteAudienceRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAudience", arg0, arg1)
	ret0, _ := ret[0].(api.ApiDeleteAudienceRequest)
	return ret0
}

// DeleteAudience indicates an expected call of DeleteAudience.
func (mr *MockPlansAPIMockRecorder) DeleteAudience(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAudience", reflect.TypeOf((*MockPlansAPI)(nil).DeleteAudience), arg0, arg1)
}

// DeleteAudienceExecute mocks base method.
func (m *MockPlansAPI) DeleteAudienceExecute(arg0 api.ApiDeleteAudienceRequest) (*api.DeleteAudienceResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAudienceExecute", arg0)
	ret0, _ := ret[0].(*api.DeleteAudienceResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteAudienceExecute indicates an expected call of DeleteAudienceExecute.
func (mr *MockPlansAPIMockRecorder) DeleteAudienceExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAudienceExecute", reflect.TypeOf((*MockPlansAPI)(nil).DeleteAudienceExecute), arg0)
}

// DeletePlan mocks base method.
func (m *MockPlansAPI) DeletePlan(arg0 context.Context, arg1 string) api.ApiDeletePlanRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlan", arg0, arg1)
	ret0, _ := ret[0].(api.ApiDeletePlanRequest)
	return ret0
}

// DeletePlan indicates an expected call of DeletePlan.
func (mr *MockPlansAPIMockRecorder) DeletePlan(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlan", reflect.TypeOf((*MockPlansAPI)(nil).DeletePlan), arg0, arg1)
}

// DeletePlanExecute mocks base method.
func (m *MockPlansAPI) DeletePlanExecute(arg0 api.ApiDeletePlanRequest) (*api.DeletePlanResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlanExecute", arg0)
	ret0, _ := ret[0].(*api.DeletePlanResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeletePlanExecute indicates an expected call of DeletePlanExecute.
func (mr *MockPlansAPIMockRecorder) DeletePlanExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlanExecute", reflect.TypeOf((*MockPlansAPI)(nil).DeletePlanExecute), arg0)
}

// GetAudience mocks base method.
func (m *MockPlansAPI) GetAudience(arg0 context.Context, arg1 string) api.ApiGetAudienceRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAudience", arg0, arg1)
	ret0, _ := ret[0].(api.ApiGetAudienceRequest)
	return ret0
}

// GetAudience indicates an expected call of GetAudience.
func (mr *MockPlansAPIMockRecorder) GetAudience(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAudience", reflect.TypeOf((*MockPlansAPI)(nil).GetAudience), arg0, arg1)
}

// GetAudienceExecute mocks base method.
func (m *MockPlansAPI) GetAudienceExecute(arg0 api.ApiGetAudienceRequest) (*api.GetAudienceResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAudienceExecute", arg0)
	ret0, _ := ret[0].(*api.GetAudienceResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAudienceExecute indicates an expected call of GetAudienceExecute.
func (mr *MockPlansAPIMockRecorder) GetAudienceExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAudienceExecute", reflect.TypeOf((*MockPlansAPI)(nil).GetAudienceExecute), arg0)
}

// GetPlan mocks base method.
func (m *MockPlansAPI) GetPlan(arg0 context.Context, arg1 string) api.ApiGetPlanRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlan", arg0, arg1)
	ret0, _ := ret[0].(api.ApiGetPlanRequest)
	return ret0
}

// GetPlan indicates an expected call of GetPlan.
func (mr *MockPlansAPIMockRecorder) GetPlan(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlan", reflect.TypeOf((*MockPlansAPI)(nil).GetPlan), arg0, arg1)
}

// GetPlanExecute mocks base method.
func (m *MockPlansAPI) GetPlanExecute(arg0 api.ApiGetPlanRequest) (*api.GetPlanResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlanExecute", arg0)
	ret0, _ := ret[0].(*api.GetPlanResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPlanExecute indicates an expected call of GetPlanExecute.
func (mr *MockPlansAPIMockRecorder) GetPlanExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlanExecute", reflect.TypeOf((*MockPlansAPI)(nil).GetPlanExecute), arg0)
}

// ListPlans mocks base method.
func (m *MockPlansAPI) ListPlans(arg0 context.Context) api.ApiListPlansRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlans", arg0)
	ret0, _ := ret[0].(api.ApiListPlansRequest)
	return ret0
}

// ListPlans indicates an expected call of ListPlans.
func (mr *MockPlansAPIMockRecorder) ListPlans(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlans", reflect.TypeOf((*MockPlansAPI)(nil).ListPlans), arg0)
}

// ListPlansExecute mocks base method.
func (m *MockPlansAPI) ListPlansExecute(arg0 api.ApiListPlansRequest) (*api.ListPlansResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlansExecute", arg0)
	ret0, _ := ret[0].(*api.ListPlansResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPlansExecute indicates an expected call of ListPlansExecute.
func (mr *MockPlansAPIMockRecorder) ListPlansExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlansExecute", reflect.TypeOf((*MockPlansAPI)(nil).ListPlansExecute), arg0)
}

// UpdateAudience mocks base method.
func (m *MockPlansAPI) UpdateAudience(arg0 context.Context, arg1 string) api.ApiUpdateAudienceRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAudience", arg0, arg1)
	ret0, _ := ret[0].(api.ApiUpdateAudienceRequest)
	return ret0
}

// UpdateAudience indicates an expected call of UpdateAudience.
func (mr *MockPlansAPIMockRecorder) UpdateAudience(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAudience", reflect.TypeOf((*MockPlansAPI)(nil).UpdateAudience), arg0, arg1)
}

// UpdateAudienceExecute mocks base method.
func (m *MockPlansAPI) UpdateAudienceExecute(arg0 api.ApiUpdateAudienceRequest) (*api.UpdateAudienceResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAudienceExecute", arg0)
	ret0, _ := ret[0].(*api.UpdateAudienceResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateAudienceExecute indicates an expected call of UpdateAudienceExecute.
func (mr *MockPlansAPIMockRecorder) UpdateAudienceExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAudienceExecute", reflect.TypeOf((*MockPlansAPI)(nil).UpdateAudienceExecute), arg0)
}

// UpdatePlan mocks base method.
func (m *MockPlansAPI) UpdatePlan(arg0 context.Context, arg1 string) api.ApiUpdatePlanRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlan", arg0, arg1)
	ret0, _ := ret[0].(api.ApiUpdatePlanRequest)
	return ret0
}

// UpdatePlan indicates an expected call of UpdatePlan.
func (mr *MockPlansAPIMockRecorder) UpdatePlan(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlan", reflect.TypeOf((*MockPlansAPI)(nil).UpdatePlan), arg0, arg1)
}

// UpdatePlanExecute mocks base method.
func (m *MockPlansAPI) UpdatePlanExecute(arg0 api.ApiUpdatePlanRequest) (*api.UpdatePlanResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlanExecute", arg0)
	ret0, _ := ret[0].(*api.UpdatePlanResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdatePlanExecute indicates an expected call of UpdatePlanExecute.
func (mr *MockPlansAPIMockRecorder) UpdatePlanExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlanExecute", reflect.TypeOf((*MockPlansAPI)(nil).UpdatePlanExecute), arg0)
}

// UpsertBillingProductPlan mocks base method.
func (m *MockPlansAPI) UpsertBillingProductPlan(arg0 context.Context, arg1 string) api.ApiUpsertBillingProductPlanRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertBillingProductPlan", arg0, arg1)
	ret0, _ := ret[0].(api.ApiUpsertBillingProductPlanRequest)
	return ret0
}

// UpsertBillingProductPlan indicates an expected call of UpsertBillingProductPlan.
func (mr *MockPlansAPIMockRecorder) UpsertBillingProductPlan(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertBillingProductPlan", reflect.TypeOf((*MockPlansAPI)(nil).UpsertBillingProductPlan), arg0, arg1)
}

// UpsertBillingProductPlanExecute mocks base method.
func (m *MockPlansAPI) UpsertBillingProductPlanExecute(arg0 api.ApiUpsertBillingProductPlanRequest) (*api.UpsertBillingProductPlanResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertBillingProductPlanExecute", arg0)
	ret0, _ := ret[0].(*api.UpsertBillingProductPlanResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpsertBillingProductPlanExecute indicates an expected call of UpsertBillingProductPlanExecute.
func (mr *MockPlansAPIMockRecorder) UpsertBillingProductPlanExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertBillingProductPlanExecute", reflect.TypeOf((*MockPlansAPI)(nil).UpsertBillingProductPlanExecute), arg0)
}

// MockPlangroupsAPI is a mock of PlangroupsAPI interface.
type MockPlangroupsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPlangroupsAPIMockRecorder
}

// MockPlangroupsAPIMockRecorder is the mock recorder for MockPlangroupsAPI.
type MockPlangroupsAPIMockRecorder struct {
	mock *MockPlangroupsAPI
}

// NewMockPlangroupsAPI creates a new mock instance.
func NewMockPlangroupsAPI(ctrl *gomock.Controller) *MockPlangroupsAPI {
	mock := &MockPlangroupsAPI{ctrl: ctrl}
	mock.recorder = &MockPlangroupsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlangroupsAPI) EXPECT() *MockPlangroupsAPIMockRecorder {
	return m.recorder
}

// CreatePlanGroup mocks base method.
func (m *MockPlangroupsAPI) CreatePlanGroup(arg0 context.Context) api.ApiCreatePlanGroupRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlanGroup", arg0)
	ret0, _ := ret[0].(api.ApiCreatePlanGroupRequest)
	return ret0
}

// CreatePlanGroup indicates an expected call of CreatePlanGroup.
func (mr *MockPlangroupsAPIMockRecorder) CreatePlanGroup(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlanGroup", reflect.TypeOf((*MockPlangroupsAPI)(nil).CreatePlanGroup), arg0)
}

// CreatePlanGroupExecute mocks base method.
func (m *MockPlangroupsAPI) CreatePlanGroupExecute(arg0 api.ApiCreatePlanGroupRequest) (*api.CreatePlanGroupResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlanGroupExecute", arg0)
	ret0, _ := ret[0].(*api.CreatePlanGroupResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreatePlanGroupExecute indicates an expected call of CreatePlanGroupExecute.
func (mr *MockPlangroupsAPIMockRecorder) CreatePlanGroupExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlanGroupExecute", reflect.TypeOf((*MockPlangroupsAPI)(nil).CreatePlanGroupExecute), arg0)
}

// GetPlanGroup mocks base method.
func (m *MockPlangroupsAPI) GetPlanGroup(arg0 context.Context) api.ApiGetPlanGroupRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlanGroup", arg0)
	ret0, _ := ret[0].(api.ApiGetPlanGroupRequest)
	return ret0
}

// GetPlanGroup indicates an expected call of GetPlanGroup.
func (mr *MockPlangroupsAPIMockRecorder) GetPlanGroup(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlanGroup", reflect.TypeOf((*MockPlangroupsAPI)(nil).GetPlanGroup), arg0)
}

// GetPlanGroupExecute mocks base method.
func (m *MockPlangroupsAPI) GetPlanGroupExecute(arg0 api.ApiGetPlanGroupRequest) (*api.GetPlanGroupResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlanGroupExecute", arg0)
	ret0, _ := ret[0].(*api.GetPlanGroupResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPlanGroupExecute indicates an expected call of GetPlanGroupExecute.
func (mr *MockPlangroupsAPIMockRecorder) GetPlanGroupExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlanGroupExecute", reflect.TypeOf((*MockPlangroupsAPI)(nil).GetPlanGroupExecute), arg0)
}

// UpdatePlanGroup mocks base method.
func (m *MockPlangroupsAPI) UpdatePlanGroup(arg0 context.Context, arg1 string) api.ApiUpdatePlanGroupRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlanGroup", arg0, arg1)
	ret0, _ := ret[0].(api.ApiUpdatePlanGroupRequest)
	return ret0
}

// UpdatePlanGroup indicates an expected call of UpdatePlanGroup.
func (mr *MockPlangroupsAPIMockRecorder) UpdatePlanGroup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlanGroup", reflect.TypeOf((*MockPlangroupsAPI)(nil).UpdatePlanGroup), arg0, arg1)
}

// UpdatePlanGroupExecute mocks base method.
func (m *MockPlangroupsAPI) UpdatePlanGroupExecute(arg0 api.ApiUpdatePlanGroupRequest) (*api.UpdatePlanGroupResponse, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlanGroupExecute", arg0)
	ret0, _ := ret[0].(*api.UpdatePlanGroupResponse)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdatePlanGroupExecute indicates an expected call of UpdatePlanGroupExecute.
func (mr *MockPlangroupsAPIMockRecorder) UpdatePlanGroupExecute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlanGroupExecute", reflect.TypeOf((*MockPlangroupsAPI)(nil).UpdatePlanGroupExecute), arg0)
}
