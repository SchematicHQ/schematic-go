// Code generated by MockGen. DO NOT EDIT.
// Source: ../schematic.go
//
// Generated by this command:
//
//	mockgen -source=../schematic.go -destination=client_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	schematic "github.com/SchematicHQ/schematic-go"
	api "github.com/SchematicHQ/schematic-go/api"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// API mocks base method.
func (m *MockClient) API() *api.APIClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "API")
	ret0, _ := ret[0].(*api.APIClient)
	return ret0
}

// API indicates an expected call of API.
func (mr *MockClientMockRecorder) API() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "API", reflect.TypeOf((*MockClient)(nil).API))
}

// AddFlagCheckCacheProvider mocks base method.
func (m *MockClient) AddFlagCheckCacheProvider(arg0 context.Context, arg1 schematic.CacheProvider[bool]) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddFlagCheckCacheProvider", arg0, arg1)
}

// AddFlagCheckCacheProvider indicates an expected call of AddFlagCheckCacheProvider.
func (mr *MockClientMockRecorder) AddFlagCheckCacheProvider(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFlagCheckCacheProvider", reflect.TypeOf((*MockClient)(nil).AddFlagCheckCacheProvider), arg0, arg1)
}

// CheckFlag mocks base method.
func (m *MockClient) CheckFlag(arg0 context.Context, arg1 *schematic.CheckFlagRequestBody, arg2 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckFlag", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckFlag indicates an expected call of CheckFlag.
func (mr *MockClientMockRecorder) CheckFlag(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckFlag", reflect.TypeOf((*MockClient)(nil).CheckFlag), arg0, arg1, arg2)
}

// Close mocks base method.
func (m *MockClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// Identify mocks base method.
func (m *MockClient) Identify(arg0 context.Context, arg1 *schematic.EventBodyIdentify) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Identify", arg0, arg1)
}

// Identify indicates an expected call of Identify.
func (mr *MockClientMockRecorder) Identify(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Identify", reflect.TypeOf((*MockClient)(nil).Identify), arg0, arg1)
}

// SetAPIClient mocks base method.
func (m *MockClient) SetAPIClient(arg0 *api.APIClient) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAPIClient", arg0)
}

// SetAPIClient indicates an expected call of SetAPIClient.
func (mr *MockClientMockRecorder) SetAPIClient(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAPIClient", reflect.TypeOf((*MockClient)(nil).SetAPIClient), arg0)
}

// SetAPIHost mocks base method.
func (m *MockClient) SetAPIHost(arg0 context.Context, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAPIHost", arg0, arg1)
}

// SetAPIHost indicates an expected call of SetAPIHost.
func (mr *MockClientMockRecorder) SetAPIHost(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAPIHost", reflect.TypeOf((*MockClient)(nil).SetAPIHost), arg0, arg1)
}

// SetEventBufferPeriod mocks base method.
func (m *MockClient) SetEventBufferPeriod(period time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEventBufferPeriod", period)
}

// SetEventBufferPeriod indicates an expected call of SetEventBufferPeriod.
func (mr *MockClientMockRecorder) SetEventBufferPeriod(period any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEventBufferPeriod", reflect.TypeOf((*MockClient)(nil).SetEventBufferPeriod), period)
}

// SetFlagDefault mocks base method.
func (m *MockClient) SetFlagDefault(arg0 string, arg1 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFlagDefault", arg0, arg1)
}

// SetFlagDefault indicates an expected call of SetFlagDefault.
func (mr *MockClientMockRecorder) SetFlagDefault(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFlagDefault", reflect.TypeOf((*MockClient)(nil).SetFlagDefault), arg0, arg1)
}

// SetFlagDefaults mocks base method.
func (m *MockClient) SetFlagDefaults(arg0 map[string]bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFlagDefaults", arg0)
}

// SetFlagDefaults indicates an expected call of SetFlagDefaults.
func (mr *MockClientMockRecorder) SetFlagDefaults(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFlagDefaults", reflect.TypeOf((*MockClient)(nil).SetFlagDefaults), arg0)
}

// Track mocks base method.
func (m *MockClient) Track(arg0 context.Context, arg1 *schematic.EventBodyTrack) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Track", arg0, arg1)
}

// Track indicates an expected call of Track.
func (mr *MockClientMockRecorder) Track(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Track", reflect.TypeOf((*MockClient)(nil).Track), arg0, arg1)
}
