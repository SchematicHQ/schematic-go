/*
Schematic API

Schematic API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schematic

import (
	"encoding/json"
)

// checks if the CountFlagChecksParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CountFlagChecksParams{}

// CountFlagChecksParams Input parameters
type CountFlagChecksParams struct {
	FlagId *string `json:"flag_id,omitempty"`
	FlagIds []string `json:"flag_ids,omitempty"`
	Id *string `json:"id,omitempty"`
	Limit *int32 `json:"limit,omitempty"`
	Offset *int32 `json:"offset,omitempty"`
}

// NewCountFlagChecksParams instantiates a new CountFlagChecksParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountFlagChecksParams() *CountFlagChecksParams {
	this := CountFlagChecksParams{}
	return &this
}

// NewCountFlagChecksParamsWithDefaults instantiates a new CountFlagChecksParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountFlagChecksParamsWithDefaults() *CountFlagChecksParams {
	this := CountFlagChecksParams{}
	return &this
}

// GetFlagId returns the FlagId field value if set, zero value otherwise.
func (o *CountFlagChecksParams) GetFlagId() string {
	if o == nil || IsNil(o.FlagId) {
		var ret string
		return ret
	}
	return *o.FlagId
}

// GetFlagIdOk returns a tuple with the FlagId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountFlagChecksParams) GetFlagIdOk() (*string, bool) {
	if o == nil || IsNil(o.FlagId) {
		return nil, false
	}
	return o.FlagId, true
}

// HasFlagId returns a boolean if a field has been set.
func (o *CountFlagChecksParams) HasFlagId() bool {
	if o != nil && !IsNil(o.FlagId) {
		return true
	}

	return false
}

// SetFlagId gets a reference to the given string and assigns it to the FlagId field.
func (o *CountFlagChecksParams) SetFlagId(v string) {
	o.FlagId = &v
}

// GetFlagIds returns the FlagIds field value if set, zero value otherwise.
func (o *CountFlagChecksParams) GetFlagIds() []string {
	if o == nil || IsNil(o.FlagIds) {
		var ret []string
		return ret
	}
	return o.FlagIds
}

// GetFlagIdsOk returns a tuple with the FlagIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountFlagChecksParams) GetFlagIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.FlagIds) {
		return nil, false
	}
	return o.FlagIds, true
}

// HasFlagIds returns a boolean if a field has been set.
func (o *CountFlagChecksParams) HasFlagIds() bool {
	if o != nil && !IsNil(o.FlagIds) {
		return true
	}

	return false
}

// SetFlagIds gets a reference to the given []string and assigns it to the FlagIds field.
func (o *CountFlagChecksParams) SetFlagIds(v []string) {
	o.FlagIds = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CountFlagChecksParams) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountFlagChecksParams) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CountFlagChecksParams) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CountFlagChecksParams) SetId(v string) {
	o.Id = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *CountFlagChecksParams) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountFlagChecksParams) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *CountFlagChecksParams) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *CountFlagChecksParams) SetLimit(v int32) {
	o.Limit = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *CountFlagChecksParams) GetOffset() int32 {
	if o == nil || IsNil(o.Offset) {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountFlagChecksParams) GetOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *CountFlagChecksParams) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *CountFlagChecksParams) SetOffset(v int32) {
	o.Offset = &v
}

func (o CountFlagChecksParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CountFlagChecksParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FlagId) {
		toSerialize["flag_id"] = o.FlagId
	}
	if !IsNil(o.FlagIds) {
		toSerialize["flag_ids"] = o.FlagIds
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	return toSerialize, nil
}

type NullableCountFlagChecksParams struct {
	value *CountFlagChecksParams
	isSet bool
}

func (v NullableCountFlagChecksParams) Get() *CountFlagChecksParams {
	return v.value
}

func (v *NullableCountFlagChecksParams) Set(val *CountFlagChecksParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCountFlagChecksParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCountFlagChecksParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountFlagChecksParams(val *CountFlagChecksParams) *NullableCountFlagChecksParams {
	return &NullableCountFlagChecksParams{value: val, isSet: true}
}

func (v NullableCountFlagChecksParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountFlagChecksParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


