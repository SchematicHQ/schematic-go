/*
Schematic API

Schematic API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schematic

import (
	"encoding/json"
)

// checks if the ListEventsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListEventsResponse{}

// ListEventsResponse struct for ListEventsResponse
type ListEventsResponse struct {
	// The returned resources
	Data []EventResponseData `json:"data"`
	Params ListEventsParams `json:"params"`
}

// NewListEventsResponse instantiates a new ListEventsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListEventsResponse(data []EventResponseData, params ListEventsParams) *ListEventsResponse {
	this := ListEventsResponse{}
	this.Data = data
	this.Params = params
	return &this
}

// NewListEventsResponseWithDefaults instantiates a new ListEventsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListEventsResponseWithDefaults() *ListEventsResponse {
	this := ListEventsResponse{}
	return &this
}

// GetData returns the Data field value
func (o *ListEventsResponse) GetData() []EventResponseData {
	if o == nil {
		var ret []EventResponseData
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ListEventsResponse) GetDataOk() ([]EventResponseData, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *ListEventsResponse) SetData(v []EventResponseData) {
	o.Data = v
}

// GetParams returns the Params field value
func (o *ListEventsResponse) GetParams() ListEventsParams {
	if o == nil {
		var ret ListEventsParams
		return ret
	}

	return o.Params
}

// GetParamsOk returns a tuple with the Params field value
// and a boolean to check if the value has been set.
func (o *ListEventsResponse) GetParamsOk() (*ListEventsParams, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Params, true
}

// SetParams sets field value
func (o *ListEventsResponse) SetParams(v ListEventsParams) {
	o.Params = v
}

func (o ListEventsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListEventsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["params"] = o.Params
	return toSerialize, nil
}

type NullableListEventsResponse struct {
	value *ListEventsResponse
	isSet bool
}

func (v NullableListEventsResponse) Get() *ListEventsResponse {
	return v.value
}

func (v *NullableListEventsResponse) Set(val *ListEventsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListEventsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListEventsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListEventsResponse(val *ListEventsResponse) *NullableListEventsResponse {
	return &NullableListEventsResponse{value: val, isSet: true}
}

func (v NullableListEventsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListEventsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


