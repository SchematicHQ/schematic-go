/*
Schematic API

Schematic API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schematic

import (
	"encoding/json"
	"time"
)

// checks if the RuleResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RuleResponseData{}

// RuleResponseData struct for RuleResponseData
type RuleResponseData struct {
	CreatedAt time.Time `json:"created_at"`
	EnvironmentId string `json:"environment_id"`
	FlagId NullableString `json:"flag_id,omitempty"`
	Id string `json:"id"`
	Name string `json:"name"`
	PlanId NullableString `json:"plan_id,omitempty"`
	Priority int32 `json:"priority"`
	PriorityGroup NullableInt32 `json:"priority_group,omitempty"`
	UpdatedAt time.Time `json:"updated_at"`
	Value bool `json:"value"`
}

// NewRuleResponseData instantiates a new RuleResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleResponseData(createdAt time.Time, environmentId string, id string, name string, priority int32, updatedAt time.Time, value bool) *RuleResponseData {
	this := RuleResponseData{}
	this.CreatedAt = createdAt
	this.EnvironmentId = environmentId
	this.Id = id
	this.Name = name
	this.Priority = priority
	this.UpdatedAt = updatedAt
	this.Value = value
	return &this
}

// NewRuleResponseDataWithDefaults instantiates a new RuleResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleResponseDataWithDefaults() *RuleResponseData {
	this := RuleResponseData{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *RuleResponseData) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *RuleResponseData) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *RuleResponseData) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetEnvironmentId returns the EnvironmentId field value
func (o *RuleResponseData) GetEnvironmentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnvironmentId
}

// GetEnvironmentIdOk returns a tuple with the EnvironmentId field value
// and a boolean to check if the value has been set.
func (o *RuleResponseData) GetEnvironmentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnvironmentId, true
}

// SetEnvironmentId sets field value
func (o *RuleResponseData) SetEnvironmentId(v string) {
	o.EnvironmentId = v
}

// GetFlagId returns the FlagId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RuleResponseData) GetFlagId() string {
	if o == nil || IsNil(o.FlagId.Get()) {
		var ret string
		return ret
	}
	return *o.FlagId.Get()
}

// GetFlagIdOk returns a tuple with the FlagId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RuleResponseData) GetFlagIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FlagId.Get(), o.FlagId.IsSet()
}

// HasFlagId returns a boolean if a field has been set.
func (o *RuleResponseData) HasFlagId() bool {
	if o != nil && o.FlagId.IsSet() {
		return true
	}

	return false
}

// SetFlagId gets a reference to the given NullableString and assigns it to the FlagId field.
func (o *RuleResponseData) SetFlagId(v string) {
	o.FlagId.Set(&v)
}
// SetFlagIdNil sets the value for FlagId to be an explicit nil
func (o *RuleResponseData) SetFlagIdNil() {
	o.FlagId.Set(nil)
}

// UnsetFlagId ensures that no value is present for FlagId, not even an explicit nil
func (o *RuleResponseData) UnsetFlagId() {
	o.FlagId.Unset()
}

// GetId returns the Id field value
func (o *RuleResponseData) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RuleResponseData) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RuleResponseData) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *RuleResponseData) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RuleResponseData) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RuleResponseData) SetName(v string) {
	o.Name = v
}

// GetPlanId returns the PlanId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RuleResponseData) GetPlanId() string {
	if o == nil || IsNil(o.PlanId.Get()) {
		var ret string
		return ret
	}
	return *o.PlanId.Get()
}

// GetPlanIdOk returns a tuple with the PlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RuleResponseData) GetPlanIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlanId.Get(), o.PlanId.IsSet()
}

// HasPlanId returns a boolean if a field has been set.
func (o *RuleResponseData) HasPlanId() bool {
	if o != nil && o.PlanId.IsSet() {
		return true
	}

	return false
}

// SetPlanId gets a reference to the given NullableString and assigns it to the PlanId field.
func (o *RuleResponseData) SetPlanId(v string) {
	o.PlanId.Set(&v)
}
// SetPlanIdNil sets the value for PlanId to be an explicit nil
func (o *RuleResponseData) SetPlanIdNil() {
	o.PlanId.Set(nil)
}

// UnsetPlanId ensures that no value is present for PlanId, not even an explicit nil
func (o *RuleResponseData) UnsetPlanId() {
	o.PlanId.Unset()
}

// GetPriority returns the Priority field value
func (o *RuleResponseData) GetPriority() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value
// and a boolean to check if the value has been set.
func (o *RuleResponseData) GetPriorityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Priority, true
}

// SetPriority sets field value
func (o *RuleResponseData) SetPriority(v int32) {
	o.Priority = v
}

// GetPriorityGroup returns the PriorityGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RuleResponseData) GetPriorityGroup() int32 {
	if o == nil || IsNil(o.PriorityGroup.Get()) {
		var ret int32
		return ret
	}
	return *o.PriorityGroup.Get()
}

// GetPriorityGroupOk returns a tuple with the PriorityGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RuleResponseData) GetPriorityGroupOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PriorityGroup.Get(), o.PriorityGroup.IsSet()
}

// HasPriorityGroup returns a boolean if a field has been set.
func (o *RuleResponseData) HasPriorityGroup() bool {
	if o != nil && o.PriorityGroup.IsSet() {
		return true
	}

	return false
}

// SetPriorityGroup gets a reference to the given NullableInt32 and assigns it to the PriorityGroup field.
func (o *RuleResponseData) SetPriorityGroup(v int32) {
	o.PriorityGroup.Set(&v)
}
// SetPriorityGroupNil sets the value for PriorityGroup to be an explicit nil
func (o *RuleResponseData) SetPriorityGroupNil() {
	o.PriorityGroup.Set(nil)
}

// UnsetPriorityGroup ensures that no value is present for PriorityGroup, not even an explicit nil
func (o *RuleResponseData) UnsetPriorityGroup() {
	o.PriorityGroup.Unset()
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *RuleResponseData) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *RuleResponseData) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *RuleResponseData) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetValue returns the Value field value
func (o *RuleResponseData) GetValue() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *RuleResponseData) GetValueOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *RuleResponseData) SetValue(v bool) {
	o.Value = v
}

func (o RuleResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RuleResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["environment_id"] = o.EnvironmentId
	if o.FlagId.IsSet() {
		toSerialize["flag_id"] = o.FlagId.Get()
	}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if o.PlanId.IsSet() {
		toSerialize["plan_id"] = o.PlanId.Get()
	}
	toSerialize["priority"] = o.Priority
	if o.PriorityGroup.IsSet() {
		toSerialize["priority_group"] = o.PriorityGroup.Get()
	}
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

type NullableRuleResponseData struct {
	value *RuleResponseData
	isSet bool
}

func (v NullableRuleResponseData) Get() *RuleResponseData {
	return v.value
}

func (v *NullableRuleResponseData) Set(val *RuleResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleResponseData(val *RuleResponseData) *NullableRuleResponseData {
	return &NullableRuleResponseData{value: val, isSet: true}
}

func (v NullableRuleResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


