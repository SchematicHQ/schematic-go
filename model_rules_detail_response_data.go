/*
Schematic API

Schematic API

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schematic

import (
	"encoding/json"
)

// checks if the RulesDetailResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RulesDetailResponseData{}

// RulesDetailResponseData The updated resource
type RulesDetailResponseData struct {
	Rules []RuleDetailResponseData `json:"rules"`
}

// NewRulesDetailResponseData instantiates a new RulesDetailResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRulesDetailResponseData(rules []RuleDetailResponseData) *RulesDetailResponseData {
	this := RulesDetailResponseData{}
	this.Rules = rules
	return &this
}

// NewRulesDetailResponseDataWithDefaults instantiates a new RulesDetailResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRulesDetailResponseDataWithDefaults() *RulesDetailResponseData {
	this := RulesDetailResponseData{}
	return &this
}

// GetRules returns the Rules field value
func (o *RulesDetailResponseData) GetRules() []RuleDetailResponseData {
	if o == nil {
		var ret []RuleDetailResponseData
		return ret
	}

	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value
// and a boolean to check if the value has been set.
func (o *RulesDetailResponseData) GetRulesOk() ([]RuleDetailResponseData, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rules, true
}

// SetRules sets field value
func (o *RulesDetailResponseData) SetRules(v []RuleDetailResponseData) {
	o.Rules = v
}

func (o RulesDetailResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RulesDetailResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["rules"] = o.Rules
	return toSerialize, nil
}

type NullableRulesDetailResponseData struct {
	value *RulesDetailResponseData
	isSet bool
}

func (v NullableRulesDetailResponseData) Get() *RulesDetailResponseData {
	return v.value
}

func (v *NullableRulesDetailResponseData) Set(val *RulesDetailResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableRulesDetailResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableRulesDetailResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRulesDetailResponseData(val *RulesDetailResponseData) *NullableRulesDetailResponseData {
	return &NullableRulesDetailResponseData{value: val, isSet: true}
}

func (v NullableRulesDetailResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRulesDetailResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


