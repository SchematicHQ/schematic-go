// This file was auto-generated by Fern from our API Definition.

package schematichq

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/schematichq/schematic-go/internal"
	time "time"
)

type CreatePlanGroupRequestBody struct {
	AddOnCompatibilities []*CompatiblePlans `json:"add_on_compatibilities,omitempty" url:"-"`
	// Use OrderedAddOns instead
	AddOnIDs                         []string                `json:"add_on_ids,omitempty" url:"-"`
	CheckoutCollectAddress           bool                    `json:"checkout_collect_address" url:"-"`
	CheckoutCollectEmail             bool                    `json:"checkout_collect_email" url:"-"`
	CheckoutCollectPhone             bool                    `json:"checkout_collect_phone" url:"-"`
	CustomPlanConfig                 *CustomPlanConfig       `json:"custom_plan_config,omitempty" url:"-"`
	CustomPlanID                     *string                 `json:"custom_plan_id,omitempty" url:"-"`
	DefaultPlanID                    *string                 `json:"default_plan_id,omitempty" url:"-"`
	EnableTaxCollection              bool                    `json:"enable_tax_collection" url:"-"`
	FallbackPlanID                   *string                 `json:"fallback_plan_id,omitempty" url:"-"`
	InitialPlanID                    *string                 `json:"initial_plan_id,omitempty" url:"-"`
	InitialPlanPriceID               *string                 `json:"initial_plan_price_id,omitempty" url:"-"`
	OrderedAddOns                    []*OrderedPlansInGroup  `json:"ordered_add_ons,omitempty" url:"-"`
	OrderedBundleList                []*PlanGroupBundleOrder `json:"ordered_bundle_list,omitempty" url:"-"`
	OrderedPlans                     []*OrderedPlansInGroup  `json:"ordered_plans,omitempty" url:"-"`
	PreventDowngradesWhenOverLimit   bool                    `json:"prevent_downgrades_when_over_limit" url:"-"`
	ShowCredits                      bool                    `json:"show_credits" url:"-"`
	ShowPeriodToggle                 bool                    `json:"show_period_toggle" url:"-"`
	ShowZeroPriceAsFree              bool                    `json:"show_zero_price_as_free" url:"-"`
	SyncCustomerBillingDetailsForTax bool                    `json:"sync_customer_billing_details_for_tax" url:"-"`
	TrialDays                        *int                    `json:"trial_days,omitempty" url:"-"`
	TrialExpiryPlanID                *string                 `json:"trial_expiry_plan_id,omitempty" url:"-"`
	TrialExpiryPlanPriceID           *string                 `json:"trial_expiry_plan_price_id,omitempty" url:"-"`
	TrialPaymentMethodRequired       *bool                   `json:"trial_payment_method_required,omitempty" url:"-"`
}

type CheckoutSettingsResponseData struct {
	CollectAddress bool `json:"collect_address" url:"collect_address"`
	CollectEmail   bool `json:"collect_email" url:"collect_email"`
	CollectPhone   bool `json:"collect_phone" url:"collect_phone"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CheckoutSettingsResponseData) GetCollectAddress() bool {
	if c == nil {
		return false
	}
	return c.CollectAddress
}

func (c *CheckoutSettingsResponseData) GetCollectEmail() bool {
	if c == nil {
		return false
	}
	return c.CollectEmail
}

func (c *CheckoutSettingsResponseData) GetCollectPhone() bool {
	if c == nil {
		return false
	}
	return c.CollectPhone
}

func (c *CheckoutSettingsResponseData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CheckoutSettingsResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler CheckoutSettingsResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CheckoutSettingsResponseData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CheckoutSettingsResponseData) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CompatiblePlansResponseData struct {
	CompatiblePlanIDs []string `json:"compatible_plan_ids,omitempty" url:"compatible_plan_ids,omitempty"`
	SourcePlanID      string   `json:"source_plan_id" url:"source_plan_id"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CompatiblePlansResponseData) GetCompatiblePlanIDs() []string {
	if c == nil {
		return nil
	}
	return c.CompatiblePlanIDs
}

func (c *CompatiblePlansResponseData) GetSourcePlanID() string {
	if c == nil {
		return ""
	}
	return c.SourcePlanID
}

func (c *CompatiblePlansResponseData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CompatiblePlansResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler CompatiblePlansResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CompatiblePlansResponseData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CompatiblePlansResponseData) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CustomPlanViewConfigResponseData struct {
	CtaText    string `json:"cta_text" url:"cta_text"`
	CtaWebSite string `json:"cta_web_site" url:"cta_web_site"`
	PriceText  string `json:"price_text" url:"price_text"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CustomPlanViewConfigResponseData) GetCtaText() string {
	if c == nil {
		return ""
	}
	return c.CtaText
}

func (c *CustomPlanViewConfigResponseData) GetCtaWebSite() string {
	if c == nil {
		return ""
	}
	return c.CtaWebSite
}

func (c *CustomPlanViewConfigResponseData) GetPriceText() string {
	if c == nil {
		return ""
	}
	return c.PriceText
}

func (c *CustomPlanViewConfigResponseData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CustomPlanViewConfigResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler CustomPlanViewConfigResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CustomPlanViewConfigResponseData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CustomPlanViewConfigResponseData) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type EntitlementsInPlan struct {
	EntitlementID string `json:"entitlement_id" url:"entitlement_id"`
	Visible       *bool  `json:"visible,omitempty" url:"visible,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EntitlementsInPlan) GetEntitlementID() string {
	if e == nil {
		return ""
	}
	return e.EntitlementID
}

func (e *EntitlementsInPlan) GetVisible() *bool {
	if e == nil {
		return nil
	}
	return e.Visible
}

func (e *EntitlementsInPlan) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntitlementsInPlan) UnmarshalJSON(data []byte) error {
	type unmarshaler EntitlementsInPlan
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntitlementsInPlan(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntitlementsInPlan) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type OrderedPlansInGroup struct {
	Entitlements []*EntitlementsInPlan `json:"entitlements,omitempty" url:"entitlements,omitempty"`
	PlanID       string                `json:"plan_id" url:"plan_id"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OrderedPlansInGroup) GetEntitlements() []*EntitlementsInPlan {
	if o == nil {
		return nil
	}
	return o.Entitlements
}

func (o *OrderedPlansInGroup) GetPlanID() string {
	if o == nil {
		return ""
	}
	return o.PlanID
}

func (o *OrderedPlansInGroup) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OrderedPlansInGroup) UnmarshalJSON(data []byte) error {
	type unmarshaler OrderedPlansInGroup
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OrderedPlansInGroup(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OrderedPlansInGroup) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type PlanEntitlementsOrder struct {
	PlanEntitlementID string `json:"plan_entitlement_id" url:"plan_entitlement_id"`
	Visible           *bool  `json:"visible,omitempty" url:"visible,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PlanEntitlementsOrder) GetPlanEntitlementID() string {
	if p == nil {
		return ""
	}
	return p.PlanEntitlementID
}

func (p *PlanEntitlementsOrder) GetVisible() *bool {
	if p == nil {
		return nil
	}
	return p.Visible
}

func (p *PlanEntitlementsOrder) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PlanEntitlementsOrder) UnmarshalJSON(data []byte) error {
	type unmarshaler PlanEntitlementsOrder
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PlanEntitlementsOrder(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PlanEntitlementsOrder) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PlanGroupBundleOrder struct {
	BundleID string `json:"bundleId" url:"bundleId"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PlanGroupBundleOrder) GetBundleID() string {
	if p == nil {
		return ""
	}
	return p.BundleID
}

func (p *PlanGroupBundleOrder) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PlanGroupBundleOrder) UnmarshalJSON(data []byte) error {
	type unmarshaler PlanGroupBundleOrder
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PlanGroupBundleOrder(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PlanGroupBundleOrder) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PlanGroupDetailResponseData struct {
	AddOns                           []*PlanGroupPlanDetailResponseData `json:"add_ons,omitempty" url:"add_ons,omitempty"`
	CheckoutSettings                 *CheckoutSettingsResponseData      `json:"checkout_settings,omitempty" url:"checkout_settings,omitempty"`
	CustomPlanConfig                 *CustomPlanViewConfigResponseData  `json:"custom_plan_config,omitempty" url:"custom_plan_config,omitempty"`
	CustomPlanID                     *string                            `json:"custom_plan_id,omitempty" url:"custom_plan_id,omitempty"`
	DefaultPlan                      *PlanGroupPlanDetailResponseData   `json:"default_plan,omitempty" url:"default_plan,omitempty"`
	DefaultPlanID                    *string                            `json:"default_plan_id,omitempty" url:"default_plan_id,omitempty"`
	FallbackPlan                     *PlanGroupPlanDetailResponseData   `json:"fallback_plan,omitempty" url:"fallback_plan,omitempty"`
	FallbackPlanID                   *string                            `json:"fallback_plan_id,omitempty" url:"fallback_plan_id,omitempty"`
	ID                               string                             `json:"id" url:"id"`
	InitialPlan                      *PlanGroupPlanDetailResponseData   `json:"initial_plan,omitempty" url:"initial_plan,omitempty"`
	InitialPlanID                    *string                            `json:"initial_plan_id,omitempty" url:"initial_plan_id,omitempty"`
	InitialPlanPrice                 *BillingPriceResponseData          `json:"initial_plan_price,omitempty" url:"initial_plan_price,omitempty"`
	InitialPlanPriceID               *string                            `json:"initial_plan_price_id,omitempty" url:"initial_plan_price_id,omitempty"`
	OrderedAddOnList                 []*PlanGroupPlanEntitlementsOrder  `json:"ordered_add_on_list,omitempty" url:"ordered_add_on_list,omitempty"`
	OrderedBundleList                []*PlanGroupBundleOrder            `json:"ordered_bundle_list,omitempty" url:"ordered_bundle_list,omitempty"`
	OrderedPlanList                  []*PlanGroupPlanEntitlementsOrder  `json:"ordered_plan_list,omitempty" url:"ordered_plan_list,omitempty"`
	Plans                            []*PlanGroupPlanDetailResponseData `json:"plans,omitempty" url:"plans,omitempty"`
	PreventDowngradesWhenOverLimit   bool                               `json:"prevent_downgrades_when_over_limit" url:"prevent_downgrades_when_over_limit"`
	ShowCredits                      bool                               `json:"show_credits" url:"show_credits"`
	ShowPeriodToggle                 bool                               `json:"show_period_toggle" url:"show_period_toggle"`
	ShowZeroPriceAsFree              bool                               `json:"show_zero_price_as_free" url:"show_zero_price_as_free"`
	SyncCustomerBillingDetailsForTax bool                               `json:"sync_customer_billing_details_for_tax" url:"sync_customer_billing_details_for_tax"`
	TaxCollectionEnabled             bool                               `json:"tax_collection_enabled" url:"tax_collection_enabled"`
	TrialDays                        *int                               `json:"trial_days,omitempty" url:"trial_days,omitempty"`
	TrialExpiryPlan                  *PlanGroupPlanDetailResponseData   `json:"trial_expiry_plan,omitempty" url:"trial_expiry_plan,omitempty"`
	TrialExpiryPlanID                *string                            `json:"trial_expiry_plan_id,omitempty" url:"trial_expiry_plan_id,omitempty"`
	TrialExpiryPlanPrice             *BillingPriceResponseData          `json:"trial_expiry_plan_price,omitempty" url:"trial_expiry_plan_price,omitempty"`
	TrialExpiryPlanPriceID           *string                            `json:"trial_expiry_plan_price_id,omitempty" url:"trial_expiry_plan_price_id,omitempty"`
	TrialPaymentMethodRequired       *bool                              `json:"trial_payment_method_required,omitempty" url:"trial_payment_method_required,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PlanGroupDetailResponseData) GetAddOns() []*PlanGroupPlanDetailResponseData {
	if p == nil {
		return nil
	}
	return p.AddOns
}

func (p *PlanGroupDetailResponseData) GetCheckoutSettings() *CheckoutSettingsResponseData {
	if p == nil {
		return nil
	}
	return p.CheckoutSettings
}

func (p *PlanGroupDetailResponseData) GetCustomPlanConfig() *CustomPlanViewConfigResponseData {
	if p == nil {
		return nil
	}
	return p.CustomPlanConfig
}

func (p *PlanGroupDetailResponseData) GetCustomPlanID() *string {
	if p == nil {
		return nil
	}
	return p.CustomPlanID
}

func (p *PlanGroupDetailResponseData) GetDefaultPlan() *PlanGroupPlanDetailResponseData {
	if p == nil {
		return nil
	}
	return p.DefaultPlan
}

func (p *PlanGroupDetailResponseData) GetDefaultPlanID() *string {
	if p == nil {
		return nil
	}
	return p.DefaultPlanID
}

func (p *PlanGroupDetailResponseData) GetFallbackPlan() *PlanGroupPlanDetailResponseData {
	if p == nil {
		return nil
	}
	return p.FallbackPlan
}

func (p *PlanGroupDetailResponseData) GetFallbackPlanID() *string {
	if p == nil {
		return nil
	}
	return p.FallbackPlanID
}

func (p *PlanGroupDetailResponseData) GetID() string {
	if p == nil {
		return ""
	}
	return p.ID
}

func (p *PlanGroupDetailResponseData) GetInitialPlan() *PlanGroupPlanDetailResponseData {
	if p == nil {
		return nil
	}
	return p.InitialPlan
}

func (p *PlanGroupDetailResponseData) GetInitialPlanID() *string {
	if p == nil {
		return nil
	}
	return p.InitialPlanID
}

func (p *PlanGroupDetailResponseData) GetInitialPlanPrice() *BillingPriceResponseData {
	if p == nil {
		return nil
	}
	return p.InitialPlanPrice
}

func (p *PlanGroupDetailResponseData) GetInitialPlanPriceID() *string {
	if p == nil {
		return nil
	}
	return p.InitialPlanPriceID
}

func (p *PlanGroupDetailResponseData) GetOrderedAddOnList() []*PlanGroupPlanEntitlementsOrder {
	if p == nil {
		return nil
	}
	return p.OrderedAddOnList
}

func (p *PlanGroupDetailResponseData) GetOrderedBundleList() []*PlanGroupBundleOrder {
	if p == nil {
		return nil
	}
	return p.OrderedBundleList
}

func (p *PlanGroupDetailResponseData) GetOrderedPlanList() []*PlanGroupPlanEntitlementsOrder {
	if p == nil {
		return nil
	}
	return p.OrderedPlanList
}

func (p *PlanGroupDetailResponseData) GetPlans() []*PlanGroupPlanDetailResponseData {
	if p == nil {
		return nil
	}
	return p.Plans
}

func (p *PlanGroupDetailResponseData) GetPreventDowngradesWhenOverLimit() bool {
	if p == nil {
		return false
	}
	return p.PreventDowngradesWhenOverLimit
}

func (p *PlanGroupDetailResponseData) GetShowCredits() bool {
	if p == nil {
		return false
	}
	return p.ShowCredits
}

func (p *PlanGroupDetailResponseData) GetShowPeriodToggle() bool {
	if p == nil {
		return false
	}
	return p.ShowPeriodToggle
}

func (p *PlanGroupDetailResponseData) GetShowZeroPriceAsFree() bool {
	if p == nil {
		return false
	}
	return p.ShowZeroPriceAsFree
}

func (p *PlanGroupDetailResponseData) GetSyncCustomerBillingDetailsForTax() bool {
	if p == nil {
		return false
	}
	return p.SyncCustomerBillingDetailsForTax
}

func (p *PlanGroupDetailResponseData) GetTaxCollectionEnabled() bool {
	if p == nil {
		return false
	}
	return p.TaxCollectionEnabled
}

func (p *PlanGroupDetailResponseData) GetTrialDays() *int {
	if p == nil {
		return nil
	}
	return p.TrialDays
}

func (p *PlanGroupDetailResponseData) GetTrialExpiryPlan() *PlanGroupPlanDetailResponseData {
	if p == nil {
		return nil
	}
	return p.TrialExpiryPlan
}

func (p *PlanGroupDetailResponseData) GetTrialExpiryPlanID() *string {
	if p == nil {
		return nil
	}
	return p.TrialExpiryPlanID
}

func (p *PlanGroupDetailResponseData) GetTrialExpiryPlanPrice() *BillingPriceResponseData {
	if p == nil {
		return nil
	}
	return p.TrialExpiryPlanPrice
}

func (p *PlanGroupDetailResponseData) GetTrialExpiryPlanPriceID() *string {
	if p == nil {
		return nil
	}
	return p.TrialExpiryPlanPriceID
}

func (p *PlanGroupDetailResponseData) GetTrialPaymentMethodRequired() *bool {
	if p == nil {
		return nil
	}
	return p.TrialPaymentMethodRequired
}

func (p *PlanGroupDetailResponseData) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PlanGroupDetailResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler PlanGroupDetailResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PlanGroupDetailResponseData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PlanGroupDetailResponseData) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PlanGroupPlanDetailResponseData struct {
	AudienceType         *string                               `json:"audience_type,omitempty" url:"audience_type,omitempty"`
	BillingProduct       *BillingProductDetailResponseData     `json:"billing_product,omitempty" url:"billing_product,omitempty"`
	ChargeType           string                                `json:"charge_type" url:"charge_type"`
	CompanyCount         int                                   `json:"company_count" url:"company_count"`
	CompatiblePlanIDs    []string                              `json:"compatible_plan_ids,omitempty" url:"compatible_plan_ids,omitempty"`
	ControlledBy         string                                `json:"controlled_by" url:"controlled_by"`
	CreatedAt            time.Time                             `json:"created_at" url:"created_at"`
	CustomPlanConfig     *CustomPlanViewConfigResponseData     `json:"custom_plan_config,omitempty" url:"custom_plan_config,omitempty"`
	Description          string                                `json:"description" url:"description"`
	Entitlements         []*PlanEntitlementResponseData        `json:"entitlements,omitempty" url:"entitlements,omitempty"`
	Features             []*FeatureDetailResponseData          `json:"features,omitempty" url:"features,omitempty"`
	Icon                 string                                `json:"icon" url:"icon"`
	ID                   string                                `json:"id" url:"id"`
	IncludedCreditGrants []*BillingPlanCreditGrantResponseData `json:"included_credit_grants,omitempty" url:"included_credit_grants,omitempty"`
	IsCustom             bool                                  `json:"is_custom" url:"is_custom"`
	IsDefault            bool                                  `json:"is_default" url:"is_default"`
	IsFree               bool                                  `json:"is_free" url:"is_free"`
	IsTrialable          bool                                  `json:"is_trialable" url:"is_trialable"`
	MonthlyPrice         *BillingPriceResponseData             `json:"monthly_price,omitempty" url:"monthly_price,omitempty"`
	Name                 string                                `json:"name" url:"name"`
	OneTimePrice         *BillingPriceResponseData             `json:"one_time_price,omitempty" url:"one_time_price,omitempty"`
	PlanType             string                                `json:"plan_type" url:"plan_type"`
	TrialDays            *int                                  `json:"trial_days,omitempty" url:"trial_days,omitempty"`
	UpdatedAt            time.Time                             `json:"updated_at" url:"updated_at"`
	YearlyPrice          *BillingPriceResponseData             `json:"yearly_price,omitempty" url:"yearly_price,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PlanGroupPlanDetailResponseData) GetAudienceType() *string {
	if p == nil {
		return nil
	}
	return p.AudienceType
}

func (p *PlanGroupPlanDetailResponseData) GetBillingProduct() *BillingProductDetailResponseData {
	if p == nil {
		return nil
	}
	return p.BillingProduct
}

func (p *PlanGroupPlanDetailResponseData) GetChargeType() string {
	if p == nil {
		return ""
	}
	return p.ChargeType
}

func (p *PlanGroupPlanDetailResponseData) GetCompanyCount() int {
	if p == nil {
		return 0
	}
	return p.CompanyCount
}

func (p *PlanGroupPlanDetailResponseData) GetCompatiblePlanIDs() []string {
	if p == nil {
		return nil
	}
	return p.CompatiblePlanIDs
}

func (p *PlanGroupPlanDetailResponseData) GetControlledBy() string {
	if p == nil {
		return ""
	}
	return p.ControlledBy
}

func (p *PlanGroupPlanDetailResponseData) GetCreatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.CreatedAt
}

func (p *PlanGroupPlanDetailResponseData) GetCustomPlanConfig() *CustomPlanViewConfigResponseData {
	if p == nil {
		return nil
	}
	return p.CustomPlanConfig
}

func (p *PlanGroupPlanDetailResponseData) GetDescription() string {
	if p == nil {
		return ""
	}
	return p.Description
}

func (p *PlanGroupPlanDetailResponseData) GetEntitlements() []*PlanEntitlementResponseData {
	if p == nil {
		return nil
	}
	return p.Entitlements
}

func (p *PlanGroupPlanDetailResponseData) GetFeatures() []*FeatureDetailResponseData {
	if p == nil {
		return nil
	}
	return p.Features
}

func (p *PlanGroupPlanDetailResponseData) GetIcon() string {
	if p == nil {
		return ""
	}
	return p.Icon
}

func (p *PlanGroupPlanDetailResponseData) GetID() string {
	if p == nil {
		return ""
	}
	return p.ID
}

func (p *PlanGroupPlanDetailResponseData) GetIncludedCreditGrants() []*BillingPlanCreditGrantResponseData {
	if p == nil {
		return nil
	}
	return p.IncludedCreditGrants
}

func (p *PlanGroupPlanDetailResponseData) GetIsCustom() bool {
	if p == nil {
		return false
	}
	return p.IsCustom
}

func (p *PlanGroupPlanDetailResponseData) GetIsDefault() bool {
	if p == nil {
		return false
	}
	return p.IsDefault
}

func (p *PlanGroupPlanDetailResponseData) GetIsFree() bool {
	if p == nil {
		return false
	}
	return p.IsFree
}

func (p *PlanGroupPlanDetailResponseData) GetIsTrialable() bool {
	if p == nil {
		return false
	}
	return p.IsTrialable
}

func (p *PlanGroupPlanDetailResponseData) GetMonthlyPrice() *BillingPriceResponseData {
	if p == nil {
		return nil
	}
	return p.MonthlyPrice
}

func (p *PlanGroupPlanDetailResponseData) GetName() string {
	if p == nil {
		return ""
	}
	return p.Name
}

func (p *PlanGroupPlanDetailResponseData) GetOneTimePrice() *BillingPriceResponseData {
	if p == nil {
		return nil
	}
	return p.OneTimePrice
}

func (p *PlanGroupPlanDetailResponseData) GetPlanType() string {
	if p == nil {
		return ""
	}
	return p.PlanType
}

func (p *PlanGroupPlanDetailResponseData) GetTrialDays() *int {
	if p == nil {
		return nil
	}
	return p.TrialDays
}

func (p *PlanGroupPlanDetailResponseData) GetUpdatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.UpdatedAt
}

func (p *PlanGroupPlanDetailResponseData) GetYearlyPrice() *BillingPriceResponseData {
	if p == nil {
		return nil
	}
	return p.YearlyPrice
}

func (p *PlanGroupPlanDetailResponseData) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PlanGroupPlanDetailResponseData) UnmarshalJSON(data []byte) error {
	type embed PlanGroupPlanDetailResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PlanGroupPlanDetailResponseData(unmarshaler.embed)
	p.CreatedAt = unmarshaler.CreatedAt.Time()
	p.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PlanGroupPlanDetailResponseData) MarshalJSON() ([]byte, error) {
	type embed PlanGroupPlanDetailResponseData
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*p),
		CreatedAt: internal.NewDateTime(p.CreatedAt),
		UpdatedAt: internal.NewDateTime(p.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (p *PlanGroupPlanDetailResponseData) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PlanGroupPlanEntitlementsOrder struct {
	Entitlements []*PlanEntitlementsOrder `json:"entitlements,omitempty" url:"entitlements,omitempty"`
	PlanID       string                   `json:"plan_id" url:"plan_id"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PlanGroupPlanEntitlementsOrder) GetEntitlements() []*PlanEntitlementsOrder {
	if p == nil {
		return nil
	}
	return p.Entitlements
}

func (p *PlanGroupPlanEntitlementsOrder) GetPlanID() string {
	if p == nil {
		return ""
	}
	return p.PlanID
}

func (p *PlanGroupPlanEntitlementsOrder) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PlanGroupPlanEntitlementsOrder) UnmarshalJSON(data []byte) error {
	type unmarshaler PlanGroupPlanEntitlementsOrder
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PlanGroupPlanEntitlementsOrder(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PlanGroupPlanEntitlementsOrder) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PlanGroupResponseData struct {
	AddOnCompatibilities             []*CompatiblePlansResponseData `json:"add_on_compatibilities,omitempty" url:"add_on_compatibilities,omitempty"`
	AddOnIDs                         []string                       `json:"add_on_ids,omitempty" url:"add_on_ids,omitempty"`
	CheckoutSettings                 *CheckoutSettingsResponseData  `json:"checkout_settings,omitempty" url:"checkout_settings,omitempty"`
	DefaultPlanID                    *string                        `json:"default_plan_id,omitempty" url:"default_plan_id,omitempty"`
	FallbackPlanID                   *string                        `json:"fallback_plan_id,omitempty" url:"fallback_plan_id,omitempty"`
	ID                               string                         `json:"id" url:"id"`
	InitialPlanID                    *string                        `json:"initial_plan_id,omitempty" url:"initial_plan_id,omitempty"`
	InitialPlanPriceID               *string                        `json:"initial_plan_price_id,omitempty" url:"initial_plan_price_id,omitempty"`
	OrderedAddOnIDs                  []*OrderedPlansInGroup         `json:"ordered_add_on_ids,omitempty" url:"ordered_add_on_ids,omitempty"`
	PlanIDs                          []*OrderedPlansInGroup         `json:"plan_ids,omitempty" url:"plan_ids,omitempty"`
	PreventDowngradesWhenOverLimit   bool                           `json:"prevent_downgrades_when_over_limit" url:"prevent_downgrades_when_over_limit"`
	ShowCredits                      bool                           `json:"show_credits" url:"show_credits"`
	ShowPeriodToggle                 bool                           `json:"show_period_toggle" url:"show_period_toggle"`
	ShowZeroPriceAsFree              bool                           `json:"show_zero_price_as_free" url:"show_zero_price_as_free"`
	SyncCustomerBillingDetailsForTax bool                           `json:"sync_customer_billing_details_for_tax" url:"sync_customer_billing_details_for_tax"`
	TaxCollectionEnabled             bool                           `json:"tax_collection_enabled" url:"tax_collection_enabled"`
	TrialDays                        *int                           `json:"trial_days,omitempty" url:"trial_days,omitempty"`
	TrialExpiryPlanID                *string                        `json:"trial_expiry_plan_id,omitempty" url:"trial_expiry_plan_id,omitempty"`
	TrialExpiryPlanPriceID           *string                        `json:"trial_expiry_plan_price_id,omitempty" url:"trial_expiry_plan_price_id,omitempty"`
	TrialPaymentMethodRequired       *bool                          `json:"trial_payment_method_required,omitempty" url:"trial_payment_method_required,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *PlanGroupResponseData) GetAddOnCompatibilities() []*CompatiblePlansResponseData {
	if p == nil {
		return nil
	}
	return p.AddOnCompatibilities
}

func (p *PlanGroupResponseData) GetAddOnIDs() []string {
	if p == nil {
		return nil
	}
	return p.AddOnIDs
}

func (p *PlanGroupResponseData) GetCheckoutSettings() *CheckoutSettingsResponseData {
	if p == nil {
		return nil
	}
	return p.CheckoutSettings
}

func (p *PlanGroupResponseData) GetDefaultPlanID() *string {
	if p == nil {
		return nil
	}
	return p.DefaultPlanID
}

func (p *PlanGroupResponseData) GetFallbackPlanID() *string {
	if p == nil {
		return nil
	}
	return p.FallbackPlanID
}

func (p *PlanGroupResponseData) GetID() string {
	if p == nil {
		return ""
	}
	return p.ID
}

func (p *PlanGroupResponseData) GetInitialPlanID() *string {
	if p == nil {
		return nil
	}
	return p.InitialPlanID
}

func (p *PlanGroupResponseData) GetInitialPlanPriceID() *string {
	if p == nil {
		return nil
	}
	return p.InitialPlanPriceID
}

func (p *PlanGroupResponseData) GetOrderedAddOnIDs() []*OrderedPlansInGroup {
	if p == nil {
		return nil
	}
	return p.OrderedAddOnIDs
}

func (p *PlanGroupResponseData) GetPlanIDs() []*OrderedPlansInGroup {
	if p == nil {
		return nil
	}
	return p.PlanIDs
}

func (p *PlanGroupResponseData) GetPreventDowngradesWhenOverLimit() bool {
	if p == nil {
		return false
	}
	return p.PreventDowngradesWhenOverLimit
}

func (p *PlanGroupResponseData) GetShowCredits() bool {
	if p == nil {
		return false
	}
	return p.ShowCredits
}

func (p *PlanGroupResponseData) GetShowPeriodToggle() bool {
	if p == nil {
		return false
	}
	return p.ShowPeriodToggle
}

func (p *PlanGroupResponseData) GetShowZeroPriceAsFree() bool {
	if p == nil {
		return false
	}
	return p.ShowZeroPriceAsFree
}

func (p *PlanGroupResponseData) GetSyncCustomerBillingDetailsForTax() bool {
	if p == nil {
		return false
	}
	return p.SyncCustomerBillingDetailsForTax
}

func (p *PlanGroupResponseData) GetTaxCollectionEnabled() bool {
	if p == nil {
		return false
	}
	return p.TaxCollectionEnabled
}

func (p *PlanGroupResponseData) GetTrialDays() *int {
	if p == nil {
		return nil
	}
	return p.TrialDays
}

func (p *PlanGroupResponseData) GetTrialExpiryPlanID() *string {
	if p == nil {
		return nil
	}
	return p.TrialExpiryPlanID
}

func (p *PlanGroupResponseData) GetTrialExpiryPlanPriceID() *string {
	if p == nil {
		return nil
	}
	return p.TrialExpiryPlanPriceID
}

func (p *PlanGroupResponseData) GetTrialPaymentMethodRequired() *bool {
	if p == nil {
		return nil
	}
	return p.TrialPaymentMethodRequired
}

func (p *PlanGroupResponseData) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PlanGroupResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler PlanGroupResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PlanGroupResponseData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *PlanGroupResponseData) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type CreatePlanGroupResponse struct {
	Data *PlanGroupResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreatePlanGroupResponse) GetData() *PlanGroupResponseData {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *CreatePlanGroupResponse) GetParams() map[string]interface{} {
	if c == nil {
		return nil
	}
	return c.Params
}

func (c *CreatePlanGroupResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreatePlanGroupResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreatePlanGroupResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreatePlanGroupResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreatePlanGroupResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type GetPlanGroupResponse struct {
	Data *PlanGroupDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetPlanGroupResponse) GetData() *PlanGroupDetailResponseData {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GetPlanGroupResponse) GetParams() map[string]interface{} {
	if g == nil {
		return nil
	}
	return g.Params
}

func (g *GetPlanGroupResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetPlanGroupResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetPlanGroupResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetPlanGroupResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetPlanGroupResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type UpdatePlanGroupResponse struct {
	Data *PlanGroupResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdatePlanGroupResponse) GetData() *PlanGroupResponseData {
	if u == nil {
		return nil
	}
	return u.Data
}

func (u *UpdatePlanGroupResponse) GetParams() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.Params
}

func (u *UpdatePlanGroupResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdatePlanGroupResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdatePlanGroupResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdatePlanGroupResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdatePlanGroupResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdatePlanGroupRequestBody struct {
	AddOnCompatibilities []*CompatiblePlans `json:"add_on_compatibilities,omitempty" url:"-"`
	// Use OrderedAddOns instead
	AddOnIDs                         []string                `json:"add_on_ids,omitempty" url:"-"`
	CheckoutCollectAddress           bool                    `json:"checkout_collect_address" url:"-"`
	CheckoutCollectEmail             bool                    `json:"checkout_collect_email" url:"-"`
	CheckoutCollectPhone             bool                    `json:"checkout_collect_phone" url:"-"`
	CustomPlanConfig                 *CustomPlanConfig       `json:"custom_plan_config,omitempty" url:"-"`
	CustomPlanID                     *string                 `json:"custom_plan_id,omitempty" url:"-"`
	DefaultPlanID                    *string                 `json:"default_plan_id,omitempty" url:"-"`
	EnableTaxCollection              bool                    `json:"enable_tax_collection" url:"-"`
	FallbackPlanID                   *string                 `json:"fallback_plan_id,omitempty" url:"-"`
	InitialPlanID                    *string                 `json:"initial_plan_id,omitempty" url:"-"`
	InitialPlanPriceID               *string                 `json:"initial_plan_price_id,omitempty" url:"-"`
	OrderedAddOns                    []*OrderedPlansInGroup  `json:"ordered_add_ons,omitempty" url:"-"`
	OrderedBundleList                []*PlanGroupBundleOrder `json:"ordered_bundle_list,omitempty" url:"-"`
	OrderedPlans                     []*OrderedPlansInGroup  `json:"ordered_plans,omitempty" url:"-"`
	PreventDowngradesWhenOverLimit   bool                    `json:"prevent_downgrades_when_over_limit" url:"-"`
	ShowCredits                      bool                    `json:"show_credits" url:"-"`
	ShowPeriodToggle                 bool                    `json:"show_period_toggle" url:"-"`
	ShowZeroPriceAsFree              bool                    `json:"show_zero_price_as_free" url:"-"`
	SyncCustomerBillingDetailsForTax bool                    `json:"sync_customer_billing_details_for_tax" url:"-"`
	TrialDays                        *int                    `json:"trial_days,omitempty" url:"-"`
	TrialExpiryPlanID                *string                 `json:"trial_expiry_plan_id,omitempty" url:"-"`
	TrialExpiryPlanPriceID           *string                 `json:"trial_expiry_plan_price_id,omitempty" url:"-"`
	TrialPaymentMethodRequired       *bool                   `json:"trial_payment_method_required,omitempty" url:"-"`
}
