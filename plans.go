// This file was auto-generated by Fern from our API Definition.

package schematichq

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/schematichq/schematic-go/core"
)

type CountPlansRequest struct {
	CompanyID *string `json:"-" url:"company_id,omitempty"`
	// Filter out plans that do not have a billing product ID
	HasProductID *bool     `json:"-" url:"has_product_id,omitempty"`
	IDs          []*string `json:"-" url:"ids,omitempty"`
	// Filter by plan type
	PlanType *CountPlansRequestPlanType `json:"-" url:"plan_type,omitempty"`
	Q        *string                    `json:"-" url:"q,omitempty"`
	// Filter out plans that already have a plan entitlement for the specified feature ID
	WithoutEntitlementFor *string `json:"-" url:"without_entitlement_for,omitempty"`
	// Filter out plans that have a billing product ID
	WithoutProductID *bool `json:"-" url:"without_product_id,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type CreatePlanRequestBody struct {
	Description string                        `json:"description" url:"-"`
	Icon        *string                       `json:"icon,omitempty" url:"-"`
	Name        string                        `json:"name" url:"-"`
	PlanType    CreatePlanRequestBodyPlanType `json:"plan_type" url:"-"`
}

type ListPlansRequest struct {
	CompanyID *string `json:"-" url:"company_id,omitempty"`
	// Filter out plans that do not have a billing product ID
	HasProductID *bool     `json:"-" url:"has_product_id,omitempty"`
	IDs          []*string `json:"-" url:"ids,omitempty"`
	// Filter by plan type
	PlanType *ListPlansRequestPlanType `json:"-" url:"plan_type,omitempty"`
	Q        *string                   `json:"-" url:"q,omitempty"`
	// Filter out plans that already have a plan entitlement for the specified feature ID
	WithoutEntitlementFor *string `json:"-" url:"without_entitlement_for,omitempty"`
	// Filter out plans that have a billing product ID
	WithoutProductID *bool `json:"-" url:"without_product_id,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

// Filter by plan type
type CountPlansRequestPlanType string

const (
	CountPlansRequestPlanTypePlan  CountPlansRequestPlanType = "plan"
	CountPlansRequestPlanTypeAddOn CountPlansRequestPlanType = "add_on"
)

func NewCountPlansRequestPlanTypeFromString(s string) (CountPlansRequestPlanType, error) {
	switch s {
	case "plan":
		return CountPlansRequestPlanTypePlan, nil
	case "add_on":
		return CountPlansRequestPlanTypeAddOn, nil
	}
	var t CountPlansRequestPlanType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CountPlansRequestPlanType) Ptr() *CountPlansRequestPlanType {
	return &c
}

type CountPlansResponse struct {
	Data *CountResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *CountPlansParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CountPlansResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountPlansResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CountPlansResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountPlansResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountPlansResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreatePlanRequestBodyPlanType string

const (
	CreatePlanRequestBodyPlanTypePlan  CreatePlanRequestBodyPlanType = "plan"
	CreatePlanRequestBodyPlanTypeAddOn CreatePlanRequestBodyPlanType = "add_on"
)

func NewCreatePlanRequestBodyPlanTypeFromString(s string) (CreatePlanRequestBodyPlanType, error) {
	switch s {
	case "plan":
		return CreatePlanRequestBodyPlanTypePlan, nil
	case "add_on":
		return CreatePlanRequestBodyPlanTypeAddOn, nil
	}
	var t CreatePlanRequestBodyPlanType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CreatePlanRequestBodyPlanType) Ptr() *CreatePlanRequestBodyPlanType {
	return &c
}

type CreatePlanResponse struct {
	Data *PlanDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreatePlanResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreatePlanResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreatePlanResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreatePlanResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreatePlanResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DeleteAudienceResponse struct {
	Data *DeleteResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DeleteAudienceResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteAudienceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteAudienceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteAudienceResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteAudienceResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DeletePlanResponse struct {
	Data *DeleteResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DeletePlanResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeletePlanResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeletePlanResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeletePlanResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeletePlanResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type GetAudienceResponse struct {
	Data *PlanAudienceDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetAudienceResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetAudienceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetAudienceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetAudienceResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetAudienceResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetPlanResponse struct {
	Data *PlanDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetPlanResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetPlanResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetPlanResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetPlanResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetPlanResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Filter by plan type
type ListPlansRequestPlanType string

const (
	ListPlansRequestPlanTypePlan  ListPlansRequestPlanType = "plan"
	ListPlansRequestPlanTypeAddOn ListPlansRequestPlanType = "add_on"
)

func NewListPlansRequestPlanTypeFromString(s string) (ListPlansRequestPlanType, error) {
	switch s {
	case "plan":
		return ListPlansRequestPlanTypePlan, nil
	case "add_on":
		return ListPlansRequestPlanTypeAddOn, nil
	}
	var t ListPlansRequestPlanType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l ListPlansRequestPlanType) Ptr() *ListPlansRequestPlanType {
	return &l
}

type ListPlansResponse struct {
	// The returned resources
	Data []*PlanDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListPlansParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListPlansResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListPlansResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListPlansResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListPlansResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListPlansResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type UpdateAudienceResponse struct {
	Data *PlanAudienceDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpdateAudienceResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateAudienceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateAudienceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateAudienceResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateAudienceResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdatePlanResponse struct {
	Data *PlanDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpdatePlanResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdatePlanResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdatePlanResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdatePlanResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdatePlanResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpsertBillingProductPlanResponse struct {
	Data *BillingProductPlanResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpsertBillingProductPlanResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertBillingProductPlanResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpsertBillingProductPlanResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpsertBillingProductPlanResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertBillingProductPlanResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateAudienceRequestBody struct {
	ConditionGroups []*CreateOrUpdateConditionGroupRequestBody `json:"condition_groups,omitempty" url:"-"`
	Conditions      []*CreateOrUpdateConditionRequestBody      `json:"conditions,omitempty" url:"-"`
}

type UpdatePlanRequestBody struct {
	Description *string `json:"description,omitempty" url:"-"`
	Icon        *string `json:"icon,omitempty" url:"-"`
	Name        string  `json:"name" url:"-"`
}

type UpsertBillingProductRequestBody struct {
	BillingProductID *string `json:"billing_product_id,omitempty" url:"-"`
	MonthlyPriceID   *string `json:"monthly_price_id,omitempty" url:"-"`
	YearlyPriceID    *string `json:"yearly_price_id,omitempty" url:"-"`
}
