/*
Schematic API

Testing AccountsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package schematic

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_schematic_AccountsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AccountsApiService CountApiKeys", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountsApi.CountApiKeys(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsApiService CountApiRequests", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountsApi.CountApiRequests(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsApiService CreateApiKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountsApi.CreateApiKey(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsApiService CreateEnvironment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountsApi.CreateEnvironment(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsApiService DeleteApiKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiKeyId string

		resp, httpRes, err := apiClient.AccountsApi.DeleteApiKey(context.Background(), apiKeyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsApiService DeleteEnvironment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentId string

		resp, httpRes, err := apiClient.AccountsApi.DeleteEnvironment(context.Background(), environmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsApiService GetApiKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiKeyId string

		resp, httpRes, err := apiClient.AccountsApi.GetApiKey(context.Background(), apiKeyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsApiService GetApiRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiRequestId string

		resp, httpRes, err := apiClient.AccountsApi.GetApiRequest(context.Background(), apiRequestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsApiService GetEnvironment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentId string

		resp, httpRes, err := apiClient.AccountsApi.GetEnvironment(context.Background(), environmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsApiService ListApiKeys", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountsApi.ListApiKeys(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsApiService ListApiRequests", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountsApi.ListApiRequests(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsApiService UpdateApiKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var apiKeyId string

		resp, httpRes, err := apiClient.AccountsApi.UpdateApiKey(context.Background(), apiKeyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountsApiService UpdateEnvironment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentId string

		resp, httpRes, err := apiClient.AccountsApi.UpdateEnvironment(context.Background(), environmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
