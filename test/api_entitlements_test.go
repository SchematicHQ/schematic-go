/*
Schematic API

Testing EntitlementsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package schematic

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/SchematicHQ/schematic-go"
)

func Test_schematic_EntitlementsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test EntitlementsApiService CreateCompanyOverride", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EntitlementsApi.CreateCompanyOverride(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EntitlementsApiService CreatePlanEntitlement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EntitlementsApi.CreatePlanEntitlement(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EntitlementsApiService DeleteCompanyOverride", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyOverrideId string

		resp, httpRes, err := apiClient.EntitlementsApi.DeleteCompanyOverride(context.Background(), companyOverrideId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EntitlementsApiService DeletePlanEntitlement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var planEntitlementId string

		resp, httpRes, err := apiClient.EntitlementsApi.DeletePlanEntitlement(context.Background(), planEntitlementId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EntitlementsApiService GetCompanyOverride", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyOverrideId string

		resp, httpRes, err := apiClient.EntitlementsApi.GetCompanyOverride(context.Background(), companyOverrideId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EntitlementsApiService GetPlanEntitlement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var planEntitlementId string

		resp, httpRes, err := apiClient.EntitlementsApi.GetPlanEntitlement(context.Background(), planEntitlementId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EntitlementsApiService ListCompanyOverrides", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EntitlementsApi.ListCompanyOverrides(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EntitlementsApiService ListPlanEntitlements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EntitlementsApi.ListPlanEntitlements(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EntitlementsApiService UpdateCompanyOverride", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyOverrideId string

		resp, httpRes, err := apiClient.EntitlementsApi.UpdateCompanyOverride(context.Background(), companyOverrideId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EntitlementsApiService UpdatePlanEntitlement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var planEntitlementId string

		resp, httpRes, err := apiClient.EntitlementsApi.UpdatePlanEntitlement(context.Background(), planEntitlementId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
