/*
Schematic API

Testing PlansApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package schematic

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_schematic_PlansApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PlansApiService CreatePlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PlansApi.CreatePlan(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlansApiService DeletePlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var planId string

		resp, httpRes, err := apiClient.PlansApi.DeletePlan(context.Background(), planId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlansApiService GetPlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var planId string

		resp, httpRes, err := apiClient.PlansApi.GetPlan(context.Background(), planId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlansApiService ListPlans", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PlansApi.ListPlans(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlansApiService UpdatePlan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var planId string

		resp, httpRes, err := apiClient.PlansApi.UpdatePlan(context.Background(), planId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlansApiService UpdatePlanAudience", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var planAudienceId string

		resp, httpRes, err := apiClient.PlansApi.UpdatePlanAudience(context.Background(), planAudienceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlansApiService UpsertBillingPeriod", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string

		resp, httpRes, err := apiClient.PlansApi.UpsertBillingPeriod(context.Background(), key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
