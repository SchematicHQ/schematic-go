// This file was auto-generated by Fern from our API Definition.

package schematichq

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/schematichq/schematic-go/core"
	time "time"
)

type APIError struct {
	// Error message
	Error string `json:"error" url:"error"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *APIError) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *APIError) UnmarshalJSON(data []byte) error {
	type unmarshaler APIError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = APIError(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *APIError) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// The created resource
type APIKeyCreateResponseData struct {
	CreatedAt     time.Time  `json:"created_at" url:"created_at"`
	Description   *string    `json:"description,omitempty" url:"description,omitempty"`
	EnvironmentID *string    `json:"environment_id,omitempty" url:"environment_id,omitempty"`
	ID            string     `json:"id" url:"id"`
	LastUsedAt    *time.Time `json:"last_used_at,omitempty" url:"last_used_at,omitempty"`
	Name          string     `json:"name" url:"name"`
	Scopes        []string   `json:"scopes,omitempty" url:"scopes,omitempty"`
	Secret        string     `json:"secret" url:"secret"`
	UpdatedAt     time.Time  `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *APIKeyCreateResponseData) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *APIKeyCreateResponseData) UnmarshalJSON(data []byte) error {
	type embed APIKeyCreateResponseData
	var unmarshaler = struct {
		embed
		CreatedAt  *core.DateTime `json:"created_at"`
		LastUsedAt *core.DateTime `json:"last_used_at,omitempty"`
		UpdatedAt  *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = APIKeyCreateResponseData(unmarshaler.embed)
	a.CreatedAt = unmarshaler.CreatedAt.Time()
	a.LastUsedAt = unmarshaler.LastUsedAt.TimePtr()
	a.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *APIKeyCreateResponseData) MarshalJSON() ([]byte, error) {
	type embed APIKeyCreateResponseData
	var marshaler = struct {
		embed
		CreatedAt  *core.DateTime `json:"created_at"`
		LastUsedAt *core.DateTime `json:"last_used_at,omitempty"`
		UpdatedAt  *core.DateTime `json:"updated_at"`
	}{
		embed:      embed(*a),
		CreatedAt:  core.NewDateTime(a.CreatedAt),
		LastUsedAt: core.NewOptionalDateTime(a.LastUsedAt),
		UpdatedAt:  core.NewDateTime(a.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (a *APIKeyCreateResponseData) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type APIKeyRequestListResponseData struct {
	APIKeyID          string     `json:"api_key_id" url:"api_key_id"`
	EndedAt           *time.Time `json:"ended_at,omitempty" url:"ended_at,omitempty"`
	EnvironmentID     *string    `json:"environment_id,omitempty" url:"environment_id,omitempty"`
	ID                string     `json:"id" url:"id"`
	Method            string     `json:"method" url:"method"`
	ReqBody           *string    `json:"req_body,omitempty" url:"req_body,omitempty"`
	RequestType       *string    `json:"request_type,omitempty" url:"request_type,omitempty"`
	ResourceID        *int       `json:"resource_id,omitempty" url:"resource_id,omitempty"`
	ResourceIDString  *string    `json:"resource_id_string,omitempty" url:"resource_id_string,omitempty"`
	ResourceName      *string    `json:"resource_name,omitempty" url:"resource_name,omitempty"`
	ResourceType      *string    `json:"resource_type,omitempty" url:"resource_type,omitempty"`
	RespCode          *int       `json:"resp_code,omitempty" url:"resp_code,omitempty"`
	SecondaryResource *string    `json:"secondary_resource,omitempty" url:"secondary_resource,omitempty"`
	StartedAt         time.Time  `json:"started_at" url:"started_at"`
	URL               string     `json:"url" url:"url"`
	UserName          *string    `json:"user_name,omitempty" url:"user_name,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *APIKeyRequestListResponseData) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *APIKeyRequestListResponseData) UnmarshalJSON(data []byte) error {
	type embed APIKeyRequestListResponseData
	var unmarshaler = struct {
		embed
		EndedAt   *core.DateTime `json:"ended_at,omitempty"`
		StartedAt *core.DateTime `json:"started_at"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = APIKeyRequestListResponseData(unmarshaler.embed)
	a.EndedAt = unmarshaler.EndedAt.TimePtr()
	a.StartedAt = unmarshaler.StartedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *APIKeyRequestListResponseData) MarshalJSON() ([]byte, error) {
	type embed APIKeyRequestListResponseData
	var marshaler = struct {
		embed
		EndedAt   *core.DateTime `json:"ended_at,omitempty"`
		StartedAt *core.DateTime `json:"started_at"`
	}{
		embed:     embed(*a),
		EndedAt:   core.NewOptionalDateTime(a.EndedAt),
		StartedAt: core.NewDateTime(a.StartedAt),
	}
	return json.Marshal(marshaler)
}

func (a *APIKeyRequestListResponseData) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// The returned resource
type APIKeyRequestResponseData struct {
	APIKeyID          string     `json:"api_key_id" url:"api_key_id"`
	EndedAt           *time.Time `json:"ended_at,omitempty" url:"ended_at,omitempty"`
	EnvironmentID     *string    `json:"environment_id,omitempty" url:"environment_id,omitempty"`
	ID                string     `json:"id" url:"id"`
	Method            string     `json:"method" url:"method"`
	ReqBody           *string    `json:"req_body,omitempty" url:"req_body,omitempty"`
	RequestType       *string    `json:"request_type,omitempty" url:"request_type,omitempty"`
	ResourceID        *int       `json:"resource_id,omitempty" url:"resource_id,omitempty"`
	ResourceIDString  *string    `json:"resource_id_string,omitempty" url:"resource_id_string,omitempty"`
	ResourceName      *string    `json:"resource_name,omitempty" url:"resource_name,omitempty"`
	ResourceType      *string    `json:"resource_type,omitempty" url:"resource_type,omitempty"`
	RespBody          *string    `json:"resp_body,omitempty" url:"resp_body,omitempty"`
	RespCode          *int       `json:"resp_code,omitempty" url:"resp_code,omitempty"`
	SecondaryResource *string    `json:"secondary_resource,omitempty" url:"secondary_resource,omitempty"`
	StartedAt         time.Time  `json:"started_at" url:"started_at"`
	URL               string     `json:"url" url:"url"`
	UserAgent         *string    `json:"user_agent,omitempty" url:"user_agent,omitempty"`
	UserID            *string    `json:"user_id,omitempty" url:"user_id,omitempty"`
	UserName          *string    `json:"user_name,omitempty" url:"user_name,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *APIKeyRequestResponseData) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *APIKeyRequestResponseData) UnmarshalJSON(data []byte) error {
	type embed APIKeyRequestResponseData
	var unmarshaler = struct {
		embed
		EndedAt   *core.DateTime `json:"ended_at,omitempty"`
		StartedAt *core.DateTime `json:"started_at"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = APIKeyRequestResponseData(unmarshaler.embed)
	a.EndedAt = unmarshaler.EndedAt.TimePtr()
	a.StartedAt = unmarshaler.StartedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *APIKeyRequestResponseData) MarshalJSON() ([]byte, error) {
	type embed APIKeyRequestResponseData
	var marshaler = struct {
		embed
		EndedAt   *core.DateTime `json:"ended_at,omitempty"`
		StartedAt *core.DateTime `json:"started_at"`
	}{
		embed:     embed(*a),
		EndedAt:   core.NewOptionalDateTime(a.EndedAt),
		StartedAt: core.NewDateTime(a.StartedAt),
	}
	return json.Marshal(marshaler)
}

func (a *APIKeyRequestResponseData) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// The updated resource
type APIKeyResponseData struct {
	CreatedAt     time.Time  `json:"created_at" url:"created_at"`
	Description   *string    `json:"description,omitempty" url:"description,omitempty"`
	EnvironmentID *string    `json:"environment_id,omitempty" url:"environment_id,omitempty"`
	ID            string     `json:"id" url:"id"`
	LastUsedAt    *time.Time `json:"last_used_at,omitempty" url:"last_used_at,omitempty"`
	Name          string     `json:"name" url:"name"`
	Scopes        []string   `json:"scopes,omitempty" url:"scopes,omitempty"`
	UpdatedAt     time.Time  `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *APIKeyResponseData) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *APIKeyResponseData) UnmarshalJSON(data []byte) error {
	type embed APIKeyResponseData
	var unmarshaler = struct {
		embed
		CreatedAt  *core.DateTime `json:"created_at"`
		LastUsedAt *core.DateTime `json:"last_used_at,omitempty"`
		UpdatedAt  *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*a),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*a = APIKeyResponseData(unmarshaler.embed)
	a.CreatedAt = unmarshaler.CreatedAt.Time()
	a.LastUsedAt = unmarshaler.LastUsedAt.TimePtr()
	a.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *APIKeyResponseData) MarshalJSON() ([]byte, error) {
	type embed APIKeyResponseData
	var marshaler = struct {
		embed
		CreatedAt  *core.DateTime `json:"created_at"`
		LastUsedAt *core.DateTime `json:"last_used_at,omitempty"`
		UpdatedAt  *core.DateTime `json:"updated_at"`
	}{
		embed:      embed(*a),
		CreatedAt:  core.NewDateTime(a.CreatedAt),
		LastUsedAt: core.NewOptionalDateTime(a.LastUsedAt),
		UpdatedAt:  core.NewDateTime(a.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (a *APIKeyResponseData) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AudienceRequestBody struct {
	ConditionGroups []*CreateOrUpdateConditionGroupRequestBody `json:"condition_groups,omitempty" url:"condition_groups,omitempty"`
	Conditions      []*CreateOrUpdateConditionRequestBody      `json:"conditions,omitempty" url:"conditions,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Q      *string `json:"q,omitempty" url:"q,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AudienceRequestBody) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AudienceRequestBody) UnmarshalJSON(data []byte) error {
	type unmarshaler AudienceRequestBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AudienceRequestBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AudienceRequestBody) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// The created resource
type BillingCustomerResponseData struct {
	CompanyID      *string    `json:"company_id,omitempty" url:"company_id,omitempty"`
	DeletedAt      *time.Time `json:"deleted_at,omitempty" url:"deleted_at,omitempty"`
	Email          string     `json:"email" url:"email"`
	ExternalID     string     `json:"external_id" url:"external_id"`
	FailedToImport bool       `json:"failed_to_import" url:"failed_to_import"`
	ID             string     `json:"id" url:"id"`
	Name           string     `json:"name" url:"name"`
	UpdatedAt      time.Time  `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BillingCustomerResponseData) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillingCustomerResponseData) UnmarshalJSON(data []byte) error {
	type embed BillingCustomerResponseData
	var unmarshaler = struct {
		embed
		DeletedAt *core.DateTime `json:"deleted_at,omitempty"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BillingCustomerResponseData(unmarshaler.embed)
	b.DeletedAt = unmarshaler.DeletedAt.TimePtr()
	b.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillingCustomerResponseData) MarshalJSON() ([]byte, error) {
	type embed BillingCustomerResponseData
	var marshaler = struct {
		embed
		DeletedAt *core.DateTime `json:"deleted_at,omitempty"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*b),
		DeletedAt: core.NewOptionalDateTime(b.DeletedAt),
		UpdatedAt: core.NewDateTime(b.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (b *BillingCustomerResponseData) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BillingCustomerSubscription struct {
	Currency     string     `json:"currency" url:"currency"`
	ExpiredAt    *time.Time `json:"expired_at,omitempty" url:"expired_at,omitempty"`
	Interval     string     `json:"interval" url:"interval"`
	MeteredUsage bool       `json:"metered_usage" url:"metered_usage"`
	PerUnitPrice int        `json:"per_unit_price" url:"per_unit_price"`
	TotalPrice   int        `json:"total_price" url:"total_price"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BillingCustomerSubscription) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillingCustomerSubscription) UnmarshalJSON(data []byte) error {
	type embed BillingCustomerSubscription
	var unmarshaler = struct {
		embed
		ExpiredAt *core.DateTime `json:"expired_at,omitempty"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BillingCustomerSubscription(unmarshaler.embed)
	b.ExpiredAt = unmarshaler.ExpiredAt.TimePtr()

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillingCustomerSubscription) MarshalJSON() ([]byte, error) {
	type embed BillingCustomerSubscription
	var marshaler = struct {
		embed
		ExpiredAt *core.DateTime `json:"expired_at,omitempty"`
	}{
		embed:     embed(*b),
		ExpiredAt: core.NewOptionalDateTime(b.ExpiredAt),
	}
	return json.Marshal(marshaler)
}

func (b *BillingCustomerSubscription) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BillingCustomerWithSubscriptionsResponseData struct {
	CompanyID      *string                        `json:"company_id,omitempty" url:"company_id,omitempty"`
	DeletedAt      *time.Time                     `json:"deleted_at,omitempty" url:"deleted_at,omitempty"`
	Email          string                         `json:"email" url:"email"`
	ExternalID     string                         `json:"external_id" url:"external_id"`
	FailedToImport bool                           `json:"failed_to_import" url:"failed_to_import"`
	ID             string                         `json:"id" url:"id"`
	Name           string                         `json:"name" url:"name"`
	Subscriptions  []*BillingCustomerSubscription `json:"subscriptions,omitempty" url:"subscriptions,omitempty"`
	UpdatedAt      time.Time                      `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BillingCustomerWithSubscriptionsResponseData) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillingCustomerWithSubscriptionsResponseData) UnmarshalJSON(data []byte) error {
	type embed BillingCustomerWithSubscriptionsResponseData
	var unmarshaler = struct {
		embed
		DeletedAt *core.DateTime `json:"deleted_at,omitempty"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BillingCustomerWithSubscriptionsResponseData(unmarshaler.embed)
	b.DeletedAt = unmarshaler.DeletedAt.TimePtr()
	b.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillingCustomerWithSubscriptionsResponseData) MarshalJSON() ([]byte, error) {
	type embed BillingCustomerWithSubscriptionsResponseData
	var marshaler = struct {
		embed
		DeletedAt *core.DateTime `json:"deleted_at,omitempty"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*b),
		DeletedAt: core.NewOptionalDateTime(b.DeletedAt),
		UpdatedAt: core.NewDateTime(b.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (b *BillingCustomerWithSubscriptionsResponseData) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BillingMeterResponseData struct {
	DispalyName     string `json:"dispaly_name" url:"dispaly_name"`
	EventName       string `json:"event_name" url:"event_name"`
	EventPayloadKey string `json:"event_payload_key" url:"event_payload_key"`
	ExternalPriceID string `json:"external_price_id" url:"external_price_id"`
	ID              string `json:"id" url:"id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BillingMeterResponseData) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillingMeterResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler BillingMeterResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BillingMeterResponseData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillingMeterResponseData) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BillingPriceResponseData struct {
	Currency        string `json:"currency" url:"currency"`
	ExternalPriceID string `json:"external_price_id" url:"external_price_id"`
	ID              string `json:"id" url:"id"`
	Interval        string `json:"interval" url:"interval"`
	Price           int    `json:"price" url:"price"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BillingPriceResponseData) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillingPriceResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler BillingPriceResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BillingPriceResponseData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillingPriceResponseData) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BillingProductDetailResponseData struct {
	AccountID     string                      `json:"account_id" url:"account_id"`
	CreatedAt     time.Time                   `json:"created_at" url:"created_at"`
	Currency      string                      `json:"currency" url:"currency"`
	EnvironmentID string                      `json:"environment_id" url:"environment_id"`
	ExternalID    string                      `json:"external_id" url:"external_id"`
	Name          string                      `json:"name" url:"name"`
	Price         float64                     `json:"price" url:"price"`
	Prices        []*BillingPriceResponseData `json:"prices,omitempty" url:"prices,omitempty"`
	ProductID     string                      `json:"product_id" url:"product_id"`
	Quantity      float64                     `json:"quantity" url:"quantity"`
	UpdatedAt     time.Time                   `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BillingProductDetailResponseData) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillingProductDetailResponseData) UnmarshalJSON(data []byte) error {
	type embed BillingProductDetailResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BillingProductDetailResponseData(unmarshaler.embed)
	b.CreatedAt = unmarshaler.CreatedAt.Time()
	b.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillingProductDetailResponseData) MarshalJSON() ([]byte, error) {
	type embed BillingProductDetailResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*b),
		CreatedAt: core.NewDateTime(b.CreatedAt),
		UpdatedAt: core.NewDateTime(b.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (b *BillingProductDetailResponseData) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BillingProductForSubscriptionResponseData struct {
	CreatedAt       time.Time `json:"created_at" url:"created_at"`
	Currency        string    `json:"currency" url:"currency"`
	EnvironmentID   string    `json:"environment_id" url:"environment_id"`
	ExternalID      string    `json:"external_id" url:"external_id"`
	ID              string    `json:"id" url:"id"`
	Interval        string    `json:"interval" url:"interval"`
	MeterID         *string   `json:"meter_id,omitempty" url:"meter_id,omitempty"`
	Name            string    `json:"name" url:"name"`
	Price           int       `json:"price" url:"price"`
	PriceExternalID string    `json:"price_external_id" url:"price_external_id"`
	Quantity        float64   `json:"quantity" url:"quantity"`
	SubscriptionID  string    `json:"subscription_id" url:"subscription_id"`
	UpdatedAt       time.Time `json:"updated_at" url:"updated_at"`
	UsageType       string    `json:"usage_type" url:"usage_type"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BillingProductForSubscriptionResponseData) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillingProductForSubscriptionResponseData) UnmarshalJSON(data []byte) error {
	type embed BillingProductForSubscriptionResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BillingProductForSubscriptionResponseData(unmarshaler.embed)
	b.CreatedAt = unmarshaler.CreatedAt.Time()
	b.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillingProductForSubscriptionResponseData) MarshalJSON() ([]byte, error) {
	type embed BillingProductForSubscriptionResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*b),
		CreatedAt: core.NewDateTime(b.CreatedAt),
		UpdatedAt: core.NewDateTime(b.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (b *BillingProductForSubscriptionResponseData) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// The updated resource
type BillingProductPlanResponseData struct {
	AccountID        string  `json:"account_id" url:"account_id"`
	BillingProductID string  `json:"billing_product_id" url:"billing_product_id"`
	EnvironmentID    string  `json:"environment_id" url:"environment_id"`
	MonthlyPriceID   *string `json:"monthly_price_id,omitempty" url:"monthly_price_id,omitempty"`
	PlanID           string  `json:"plan_id" url:"plan_id"`
	YearlyPriceID    *string `json:"yearly_price_id,omitempty" url:"yearly_price_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BillingProductPlanResponseData) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillingProductPlanResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler BillingProductPlanResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BillingProductPlanResponseData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillingProductPlanResponseData) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BillingProductPricing struct {
	Currency          string  `json:"currency" url:"currency"`
	Interval          string  `json:"interval" url:"interval"`
	MeterID           *string `json:"meter_id,omitempty" url:"meter_id,omitempty"`
	Price             int     `json:"price" url:"price"`
	PriceExternalID   string  `json:"price_external_id" url:"price_external_id"`
	ProductExternalID string  `json:"product_external_id" url:"product_external_id"`
	Quantity          int     `json:"quantity" url:"quantity"`
	UsageType         string  `json:"usage_type" url:"usage_type"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BillingProductPricing) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillingProductPricing) UnmarshalJSON(data []byte) error {
	type unmarshaler BillingProductPricing
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BillingProductPricing(value)

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillingProductPricing) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BillingProductResponseData struct {
	AccountID     string    `json:"account_id" url:"account_id"`
	CreatedAt     time.Time `json:"created_at" url:"created_at"`
	Currency      string    `json:"currency" url:"currency"`
	EnvironmentID string    `json:"environment_id" url:"environment_id"`
	ExternalID    string    `json:"external_id" url:"external_id"`
	Name          string    `json:"name" url:"name"`
	Price         float64   `json:"price" url:"price"`
	ProductID     string    `json:"product_id" url:"product_id"`
	Quantity      float64   `json:"quantity" url:"quantity"`
	UpdatedAt     time.Time `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BillingProductResponseData) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillingProductResponseData) UnmarshalJSON(data []byte) error {
	type embed BillingProductResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BillingProductResponseData(unmarshaler.embed)
	b.CreatedAt = unmarshaler.CreatedAt.Time()
	b.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillingProductResponseData) MarshalJSON() ([]byte, error) {
	type embed BillingProductResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*b),
		CreatedAt: core.NewDateTime(b.CreatedAt),
		UpdatedAt: core.NewDateTime(b.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (b *BillingProductResponseData) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BillingSubscriptionResponseData struct {
	CompanyID              *string                `json:"company_id,omitempty" url:"company_id,omitempty"`
	CreatedAt              time.Time              `json:"created_at" url:"created_at"`
	Currency               string                 `json:"currency" url:"currency"`
	CustomerExternalID     string                 `json:"customer_external_id" url:"customer_external_id"`
	ExpiredAt              *time.Time             `json:"expired_at,omitempty" url:"expired_at,omitempty"`
	ID                     string                 `json:"id" url:"id"`
	Interval               string                 `json:"interval" url:"interval"`
	Metadata               map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	PeriodEnd              int                    `json:"period_end" url:"period_end"`
	PeriodStart            int                    `json:"period_start" url:"period_start"`
	Status                 string                 `json:"status" url:"status"`
	SubscriptionExternalID string                 `json:"subscription_external_id" url:"subscription_external_id"`
	TotalPrice             int                    `json:"total_price" url:"total_price"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BillingSubscriptionResponseData) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillingSubscriptionResponseData) UnmarshalJSON(data []byte) error {
	type embed BillingSubscriptionResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		ExpiredAt *core.DateTime `json:"expired_at,omitempty"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BillingSubscriptionResponseData(unmarshaler.embed)
	b.CreatedAt = unmarshaler.CreatedAt.Time()
	b.ExpiredAt = unmarshaler.ExpiredAt.TimePtr()

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillingSubscriptionResponseData) MarshalJSON() ([]byte, error) {
	type embed BillingSubscriptionResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		ExpiredAt *core.DateTime `json:"expired_at,omitempty"`
	}{
		embed:     embed(*b),
		CreatedAt: core.NewDateTime(b.CreatedAt),
		ExpiredAt: core.NewOptionalDateTime(b.ExpiredAt),
	}
	return json.Marshal(marshaler)
}

func (b *BillingSubscriptionResponseData) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BillingSubscriptionView struct {
	CompanyID              *string                                      `json:"company_id,omitempty" url:"company_id,omitempty"`
	CreatedAt              time.Time                                    `json:"created_at" url:"created_at"`
	Currency               string                                       `json:"currency" url:"currency"`
	CustomerExternalID     string                                       `json:"customer_external_id" url:"customer_external_id"`
	ExpiredAt              *time.Time                                   `json:"expired_at,omitempty" url:"expired_at,omitempty"`
	ID                     string                                       `json:"id" url:"id"`
	Interval               string                                       `json:"interval" url:"interval"`
	LatestInvoice          *InvoiceResponseData                         `json:"latest_invoice,omitempty" url:"latest_invoice,omitempty"`
	Metadata               map[string]interface{}                       `json:"metadata,omitempty" url:"metadata,omitempty"`
	PaymentMethod          *PaymentMethodResponseData                   `json:"payment_method,omitempty" url:"payment_method,omitempty"`
	PeriodEnd              int                                          `json:"period_end" url:"period_end"`
	PeriodStart            int                                          `json:"period_start" url:"period_start"`
	Products               []*BillingProductForSubscriptionResponseData `json:"products,omitempty" url:"products,omitempty"`
	Status                 string                                       `json:"status" url:"status"`
	SubscriptionExternalID string                                       `json:"subscription_external_id" url:"subscription_external_id"`
	TotalPrice             int                                          `json:"total_price" url:"total_price"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BillingSubscriptionView) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BillingSubscriptionView) UnmarshalJSON(data []byte) error {
	type embed BillingSubscriptionView
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		ExpiredAt *core.DateTime `json:"expired_at,omitempty"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BillingSubscriptionView(unmarshaler.embed)
	b.CreatedAt = unmarshaler.CreatedAt.Time()
	b.ExpiredAt = unmarshaler.ExpiredAt.TimePtr()

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BillingSubscriptionView) MarshalJSON() ([]byte, error) {
	type embed BillingSubscriptionView
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		ExpiredAt *core.DateTime `json:"expired_at,omitempty"`
	}{
		embed:     embed(*b),
		CreatedAt: core.NewDateTime(b.CreatedAt),
		ExpiredAt: core.NewOptionalDateTime(b.ExpiredAt),
	}
	return json.Marshal(marshaler)
}

func (b *BillingSubscriptionView) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type CheckFlagOutputWithFlagKey struct {
	CompanyID *string `json:"company_id,omitempty" url:"company_id,omitempty"`
	Error     *string `json:"error,omitempty" url:"error,omitempty"`
	Flag      string  `json:"flag" url:"flag"`
	Reason    string  `json:"reason" url:"reason"`
	RuleID    *string `json:"rule_id,omitempty" url:"rule_id,omitempty"`
	UserID    *string `json:"user_id,omitempty" url:"user_id,omitempty"`
	Value     bool    `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CheckFlagOutputWithFlagKey) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CheckFlagOutputWithFlagKey) UnmarshalJSON(data []byte) error {
	type unmarshaler CheckFlagOutputWithFlagKey
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CheckFlagOutputWithFlagKey(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CheckFlagOutputWithFlagKey) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CheckFlagRequestBody struct {
	Company map[string]string `json:"company,omitempty" url:"company,omitempty"`
	User    map[string]string `json:"user,omitempty" url:"user,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CheckFlagRequestBody) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CheckFlagRequestBody) UnmarshalJSON(data []byte) error {
	type unmarshaler CheckFlagRequestBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CheckFlagRequestBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CheckFlagRequestBody) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The returned resource
type CheckFlagResponseData struct {
	CompanyID *string `json:"company_id,omitempty" url:"company_id,omitempty"`
	Error     *string `json:"error,omitempty" url:"error,omitempty"`
	Reason    string  `json:"reason" url:"reason"`
	RuleID    *string `json:"rule_id,omitempty" url:"rule_id,omitempty"`
	UserID    *string `json:"user_id,omitempty" url:"user_id,omitempty"`
	Value     bool    `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CheckFlagResponseData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CheckFlagResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler CheckFlagResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CheckFlagResponseData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CheckFlagResponseData) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The created resource
type CheckFlagsResponseData struct {
	Flags []*CheckFlagOutputWithFlagKey `json:"flags,omitempty" url:"flags,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CheckFlagsResponseData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CheckFlagsResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler CheckFlagsResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CheckFlagsResponseData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CheckFlagsResponseData) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CompanyCrmDealsResponseData struct {
	DealArr        string             `json:"deal_arr" url:"deal_arr"`
	DealExternalID string             `json:"deal_external_id" url:"deal_external_id"`
	DealMrr        string             `json:"deal_mrr" url:"deal_mrr"`
	DealName       *string            `json:"deal_name,omitempty" url:"deal_name,omitempty"`
	LineItems      []*CrmDealLineItem `json:"line_items,omitempty" url:"line_items,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CompanyCrmDealsResponseData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CompanyCrmDealsResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler CompanyCrmDealsResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CompanyCrmDealsResponseData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CompanyCrmDealsResponseData) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CompanyDetailResponseData struct {
	AddOns               []*CompanyPlanWithBillingSubView `json:"add_ons,omitempty" url:"add_ons,omitempty"`
	BillingSubscriptions []*BillingSubscriptionView       `json:"billing_subscriptions,omitempty" url:"billing_subscriptions,omitempty"`
	CreatedAt            time.Time                        `json:"created_at" url:"created_at"`
	EntityTraits         []*EntityTraitDetailResponseData `json:"entity_traits,omitempty" url:"entity_traits,omitempty"`
	EnvironmentID        string                           `json:"environment_id" url:"environment_id"`
	ID                   string                           `json:"id" url:"id"`
	Keys                 []*EntityKeyDetailResponseData   `json:"keys,omitempty" url:"keys,omitempty"`
	LastSeenAt           *time.Time                       `json:"last_seen_at,omitempty" url:"last_seen_at,omitempty"`
	LogoURL              *string                          `json:"logo_url,omitempty" url:"logo_url,omitempty"`
	Name                 string                           `json:"name" url:"name"`
	Plan                 *CompanyPlanWithBillingSubView   `json:"plan,omitempty" url:"plan,omitempty"`
	Plans                []*GenericPreviewObject          `json:"plans,omitempty" url:"plans,omitempty"`
	// A map of trait names to trait values
	Traits    map[string]interface{} `json:"traits,omitempty" url:"traits,omitempty"`
	UpdatedAt time.Time              `json:"updated_at" url:"updated_at"`
	UserCount int                    `json:"user_count" url:"user_count"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CompanyDetailResponseData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CompanyDetailResponseData) UnmarshalJSON(data []byte) error {
	type embed CompanyDetailResponseData
	var unmarshaler = struct {
		embed
		CreatedAt  *core.DateTime `json:"created_at"`
		LastSeenAt *core.DateTime `json:"last_seen_at,omitempty"`
		UpdatedAt  *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CompanyDetailResponseData(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.LastSeenAt = unmarshaler.LastSeenAt.TimePtr()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CompanyDetailResponseData) MarshalJSON() ([]byte, error) {
	type embed CompanyDetailResponseData
	var marshaler = struct {
		embed
		CreatedAt  *core.DateTime `json:"created_at"`
		LastSeenAt *core.DateTime `json:"last_seen_at,omitempty"`
		UpdatedAt  *core.DateTime `json:"updated_at"`
	}{
		embed:      embed(*c),
		CreatedAt:  core.NewDateTime(c.CreatedAt),
		LastSeenAt: core.NewOptionalDateTime(c.LastSeenAt),
		UpdatedAt:  core.NewDateTime(c.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *CompanyDetailResponseData) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CompanyMembershipDetailResponseData struct {
	Company   *CompanyResponseData `json:"company,omitempty" url:"company,omitempty"`
	CompanyID string               `json:"company_id" url:"company_id"`
	CreatedAt time.Time            `json:"created_at" url:"created_at"`
	ID        string               `json:"id" url:"id"`
	UpdatedAt time.Time            `json:"updated_at" url:"updated_at"`
	UserID    string               `json:"user_id" url:"user_id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CompanyMembershipDetailResponseData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CompanyMembershipDetailResponseData) UnmarshalJSON(data []byte) error {
	type embed CompanyMembershipDetailResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CompanyMembershipDetailResponseData(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CompanyMembershipDetailResponseData) MarshalJSON() ([]byte, error) {
	type embed CompanyMembershipDetailResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*c),
		CreatedAt: core.NewDateTime(c.CreatedAt),
		UpdatedAt: core.NewDateTime(c.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *CompanyMembershipDetailResponseData) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CompanyMembershipResponseData struct {
	CompanyID string    `json:"company_id" url:"company_id"`
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	ID        string    `json:"id" url:"id"`
	UpdatedAt time.Time `json:"updated_at" url:"updated_at"`
	UserID    string    `json:"user_id" url:"user_id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CompanyMembershipResponseData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CompanyMembershipResponseData) UnmarshalJSON(data []byte) error {
	type embed CompanyMembershipResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CompanyMembershipResponseData(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CompanyMembershipResponseData) MarshalJSON() ([]byte, error) {
	type embed CompanyMembershipResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*c),
		CreatedAt: core.NewDateTime(c.CreatedAt),
		UpdatedAt: core.NewDateTime(c.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *CompanyMembershipResponseData) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The updated resource
type CompanyOverrideResponseData struct {
	Company       *CompanyDetailResponseData         `json:"company,omitempty" url:"company,omitempty"`
	CompanyID     string                             `json:"company_id" url:"company_id"`
	CreatedAt     time.Time                          `json:"created_at" url:"created_at"`
	EnvironmentID string                             `json:"environment_id" url:"environment_id"`
	Feature       *FeatureResponseData               `json:"feature,omitempty" url:"feature,omitempty"`
	FeatureID     string                             `json:"feature_id" url:"feature_id"`
	ID            string                             `json:"id" url:"id"`
	MetricPeriod  *string                            `json:"metric_period,omitempty" url:"metric_period,omitempty"`
	RuleID        string                             `json:"rule_id" url:"rule_id"`
	UpdatedAt     time.Time                          `json:"updated_at" url:"updated_at"`
	ValueBool     *bool                              `json:"value_bool,omitempty" url:"value_bool,omitempty"`
	ValueNumeric  *int                               `json:"value_numeric,omitempty" url:"value_numeric,omitempty"`
	ValueTrait    *EntityTraitDefinitionResponseData `json:"value_trait,omitempty" url:"value_trait,omitempty"`
	ValueTraitID  *string                            `json:"value_trait_id,omitempty" url:"value_trait_id,omitempty"`
	ValueType     string                             `json:"value_type" url:"value_type"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CompanyOverrideResponseData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CompanyOverrideResponseData) UnmarshalJSON(data []byte) error {
	type embed CompanyOverrideResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CompanyOverrideResponseData(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CompanyOverrideResponseData) MarshalJSON() ([]byte, error) {
	type embed CompanyOverrideResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*c),
		CreatedAt: core.NewDateTime(c.CreatedAt),
		UpdatedAt: core.NewDateTime(c.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *CompanyOverrideResponseData) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CompanyPlanDetailResponseData struct {
	AudienceType   *string                           `json:"audience_type,omitempty" url:"audience_type,omitempty"`
	BillingProduct *BillingProductDetailResponseData `json:"billing_product,omitempty" url:"billing_product,omitempty"`
	CompanyCount   int                               `json:"company_count" url:"company_count"`
	CreatedAt      time.Time                         `json:"created_at" url:"created_at"`
	Current        bool                              `json:"current" url:"current"`
	Description    string                            `json:"description" url:"description"`
	Entitlements   []*PlanEntitlementResponseData    `json:"entitlements,omitempty" url:"entitlements,omitempty"`
	Features       []*FeatureDetailResponseData      `json:"features,omitempty" url:"features,omitempty"`
	Icon           string                            `json:"icon" url:"icon"`
	ID             string                            `json:"id" url:"id"`
	IsDefault      bool                              `json:"is_default" url:"is_default"`
	MonthlyPrice   *BillingPriceResponseData         `json:"monthly_price,omitempty" url:"monthly_price,omitempty"`
	Name           string                            `json:"name" url:"name"`
	PlanType       string                            `json:"plan_type" url:"plan_type"`
	UpdatedAt      time.Time                         `json:"updated_at" url:"updated_at"`
	Valid          bool                              `json:"valid" url:"valid"`
	YearlyPrice    *BillingPriceResponseData         `json:"yearly_price,omitempty" url:"yearly_price,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CompanyPlanDetailResponseData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CompanyPlanDetailResponseData) UnmarshalJSON(data []byte) error {
	type embed CompanyPlanDetailResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CompanyPlanDetailResponseData(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CompanyPlanDetailResponseData) MarshalJSON() ([]byte, error) {
	type embed CompanyPlanDetailResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*c),
		CreatedAt: core.NewDateTime(c.CreatedAt),
		UpdatedAt: core.NewDateTime(c.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *CompanyPlanDetailResponseData) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CompanyPlanWithBillingSubView struct {
	BillingProductID *string `json:"billing_product_id,omitempty" url:"billing_product_id,omitempty"`
	Description      *string `json:"description,omitempty" url:"description,omitempty"`
	ID               string  `json:"id" url:"id"`
	ImageURL         *string `json:"image_url,omitempty" url:"image_url,omitempty"`
	Name             string  `json:"name" url:"name"`
	PlanPeriod       *string `json:"plan_period,omitempty" url:"plan_period,omitempty"`
	PlanPrice        *int    `json:"plan_price,omitempty" url:"plan_price,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CompanyPlanWithBillingSubView) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CompanyPlanWithBillingSubView) UnmarshalJSON(data []byte) error {
	type unmarshaler CompanyPlanWithBillingSubView
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CompanyPlanWithBillingSubView(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CompanyPlanWithBillingSubView) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CompanyResponseData struct {
	CreatedAt     time.Time  `json:"created_at" url:"created_at"`
	EnvironmentID string     `json:"environment_id" url:"environment_id"`
	ID            string     `json:"id" url:"id"`
	LastSeenAt    *time.Time `json:"last_seen_at,omitempty" url:"last_seen_at,omitempty"`
	LogoURL       *string    `json:"logo_url,omitempty" url:"logo_url,omitempty"`
	Name          string     `json:"name" url:"name"`
	UpdatedAt     time.Time  `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CompanyResponseData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CompanyResponseData) UnmarshalJSON(data []byte) error {
	type embed CompanyResponseData
	var unmarshaler = struct {
		embed
		CreatedAt  *core.DateTime `json:"created_at"`
		LastSeenAt *core.DateTime `json:"last_seen_at,omitempty"`
		UpdatedAt  *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CompanyResponseData(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.LastSeenAt = unmarshaler.LastSeenAt.TimePtr()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CompanyResponseData) MarshalJSON() ([]byte, error) {
	type embed CompanyResponseData
	var marshaler = struct {
		embed
		CreatedAt  *core.DateTime `json:"created_at"`
		LastSeenAt *core.DateTime `json:"last_seen_at,omitempty"`
		UpdatedAt  *core.DateTime `json:"updated_at"`
	}{
		embed:      embed(*c),
		CreatedAt:  core.NewDateTime(c.CreatedAt),
		LastSeenAt: core.NewOptionalDateTime(c.LastSeenAt),
		UpdatedAt:  core.NewDateTime(c.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *CompanyResponseData) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CompanySubscriptionResponseData struct {
	Currency               string                                       `json:"currency" url:"currency"`
	CustomerExternalID     string                                       `json:"customer_external_id" url:"customer_external_id"`
	ExpiredAt              *time.Time                                   `json:"expired_at,omitempty" url:"expired_at,omitempty"`
	Interval               string                                       `json:"interval" url:"interval"`
	LatestInvoice          *InvoiceResponseData                         `json:"latest_invoice,omitempty" url:"latest_invoice,omitempty"`
	PaymentMethod          *PaymentMethodResponseData                   `json:"payment_method,omitempty" url:"payment_method,omitempty"`
	Products               []*BillingProductForSubscriptionResponseData `json:"products,omitempty" url:"products,omitempty"`
	Status                 string                                       `json:"status" url:"status"`
	SubscriptionExternalID string                                       `json:"subscription_external_id" url:"subscription_external_id"`
	TotalPrice             int                                          `json:"total_price" url:"total_price"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CompanySubscriptionResponseData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CompanySubscriptionResponseData) UnmarshalJSON(data []byte) error {
	type embed CompanySubscriptionResponseData
	var unmarshaler = struct {
		embed
		ExpiredAt *core.DateTime `json:"expired_at,omitempty"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CompanySubscriptionResponseData(unmarshaler.embed)
	c.ExpiredAt = unmarshaler.ExpiredAt.TimePtr()

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CompanySubscriptionResponseData) MarshalJSON() ([]byte, error) {
	type embed CompanySubscriptionResponseData
	var marshaler = struct {
		embed
		ExpiredAt *core.DateTime `json:"expired_at,omitempty"`
	}{
		embed:     embed(*c),
		ExpiredAt: core.NewOptionalDateTime(c.ExpiredAt),
	}
	return json.Marshal(marshaler)
}

func (c *CompanySubscriptionResponseData) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ComponentCapabilities struct {
	Checkout bool `json:"checkout" url:"checkout"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ComponentCapabilities) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ComponentCapabilities) UnmarshalJSON(data []byte) error {
	type unmarshaler ComponentCapabilities
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ComponentCapabilities(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ComponentCapabilities) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ComponentHydrateResponseData struct {
	ActiveAddOns    []*CompanyPlanDetailResponseData `json:"active_add_ons,omitempty" url:"active_add_ons,omitempty"`
	ActivePlans     []*CompanyPlanDetailResponseData `json:"active_plans,omitempty" url:"active_plans,omitempty"`
	Capabilities    *ComponentCapabilities           `json:"capabilities,omitempty" url:"capabilities,omitempty"`
	Company         *CompanyDetailResponseData       `json:"company,omitempty" url:"company,omitempty"`
	Component       *ComponentResponseData           `json:"component,omitempty" url:"component,omitempty"`
	FeatureUsage    *FeatureUsageDetailResponseData  `json:"feature_usage,omitempty" url:"feature_usage,omitempty"`
	StripeEmbed     *StripeEmbedInfo                 `json:"stripe_embed,omitempty" url:"stripe_embed,omitempty"`
	Subscription    *CompanySubscriptionResponseData `json:"subscription,omitempty" url:"subscription,omitempty"`
	UpcomingInvoice *InvoiceResponseData             `json:"upcoming_invoice,omitempty" url:"upcoming_invoice,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ComponentHydrateResponseData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ComponentHydrateResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler ComponentHydrateResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ComponentHydrateResponseData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ComponentHydrateResponseData) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The returned resource
type ComponentPreviewResponseData struct {
	ActiveAddOns    []*CompanyPlanDetailResponseData `json:"active_add_ons,omitempty" url:"active_add_ons,omitempty"`
	ActivePlans     []*CompanyPlanDetailResponseData `json:"active_plans,omitempty" url:"active_plans,omitempty"`
	Capabilities    *ComponentCapabilities           `json:"capabilities,omitempty" url:"capabilities,omitempty"`
	Company         *CompanyDetailResponseData       `json:"company,omitempty" url:"company,omitempty"`
	Component       *ComponentResponseData           `json:"component,omitempty" url:"component,omitempty"`
	FeatureUsage    *FeatureUsageDetailResponseData  `json:"feature_usage,omitempty" url:"feature_usage,omitempty"`
	Invoices        []*InvoiceResponseData           `json:"invoices,omitempty" url:"invoices,omitempty"`
	StripeEmbed     *StripeEmbedInfo                 `json:"stripe_embed,omitempty" url:"stripe_embed,omitempty"`
	Subscription    *CompanySubscriptionResponseData `json:"subscription,omitempty" url:"subscription,omitempty"`
	UpcomingInvoice *InvoiceResponseData             `json:"upcoming_invoice,omitempty" url:"upcoming_invoice,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ComponentPreviewResponseData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ComponentPreviewResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler ComponentPreviewResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ComponentPreviewResponseData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ComponentPreviewResponseData) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The updated resource
type ComponentResponseData struct {
	Ast       map[string]float64 `json:"ast,omitempty" url:"ast,omitempty"`
	CreatedAt time.Time          `json:"created_at" url:"created_at"`
	ID        string             `json:"id" url:"id"`
	Name      string             `json:"name" url:"name"`
	State     string             `json:"state" url:"state"`
	Type      string             `json:"type" url:"type"`
	UpdatedAt time.Time          `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ComponentResponseData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ComponentResponseData) UnmarshalJSON(data []byte) error {
	type embed ComponentResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = ComponentResponseData(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ComponentResponseData) MarshalJSON() ([]byte, error) {
	type embed ComponentResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*c),
		CreatedAt: core.NewDateTime(c.CreatedAt),
		UpdatedAt: core.NewDateTime(c.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *ComponentResponseData) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The created resource
type CountResponse struct {
	Count int `json:"count" url:"count"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CountResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CountResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateEventRequestBody struct {
	Body *EventBody `json:"body,omitempty" url:"body,omitempty"`
	// Either 'identify' or 'track'
	EventType CreateEventRequestBodyEventType `json:"event_type" url:"event_type"`
	// Optionally provide a timestamp at which the event was sent to Schematic
	SentAt *time.Time `json:"sent_at,omitempty" url:"sent_at,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateEventRequestBody) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateEventRequestBody) UnmarshalJSON(data []byte) error {
	type embed CreateEventRequestBody
	var unmarshaler = struct {
		embed
		SentAt *core.DateTime `json:"sent_at,omitempty"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CreateEventRequestBody(unmarshaler.embed)
	c.SentAt = unmarshaler.SentAt.TimePtr()

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateEventRequestBody) MarshalJSON() ([]byte, error) {
	type embed CreateEventRequestBody
	var marshaler = struct {
		embed
		SentAt *core.DateTime `json:"sent_at,omitempty"`
	}{
		embed:  embed(*c),
		SentAt: core.NewOptionalDateTime(c.SentAt),
	}
	return json.Marshal(marshaler)
}

func (c *CreateEventRequestBody) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Either 'identify' or 'track'
type CreateEventRequestBodyEventType string

const (
	CreateEventRequestBodyEventTypeIdentify  CreateEventRequestBodyEventType = "identify"
	CreateEventRequestBodyEventTypeTrack     CreateEventRequestBodyEventType = "track"
	CreateEventRequestBodyEventTypeFlagCheck CreateEventRequestBodyEventType = "flag_check"
)

func NewCreateEventRequestBodyEventTypeFromString(s string) (CreateEventRequestBodyEventType, error) {
	switch s {
	case "identify":
		return CreateEventRequestBodyEventTypeIdentify, nil
	case "track":
		return CreateEventRequestBodyEventTypeTrack, nil
	case "flag_check":
		return CreateEventRequestBodyEventTypeFlagCheck, nil
	}
	var t CreateEventRequestBodyEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CreateEventRequestBodyEventType) Ptr() *CreateEventRequestBodyEventType {
	return &c
}

type CreateFlagRequestBody struct {
	DefaultValue bool    `json:"default_value" url:"default_value"`
	Description  string  `json:"description" url:"description"`
	FeatureID    *string `json:"feature_id,omitempty" url:"feature_id,omitempty"`
	FlagType     string  `json:"flag_type" url:"flag_type"`
	Key          string  `json:"key" url:"key"`
	MaintainerID *string `json:"maintainer_id,omitempty" url:"maintainer_id,omitempty"`
	Name         string  `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateFlagRequestBody) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateFlagRequestBody) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateFlagRequestBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateFlagRequestBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateFlagRequestBody) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateOrUpdateConditionGroupRequestBody struct {
	Conditions []*CreateOrUpdateConditionRequestBody `json:"conditions,omitempty" url:"conditions,omitempty"`
	FlagID     *string                               `json:"flag_id,omitempty" url:"flag_id,omitempty"`
	ID         *string                               `json:"id,omitempty" url:"id,omitempty"`
	PlanID     *string                               `json:"plan_id,omitempty" url:"plan_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateOrUpdateConditionGroupRequestBody) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateOrUpdateConditionGroupRequestBody) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateOrUpdateConditionGroupRequestBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateOrUpdateConditionGroupRequestBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateOrUpdateConditionGroupRequestBody) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateOrUpdateConditionRequestBody struct {
	// Optionally provide a trait ID to compare a metric or trait value against instead of a value
	ComparisonTraitID *string                                         `json:"comparison_trait_id,omitempty" url:"comparison_trait_id,omitempty"`
	ConditionType     CreateOrUpdateConditionRequestBodyConditionType `json:"condition_type" url:"condition_type"`
	// Name of track event type used to measure this condition
	EventSubtype *string `json:"event_subtype,omitempty" url:"event_subtype,omitempty"`
	ID           *string `json:"id,omitempty" url:"id,omitempty"`
	// Period of time over which to measure the track event metric
	MetricPeriod *CreateOrUpdateConditionRequestBodyMetricPeriod `json:"metric_period,omitempty" url:"metric_period,omitempty"`
	// Value to compare the track event metric against
	MetricValue *int                                       `json:"metric_value,omitempty" url:"metric_value,omitempty"`
	Operator    CreateOrUpdateConditionRequestBodyOperator `json:"operator" url:"operator"`
	// List of resource IDs (companies, users, or plans) targeted by this condition
	ResourceIDs []string `json:"resource_ids,omitempty" url:"resource_ids,omitempty"`
	// ID of trait to use to measure this condition
	TraitID *string `json:"trait_id,omitempty" url:"trait_id,omitempty"`
	// Value to compare the trait value against
	TraitValue *string `json:"trait_value,omitempty" url:"trait_value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateOrUpdateConditionRequestBody) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateOrUpdateConditionRequestBody) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateOrUpdateConditionRequestBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateOrUpdateConditionRequestBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateOrUpdateConditionRequestBody) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateOrUpdateConditionRequestBodyConditionType string

const (
	CreateOrUpdateConditionRequestBodyConditionTypeCompany        CreateOrUpdateConditionRequestBodyConditionType = "company"
	CreateOrUpdateConditionRequestBodyConditionTypeMetric         CreateOrUpdateConditionRequestBodyConditionType = "metric"
	CreateOrUpdateConditionRequestBodyConditionTypeTrait          CreateOrUpdateConditionRequestBodyConditionType = "trait"
	CreateOrUpdateConditionRequestBodyConditionTypeUser           CreateOrUpdateConditionRequestBodyConditionType = "user"
	CreateOrUpdateConditionRequestBodyConditionTypePlan           CreateOrUpdateConditionRequestBodyConditionType = "plan"
	CreateOrUpdateConditionRequestBodyConditionTypeBillingProduct CreateOrUpdateConditionRequestBodyConditionType = "billing_product"
	CreateOrUpdateConditionRequestBodyConditionTypeCrmProduct     CreateOrUpdateConditionRequestBodyConditionType = "crm_product"
	CreateOrUpdateConditionRequestBodyConditionTypeBasePlan       CreateOrUpdateConditionRequestBodyConditionType = "base_plan"
)

func NewCreateOrUpdateConditionRequestBodyConditionTypeFromString(s string) (CreateOrUpdateConditionRequestBodyConditionType, error) {
	switch s {
	case "company":
		return CreateOrUpdateConditionRequestBodyConditionTypeCompany, nil
	case "metric":
		return CreateOrUpdateConditionRequestBodyConditionTypeMetric, nil
	case "trait":
		return CreateOrUpdateConditionRequestBodyConditionTypeTrait, nil
	case "user":
		return CreateOrUpdateConditionRequestBodyConditionTypeUser, nil
	case "plan":
		return CreateOrUpdateConditionRequestBodyConditionTypePlan, nil
	case "billing_product":
		return CreateOrUpdateConditionRequestBodyConditionTypeBillingProduct, nil
	case "crm_product":
		return CreateOrUpdateConditionRequestBodyConditionTypeCrmProduct, nil
	case "base_plan":
		return CreateOrUpdateConditionRequestBodyConditionTypeBasePlan, nil
	}
	var t CreateOrUpdateConditionRequestBodyConditionType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CreateOrUpdateConditionRequestBodyConditionType) Ptr() *CreateOrUpdateConditionRequestBodyConditionType {
	return &c
}

// Period of time over which to measure the track event metric
type CreateOrUpdateConditionRequestBodyMetricPeriod string

const (
	CreateOrUpdateConditionRequestBodyMetricPeriodBilling      CreateOrUpdateConditionRequestBodyMetricPeriod = "billing"
	CreateOrUpdateConditionRequestBodyMetricPeriodCurrentMonth CreateOrUpdateConditionRequestBodyMetricPeriod = "current_month"
	CreateOrUpdateConditionRequestBodyMetricPeriodCurrentWeek  CreateOrUpdateConditionRequestBodyMetricPeriod = "current_week"
	CreateOrUpdateConditionRequestBodyMetricPeriodCurrentDay   CreateOrUpdateConditionRequestBodyMetricPeriod = "current_day"
)

func NewCreateOrUpdateConditionRequestBodyMetricPeriodFromString(s string) (CreateOrUpdateConditionRequestBodyMetricPeriod, error) {
	switch s {
	case "billing":
		return CreateOrUpdateConditionRequestBodyMetricPeriodBilling, nil
	case "current_month":
		return CreateOrUpdateConditionRequestBodyMetricPeriodCurrentMonth, nil
	case "current_week":
		return CreateOrUpdateConditionRequestBodyMetricPeriodCurrentWeek, nil
	case "current_day":
		return CreateOrUpdateConditionRequestBodyMetricPeriodCurrentDay, nil
	}
	var t CreateOrUpdateConditionRequestBodyMetricPeriod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CreateOrUpdateConditionRequestBodyMetricPeriod) Ptr() *CreateOrUpdateConditionRequestBodyMetricPeriod {
	return &c
}

type CreateOrUpdateConditionRequestBodyOperator string

const (
	CreateOrUpdateConditionRequestBodyOperatorEq       CreateOrUpdateConditionRequestBodyOperator = "eq"
	CreateOrUpdateConditionRequestBodyOperatorNe       CreateOrUpdateConditionRequestBodyOperator = "ne"
	CreateOrUpdateConditionRequestBodyOperatorGt       CreateOrUpdateConditionRequestBodyOperator = "gt"
	CreateOrUpdateConditionRequestBodyOperatorGte      CreateOrUpdateConditionRequestBodyOperator = "gte"
	CreateOrUpdateConditionRequestBodyOperatorLt       CreateOrUpdateConditionRequestBodyOperator = "lt"
	CreateOrUpdateConditionRequestBodyOperatorLte      CreateOrUpdateConditionRequestBodyOperator = "lte"
	CreateOrUpdateConditionRequestBodyOperatorIsEmpty  CreateOrUpdateConditionRequestBodyOperator = "is_empty"
	CreateOrUpdateConditionRequestBodyOperatorNotEmpty CreateOrUpdateConditionRequestBodyOperator = "not_empty"
)

func NewCreateOrUpdateConditionRequestBodyOperatorFromString(s string) (CreateOrUpdateConditionRequestBodyOperator, error) {
	switch s {
	case "eq":
		return CreateOrUpdateConditionRequestBodyOperatorEq, nil
	case "ne":
		return CreateOrUpdateConditionRequestBodyOperatorNe, nil
	case "gt":
		return CreateOrUpdateConditionRequestBodyOperatorGt, nil
	case "gte":
		return CreateOrUpdateConditionRequestBodyOperatorGte, nil
	case "lt":
		return CreateOrUpdateConditionRequestBodyOperatorLt, nil
	case "lte":
		return CreateOrUpdateConditionRequestBodyOperatorLte, nil
	case "is_empty":
		return CreateOrUpdateConditionRequestBodyOperatorIsEmpty, nil
	case "not_empty":
		return CreateOrUpdateConditionRequestBodyOperatorNotEmpty, nil
	}
	var t CreateOrUpdateConditionRequestBodyOperator
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CreateOrUpdateConditionRequestBodyOperator) Ptr() *CreateOrUpdateConditionRequestBodyOperator {
	return &c
}

type CreateOrUpdateFlagRequestBody struct {
	DefaultValue bool    `json:"default_value" url:"default_value"`
	Description  string  `json:"description" url:"description"`
	FeatureID    *string `json:"feature_id,omitempty" url:"feature_id,omitempty"`
	FlagType     string  `json:"flag_type" url:"flag_type"`
	ID           *string `json:"id,omitempty" url:"id,omitempty"`
	Key          string  `json:"key" url:"key"`
	MaintainerID *string `json:"maintainer_id,omitempty" url:"maintainer_id,omitempty"`
	Name         string  `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateOrUpdateFlagRequestBody) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateOrUpdateFlagRequestBody) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateOrUpdateFlagRequestBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateOrUpdateFlagRequestBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateOrUpdateFlagRequestBody) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateOrUpdateRuleRequestBody struct {
	ConditionGroups []*CreateOrUpdateConditionGroupRequestBody `json:"condition_groups,omitempty" url:"condition_groups,omitempty"`
	Conditions      []*CreateOrUpdateConditionRequestBody      `json:"conditions,omitempty" url:"conditions,omitempty"`
	ID              *string                                    `json:"id,omitempty" url:"id,omitempty"`
	Name            string                                     `json:"name" url:"name"`
	Priority        int                                        `json:"priority" url:"priority"`
	RuleType        *CreateOrUpdateRuleRequestBodyRuleType     `json:"rule_type,omitempty" url:"rule_type,omitempty"`
	Value           bool                                       `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateOrUpdateRuleRequestBody) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateOrUpdateRuleRequestBody) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateOrUpdateRuleRequestBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateOrUpdateRuleRequestBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateOrUpdateRuleRequestBody) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateOrUpdateRuleRequestBodyRuleType string

const (
	CreateOrUpdateRuleRequestBodyRuleTypeGlobalOverride  CreateOrUpdateRuleRequestBodyRuleType = "global_override"
	CreateOrUpdateRuleRequestBodyRuleTypeCompanyOverride CreateOrUpdateRuleRequestBodyRuleType = "company_override"
	CreateOrUpdateRuleRequestBodyRuleTypePlanEntitlement CreateOrUpdateRuleRequestBodyRuleType = "plan_entitlement"
	CreateOrUpdateRuleRequestBodyRuleTypeStandard        CreateOrUpdateRuleRequestBodyRuleType = "standard"
	CreateOrUpdateRuleRequestBodyRuleTypeDefault         CreateOrUpdateRuleRequestBodyRuleType = "default"
	CreateOrUpdateRuleRequestBodyRuleTypePlanAudience    CreateOrUpdateRuleRequestBodyRuleType = "plan_audience"
)

func NewCreateOrUpdateRuleRequestBodyRuleTypeFromString(s string) (CreateOrUpdateRuleRequestBodyRuleType, error) {
	switch s {
	case "global_override":
		return CreateOrUpdateRuleRequestBodyRuleTypeGlobalOverride, nil
	case "company_override":
		return CreateOrUpdateRuleRequestBodyRuleTypeCompanyOverride, nil
	case "plan_entitlement":
		return CreateOrUpdateRuleRequestBodyRuleTypePlanEntitlement, nil
	case "standard":
		return CreateOrUpdateRuleRequestBodyRuleTypeStandard, nil
	case "default":
		return CreateOrUpdateRuleRequestBodyRuleTypeDefault, nil
	case "plan_audience":
		return CreateOrUpdateRuleRequestBodyRuleTypePlanAudience, nil
	}
	var t CreateOrUpdateRuleRequestBodyRuleType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CreateOrUpdateRuleRequestBodyRuleType) Ptr() *CreateOrUpdateRuleRequestBodyRuleType {
	return &c
}

type CreateReqCommon struct {
	FeatureID    string                       `json:"feature_id" url:"feature_id"`
	MetricPeriod *CreateReqCommonMetricPeriod `json:"metric_period,omitempty" url:"metric_period,omitempty"`
	ValueBool    *bool                        `json:"value_bool,omitempty" url:"value_bool,omitempty"`
	ValueNumeric *int                         `json:"value_numeric,omitempty" url:"value_numeric,omitempty"`
	ValueTraitID *string                      `json:"value_trait_id,omitempty" url:"value_trait_id,omitempty"`
	ValueType    CreateReqCommonValueType     `json:"value_type" url:"value_type"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateReqCommon) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateReqCommon) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateReqCommon
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateReqCommon(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateReqCommon) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateReqCommonMetricPeriod string

const (
	CreateReqCommonMetricPeriodBilling      CreateReqCommonMetricPeriod = "billing"
	CreateReqCommonMetricPeriodCurrentMonth CreateReqCommonMetricPeriod = "current_month"
	CreateReqCommonMetricPeriodCurrentWeek  CreateReqCommonMetricPeriod = "current_week"
	CreateReqCommonMetricPeriodCurrentDay   CreateReqCommonMetricPeriod = "current_day"
)

func NewCreateReqCommonMetricPeriodFromString(s string) (CreateReqCommonMetricPeriod, error) {
	switch s {
	case "billing":
		return CreateReqCommonMetricPeriodBilling, nil
	case "current_month":
		return CreateReqCommonMetricPeriodCurrentMonth, nil
	case "current_week":
		return CreateReqCommonMetricPeriodCurrentWeek, nil
	case "current_day":
		return CreateReqCommonMetricPeriodCurrentDay, nil
	}
	var t CreateReqCommonMetricPeriod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CreateReqCommonMetricPeriod) Ptr() *CreateReqCommonMetricPeriod {
	return &c
}

type CreateReqCommonValueType string

const (
	CreateReqCommonValueTypeBoolean   CreateReqCommonValueType = "boolean"
	CreateReqCommonValueTypeNumeric   CreateReqCommonValueType = "numeric"
	CreateReqCommonValueTypeTrait     CreateReqCommonValueType = "trait"
	CreateReqCommonValueTypeUnlimited CreateReqCommonValueType = "unlimited"
)

func NewCreateReqCommonValueTypeFromString(s string) (CreateReqCommonValueType, error) {
	switch s {
	case "boolean":
		return CreateReqCommonValueTypeBoolean, nil
	case "numeric":
		return CreateReqCommonValueTypeNumeric, nil
	case "trait":
		return CreateReqCommonValueTypeTrait, nil
	case "unlimited":
		return CreateReqCommonValueTypeUnlimited, nil
	}
	var t CreateReqCommonValueType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CreateReqCommonValueType) Ptr() *CreateReqCommonValueType {
	return &c
}

type CrmDealLineItem struct {
	BillingFrequency   string    `json:"billing_frequency" url:"billing_frequency"`
	CreatedAt          time.Time `json:"created_at" url:"created_at"`
	Currency           string    `json:"currency" url:"currency"`
	Description        string    `json:"description" url:"description"`
	DiscountPercentage *Decimal  `json:"discount_percentage,omitempty" url:"discount_percentage,omitempty"`
	ID                 string    `json:"id" url:"id"`
	Name               string    `json:"name" url:"name"`
	Price              float64   `json:"price" url:"price"`
	Quantity           int       `json:"quantity" url:"quantity"`
	TermMonth          *int      `json:"term_month,omitempty" url:"term_month,omitempty"`
	TotalDiscount      *Decimal  `json:"total_discount,omitempty" url:"total_discount,omitempty"`
	UpdatedAt          time.Time `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CrmDealLineItem) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CrmDealLineItem) UnmarshalJSON(data []byte) error {
	type embed CrmDealLineItem
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CrmDealLineItem(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CrmDealLineItem) MarshalJSON() ([]byte, error) {
	type embed CrmDealLineItem
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*c),
		CreatedAt: core.NewDateTime(c.CreatedAt),
		UpdatedAt: core.NewDateTime(c.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *CrmDealLineItem) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The created resource
type CrmDealResponseData struct {
	AccountID         string    `json:"account_id" url:"account_id"`
	Arr               string    `json:"arr" url:"arr"`
	CompanyExternalID *string   `json:"company_external_id,omitempty" url:"company_external_id,omitempty"`
	CreatedAt         time.Time `json:"created_at" url:"created_at"`
	DealExternalID    string    `json:"deal_external_id" url:"deal_external_id"`
	DealID            string    `json:"deal_id" url:"deal_id"`
	EnvironmentID     string    `json:"environment_id" url:"environment_id"`
	Mrr               string    `json:"mrr" url:"mrr"`
	Name              *string   `json:"name,omitempty" url:"name,omitempty"`
	ProductExternalID *string   `json:"product_external_id,omitempty" url:"product_external_id,omitempty"`
	UpdatedAt         time.Time `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CrmDealResponseData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CrmDealResponseData) UnmarshalJSON(data []byte) error {
	type embed CrmDealResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CrmDealResponseData(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CrmDealResponseData) MarshalJSON() ([]byte, error) {
	type embed CrmDealResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*c),
		CreatedAt: core.NewDateTime(c.CreatedAt),
		UpdatedAt: core.NewDateTime(c.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *CrmDealResponseData) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The created resource
type CrmLineItemResponseData struct {
	AccountID         string    `json:"account_id" url:"account_id"`
	CreatedAt         time.Time `json:"created_at" url:"created_at"`
	DealID            *string   `json:"deal_id,omitempty" url:"deal_id,omitempty"`
	EnvironmentID     string    `json:"environment_id" url:"environment_id"`
	ProductExternalID *string   `json:"product_external_id,omitempty" url:"product_external_id,omitempty"`
	UpdatedAt         time.Time `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CrmLineItemResponseData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CrmLineItemResponseData) UnmarshalJSON(data []byte) error {
	type embed CrmLineItemResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CrmLineItemResponseData(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CrmLineItemResponseData) MarshalJSON() ([]byte, error) {
	type embed CrmLineItemResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*c),
		CreatedAt: core.NewDateTime(c.CreatedAt),
		UpdatedAt: core.NewDateTime(c.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *CrmLineItemResponseData) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The created resource
type CrmProductResponseData struct {
	AccountID     string    `json:"account_id" url:"account_id"`
	CreatedAt     time.Time `json:"created_at" url:"created_at"`
	Currency      string    `json:"currency" url:"currency"`
	EnvironmentID string    `json:"environment_id" url:"environment_id"`
	ExternalID    string    `json:"external_id" url:"external_id"`
	Name          string    `json:"name" url:"name"`
	Price         string    `json:"price" url:"price"`
	ProductID     string    `json:"product_id" url:"product_id"`
	Quantity      float64   `json:"quantity" url:"quantity"`
	UpdatedAt     time.Time `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CrmProductResponseData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CrmProductResponseData) UnmarshalJSON(data []byte) error {
	type embed CrmProductResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CrmProductResponseData(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CrmProductResponseData) MarshalJSON() ([]byte, error) {
	type embed CrmProductResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*c),
		CreatedAt: core.NewDateTime(c.CreatedAt),
		UpdatedAt: core.NewDateTime(c.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (c *CrmProductResponseData) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type Decimal = map[string]interface{}

type DeleteResponse struct {
	// Whether the delete was successful
	Deleted *bool `json:"deleted,omitempty" url:"deleted,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DeleteResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type EntityKeyDefinitionResponseData struct {
	CreatedAt  time.Time `json:"created_at" url:"created_at"`
	EntityType string    `json:"entity_type" url:"entity_type"`
	ID         string    `json:"id" url:"id"`
	Key        string    `json:"key" url:"key"`
	UpdatedAt  time.Time `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *EntityKeyDefinitionResponseData) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityKeyDefinitionResponseData) UnmarshalJSON(data []byte) error {
	type embed EntityKeyDefinitionResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = EntityKeyDefinitionResponseData(unmarshaler.embed)
	e.CreatedAt = unmarshaler.CreatedAt.Time()
	e.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityKeyDefinitionResponseData) MarshalJSON() ([]byte, error) {
	type embed EntityKeyDefinitionResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*e),
		CreatedAt: core.NewDateTime(e.CreatedAt),
		UpdatedAt: core.NewDateTime(e.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (e *EntityKeyDefinitionResponseData) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntityKeyDetailResponseData struct {
	CreatedAt     time.Time                        `json:"created_at" url:"created_at"`
	Definition    *EntityKeyDefinitionResponseData `json:"definition,omitempty" url:"definition,omitempty"`
	DefinitionID  string                           `json:"definition_id" url:"definition_id"`
	EntityID      string                           `json:"entity_id" url:"entity_id"`
	EntityType    string                           `json:"entity_type" url:"entity_type"`
	EnvironmentID string                           `json:"environment_id" url:"environment_id"`
	ID            string                           `json:"id" url:"id"`
	Key           string                           `json:"key" url:"key"`
	UpdatedAt     time.Time                        `json:"updated_at" url:"updated_at"`
	Value         string                           `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *EntityKeyDetailResponseData) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityKeyDetailResponseData) UnmarshalJSON(data []byte) error {
	type embed EntityKeyDetailResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = EntityKeyDetailResponseData(unmarshaler.embed)
	e.CreatedAt = unmarshaler.CreatedAt.Time()
	e.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityKeyDetailResponseData) MarshalJSON() ([]byte, error) {
	type embed EntityKeyDetailResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*e),
		CreatedAt: core.NewDateTime(e.CreatedAt),
		UpdatedAt: core.NewDateTime(e.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (e *EntityKeyDetailResponseData) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntityKeyResponseData struct {
	CreatedAt     time.Time `json:"created_at" url:"created_at"`
	DefinitionID  string    `json:"definition_id" url:"definition_id"`
	EntityID      string    `json:"entity_id" url:"entity_id"`
	EntityType    string    `json:"entity_type" url:"entity_type"`
	EnvironmentID string    `json:"environment_id" url:"environment_id"`
	ID            string    `json:"id" url:"id"`
	Key           string    `json:"key" url:"key"`
	UpdatedAt     time.Time `json:"updated_at" url:"updated_at"`
	Value         string    `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *EntityKeyResponseData) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityKeyResponseData) UnmarshalJSON(data []byte) error {
	type embed EntityKeyResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = EntityKeyResponseData(unmarshaler.embed)
	e.CreatedAt = unmarshaler.CreatedAt.Time()
	e.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityKeyResponseData) MarshalJSON() ([]byte, error) {
	type embed EntityKeyResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*e),
		CreatedAt: core.NewDateTime(e.CreatedAt),
		UpdatedAt: core.NewDateTime(e.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (e *EntityKeyResponseData) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntityTraitDefinitionResponseData struct {
	CreatedAt   time.Time `json:"created_at" url:"created_at"`
	DisplayName string    `json:"display_name" url:"display_name"`
	EntityType  string    `json:"entity_type" url:"entity_type"`
	Hierarchy   []string  `json:"hierarchy,omitempty" url:"hierarchy,omitempty"`
	ID          string    `json:"id" url:"id"`
	TraitType   string    `json:"trait_type" url:"trait_type"`
	UpdatedAt   time.Time `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *EntityTraitDefinitionResponseData) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityTraitDefinitionResponseData) UnmarshalJSON(data []byte) error {
	type embed EntityTraitDefinitionResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = EntityTraitDefinitionResponseData(unmarshaler.embed)
	e.CreatedAt = unmarshaler.CreatedAt.Time()
	e.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityTraitDefinitionResponseData) MarshalJSON() ([]byte, error) {
	type embed EntityTraitDefinitionResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*e),
		CreatedAt: core.NewDateTime(e.CreatedAt),
		UpdatedAt: core.NewDateTime(e.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (e *EntityTraitDefinitionResponseData) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntityTraitDetailResponseData struct {
	CreatedAt     time.Time                          `json:"created_at" url:"created_at"`
	Definition    *EntityTraitDefinitionResponseData `json:"definition,omitempty" url:"definition,omitempty"`
	DefinitionID  string                             `json:"definition_id" url:"definition_id"`
	EnvironmentID string                             `json:"environment_id" url:"environment_id"`
	ID            string                             `json:"id" url:"id"`
	UpdatedAt     time.Time                          `json:"updated_at" url:"updated_at"`
	Value         string                             `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *EntityTraitDetailResponseData) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityTraitDetailResponseData) UnmarshalJSON(data []byte) error {
	type embed EntityTraitDetailResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = EntityTraitDetailResponseData(unmarshaler.embed)
	e.CreatedAt = unmarshaler.CreatedAt.Time()
	e.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityTraitDetailResponseData) MarshalJSON() ([]byte, error) {
	type embed EntityTraitDetailResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*e),
		CreatedAt: core.NewDateTime(e.CreatedAt),
		UpdatedAt: core.NewDateTime(e.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (e *EntityTraitDetailResponseData) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntityTraitResponseData struct {
	CreatedAt     time.Time `json:"created_at" url:"created_at"`
	DefinitionID  string    `json:"definition_id" url:"definition_id"`
	EnvironmentID string    `json:"environment_id" url:"environment_id"`
	ID            string    `json:"id" url:"id"`
	UpdatedAt     time.Time `json:"updated_at" url:"updated_at"`
	Value         string    `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *EntityTraitResponseData) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityTraitResponseData) UnmarshalJSON(data []byte) error {
	type embed EntityTraitResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = EntityTraitResponseData(unmarshaler.embed)
	e.CreatedAt = unmarshaler.CreatedAt.Time()
	e.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityTraitResponseData) MarshalJSON() ([]byte, error) {
	type embed EntityTraitResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*e),
		CreatedAt: core.NewDateTime(e.CreatedAt),
		UpdatedAt: core.NewDateTime(e.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (e *EntityTraitResponseData) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EntityTraitValue struct {
	DefinitionID string `json:"definition_id" url:"definition_id"`
	Value        string `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *EntityTraitValue) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityTraitValue) UnmarshalJSON(data []byte) error {
	type unmarshaler EntityTraitValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntityTraitValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityTraitValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// The created resource
type EnvironmentDetailResponseData struct {
	APIKeys         []*APIKeyResponseData `json:"api_keys,omitempty" url:"api_keys,omitempty"`
	CreatedAt       time.Time             `json:"created_at" url:"created_at"`
	EnvironmentType string                `json:"environment_type" url:"environment_type"`
	ID              string                `json:"id" url:"id"`
	Name            string                `json:"name" url:"name"`
	UpdatedAt       time.Time             `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *EnvironmentDetailResponseData) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EnvironmentDetailResponseData) UnmarshalJSON(data []byte) error {
	type embed EnvironmentDetailResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = EnvironmentDetailResponseData(unmarshaler.embed)
	e.CreatedAt = unmarshaler.CreatedAt.Time()
	e.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EnvironmentDetailResponseData) MarshalJSON() ([]byte, error) {
	type embed EnvironmentDetailResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*e),
		CreatedAt: core.NewDateTime(e.CreatedAt),
		UpdatedAt: core.NewDateTime(e.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (e *EnvironmentDetailResponseData) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// The updated resource
type EnvironmentResponseData struct {
	CreatedAt       time.Time `json:"created_at" url:"created_at"`
	EnvironmentType string    `json:"environment_type" url:"environment_type"`
	ID              string    `json:"id" url:"id"`
	Name            string    `json:"name" url:"name"`
	UpdatedAt       time.Time `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *EnvironmentResponseData) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EnvironmentResponseData) UnmarshalJSON(data []byte) error {
	type embed EnvironmentResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = EnvironmentResponseData(unmarshaler.embed)
	e.CreatedAt = unmarshaler.CreatedAt.Time()
	e.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EnvironmentResponseData) MarshalJSON() ([]byte, error) {
	type embed EnvironmentResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*e),
		CreatedAt: core.NewDateTime(e.CreatedAt),
		UpdatedAt: core.NewDateTime(e.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (e *EnvironmentResponseData) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EventBody struct {
	EventBodyTrack     *EventBodyTrack
	EventBodyFlagCheck *EventBodyFlagCheck
	EventBodyIdentify  *EventBodyIdentify
}

func (e *EventBody) UnmarshalJSON(data []byte) error {
	valueEventBodyTrack := new(EventBodyTrack)
	if err := json.Unmarshal(data, &valueEventBodyTrack); err == nil {
		e.EventBodyTrack = valueEventBodyTrack
		return nil
	}
	valueEventBodyFlagCheck := new(EventBodyFlagCheck)
	if err := json.Unmarshal(data, &valueEventBodyFlagCheck); err == nil {
		e.EventBodyFlagCheck = valueEventBodyFlagCheck
		return nil
	}
	valueEventBodyIdentify := new(EventBodyIdentify)
	if err := json.Unmarshal(data, &valueEventBodyIdentify); err == nil {
		e.EventBodyIdentify = valueEventBodyIdentify
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EventBody) MarshalJSON() ([]byte, error) {
	if e.EventBodyTrack != nil {
		return json.Marshal(e.EventBodyTrack)
	}
	if e.EventBodyFlagCheck != nil {
		return json.Marshal(e.EventBodyFlagCheck)
	}
	if e.EventBodyIdentify != nil {
		return json.Marshal(e.EventBodyIdentify)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EventBodyVisitor interface {
	VisitEventBodyTrack(*EventBodyTrack) error
	VisitEventBodyFlagCheck(*EventBodyFlagCheck) error
	VisitEventBodyIdentify(*EventBodyIdentify) error
}

func (e *EventBody) Accept(visitor EventBodyVisitor) error {
	if e.EventBodyTrack != nil {
		return visitor.VisitEventBodyTrack(e.EventBodyTrack)
	}
	if e.EventBodyFlagCheck != nil {
		return visitor.VisitEventBodyFlagCheck(e.EventBodyFlagCheck)
	}
	if e.EventBodyIdentify != nil {
		return visitor.VisitEventBodyIdentify(e.EventBodyIdentify)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", e)
}

type EventBodyFlagCheck struct {
	// Schematic company ID (starting with 'comp\_') of the company evaluated, if any
	CompanyID *string `json:"company_id,omitempty" url:"company_id,omitempty"`
	// Report an error that occurred during the flag check
	Error *string `json:"error,omitempty" url:"error,omitempty"`
	// Schematic flag ID (starting with 'flag\_') for the flag matching the key, if any
	FlagID *string `json:"flag_id,omitempty" url:"flag_id,omitempty"`
	// The key of the flag being checked
	FlagKey string `json:"flag_key" url:"flag_key"`
	// The reason why the value was returned
	Reason string `json:"reason" url:"reason"`
	// Key-value pairs used to to identify company for which the flag was checked
	ReqCompany map[string]string `json:"req_company,omitempty" url:"req_company,omitempty"`
	// Key-value pairs used to to identify user for which the flag was checked
	ReqUser map[string]string `json:"req_user,omitempty" url:"req_user,omitempty"`
	// Schematic rule ID (starting with 'rule\_') of the rule that matched for the flag, if any
	RuleID *string `json:"rule_id,omitempty" url:"rule_id,omitempty"`
	// Schematic user ID (starting with 'user\_') of the user evaluated, if any
	UserID *string `json:"user_id,omitempty" url:"user_id,omitempty"`
	// The value of the flag for the given company and/or user
	Value bool `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *EventBodyFlagCheck) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EventBodyFlagCheck) UnmarshalJSON(data []byte) error {
	type unmarshaler EventBodyFlagCheck
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EventBodyFlagCheck(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EventBodyFlagCheck) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EventBodyIdentify struct {
	// Information about the company associated with the user; required only if it is a new user
	Company *EventBodyIdentifyCompany `json:"company,omitempty" url:"company,omitempty"`
	// Key-value pairs to identify the user
	Keys map[string]string `json:"keys,omitempty" url:"keys,omitempty"`
	// The display name of the user being identified; required only if it is a new user
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// A map of trait names to trait values
	Traits map[string]interface{} `json:"traits,omitempty" url:"traits,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *EventBodyIdentify) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EventBodyIdentify) UnmarshalJSON(data []byte) error {
	type unmarshaler EventBodyIdentify
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EventBodyIdentify(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EventBodyIdentify) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// Information about the company associated with the user; required only if it is a new user
type EventBodyIdentifyCompany struct {
	// Key-value pairs to identify the company
	Keys map[string]string `json:"keys,omitempty" url:"keys,omitempty"`
	// The display name of the company; required only if it is a new company
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// A map of trait names to trait values
	Traits map[string]interface{} `json:"traits,omitempty" url:"traits,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *EventBodyIdentifyCompany) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EventBodyIdentifyCompany) UnmarshalJSON(data []byte) error {
	type unmarshaler EventBodyIdentifyCompany
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EventBodyIdentifyCompany(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EventBodyIdentifyCompany) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EventBodyTrack struct {
	// Key-value pairs to identify company associated with track event
	Company map[string]string `json:"company,omitempty" url:"company,omitempty"`
	// The name of the type of track event
	Event string `json:"event" url:"event"`
	// A map of trait names to trait values
	Traits map[string]interface{} `json:"traits,omitempty" url:"traits,omitempty"`
	// Key-value pairs to identify user associated with track event
	User map[string]string `json:"user,omitempty" url:"user,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *EventBodyTrack) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EventBodyTrack) UnmarshalJSON(data []byte) error {
	type unmarshaler EventBodyTrack
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EventBodyTrack(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EventBodyTrack) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EventDetailResponseData struct {
	APIKey        *string                `json:"api_key,omitempty" url:"api_key,omitempty"`
	Body          map[string]interface{} `json:"body,omitempty" url:"body,omitempty"`
	BodyPreview   string                 `json:"body_preview" url:"body_preview"`
	CapturedAt    time.Time              `json:"captured_at" url:"captured_at"`
	Company       *PreviewObject         `json:"company,omitempty" url:"company,omitempty"`
	CompanyID     *string                `json:"company_id,omitempty" url:"company_id,omitempty"`
	EnrichedAt    *time.Time             `json:"enriched_at,omitempty" url:"enriched_at,omitempty"`
	EnvironmentID *string                `json:"environment_id,omitempty" url:"environment_id,omitempty"`
	ErrorMessage  *string                `json:"error_message,omitempty" url:"error_message,omitempty"`
	FeatureIDs    []string               `json:"feature_ids,omitempty" url:"feature_ids,omitempty"`
	Features      []*PreviewObject       `json:"features,omitempty" url:"features,omitempty"`
	ID            string                 `json:"id" url:"id"`
	LoadedAt      *time.Time             `json:"loaded_at,omitempty" url:"loaded_at,omitempty"`
	ProcessedAt   *time.Time             `json:"processed_at,omitempty" url:"processed_at,omitempty"`
	SentAt        *time.Time             `json:"sent_at,omitempty" url:"sent_at,omitempty"`
	Status        string                 `json:"status" url:"status"`
	Subtype       *string                `json:"subtype,omitempty" url:"subtype,omitempty"`
	Type          string                 `json:"type" url:"type"`
	UpdatedAt     time.Time              `json:"updated_at" url:"updated_at"`
	User          *PreviewObject         `json:"user,omitempty" url:"user,omitempty"`
	UserID        *string                `json:"user_id,omitempty" url:"user_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *EventDetailResponseData) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EventDetailResponseData) UnmarshalJSON(data []byte) error {
	type embed EventDetailResponseData
	var unmarshaler = struct {
		embed
		CapturedAt  *core.DateTime `json:"captured_at"`
		EnrichedAt  *core.DateTime `json:"enriched_at,omitempty"`
		LoadedAt    *core.DateTime `json:"loaded_at,omitempty"`
		ProcessedAt *core.DateTime `json:"processed_at,omitempty"`
		SentAt      *core.DateTime `json:"sent_at,omitempty"`
		UpdatedAt   *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = EventDetailResponseData(unmarshaler.embed)
	e.CapturedAt = unmarshaler.CapturedAt.Time()
	e.EnrichedAt = unmarshaler.EnrichedAt.TimePtr()
	e.LoadedAt = unmarshaler.LoadedAt.TimePtr()
	e.ProcessedAt = unmarshaler.ProcessedAt.TimePtr()
	e.SentAt = unmarshaler.SentAt.TimePtr()
	e.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EventDetailResponseData) MarshalJSON() ([]byte, error) {
	type embed EventDetailResponseData
	var marshaler = struct {
		embed
		CapturedAt  *core.DateTime `json:"captured_at"`
		EnrichedAt  *core.DateTime `json:"enriched_at,omitempty"`
		LoadedAt    *core.DateTime `json:"loaded_at,omitempty"`
		ProcessedAt *core.DateTime `json:"processed_at,omitempty"`
		SentAt      *core.DateTime `json:"sent_at,omitempty"`
		UpdatedAt   *core.DateTime `json:"updated_at"`
	}{
		embed:       embed(*e),
		CapturedAt:  core.NewDateTime(e.CapturedAt),
		EnrichedAt:  core.NewOptionalDateTime(e.EnrichedAt),
		LoadedAt:    core.NewOptionalDateTime(e.LoadedAt),
		ProcessedAt: core.NewOptionalDateTime(e.ProcessedAt),
		SentAt:      core.NewOptionalDateTime(e.SentAt),
		UpdatedAt:   core.NewDateTime(e.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (e *EventDetailResponseData) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EventResponseData struct {
	APIKey        *string                `json:"api_key,omitempty" url:"api_key,omitempty"`
	Body          map[string]interface{} `json:"body,omitempty" url:"body,omitempty"`
	BodyPreview   string                 `json:"body_preview" url:"body_preview"`
	CapturedAt    time.Time              `json:"captured_at" url:"captured_at"`
	CompanyID     *string                `json:"company_id,omitempty" url:"company_id,omitempty"`
	EnrichedAt    *time.Time             `json:"enriched_at,omitempty" url:"enriched_at,omitempty"`
	EnvironmentID *string                `json:"environment_id,omitempty" url:"environment_id,omitempty"`
	ErrorMessage  *string                `json:"error_message,omitempty" url:"error_message,omitempty"`
	FeatureIDs    []string               `json:"feature_ids,omitempty" url:"feature_ids,omitempty"`
	ID            string                 `json:"id" url:"id"`
	LoadedAt      *time.Time             `json:"loaded_at,omitempty" url:"loaded_at,omitempty"`
	ProcessedAt   *time.Time             `json:"processed_at,omitempty" url:"processed_at,omitempty"`
	SentAt        *time.Time             `json:"sent_at,omitempty" url:"sent_at,omitempty"`
	Status        string                 `json:"status" url:"status"`
	Subtype       *string                `json:"subtype,omitempty" url:"subtype,omitempty"`
	Type          string                 `json:"type" url:"type"`
	UpdatedAt     time.Time              `json:"updated_at" url:"updated_at"`
	UserID        *string                `json:"user_id,omitempty" url:"user_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *EventResponseData) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EventResponseData) UnmarshalJSON(data []byte) error {
	type embed EventResponseData
	var unmarshaler = struct {
		embed
		CapturedAt  *core.DateTime `json:"captured_at"`
		EnrichedAt  *core.DateTime `json:"enriched_at,omitempty"`
		LoadedAt    *core.DateTime `json:"loaded_at,omitempty"`
		ProcessedAt *core.DateTime `json:"processed_at,omitempty"`
		SentAt      *core.DateTime `json:"sent_at,omitempty"`
		UpdatedAt   *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = EventResponseData(unmarshaler.embed)
	e.CapturedAt = unmarshaler.CapturedAt.Time()
	e.EnrichedAt = unmarshaler.EnrichedAt.TimePtr()
	e.LoadedAt = unmarshaler.LoadedAt.TimePtr()
	e.ProcessedAt = unmarshaler.ProcessedAt.TimePtr()
	e.SentAt = unmarshaler.SentAt.TimePtr()
	e.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EventResponseData) MarshalJSON() ([]byte, error) {
	type embed EventResponseData
	var marshaler = struct {
		embed
		CapturedAt  *core.DateTime `json:"captured_at"`
		EnrichedAt  *core.DateTime `json:"enriched_at,omitempty"`
		LoadedAt    *core.DateTime `json:"loaded_at,omitempty"`
		ProcessedAt *core.DateTime `json:"processed_at,omitempty"`
		SentAt      *core.DateTime `json:"sent_at,omitempty"`
		UpdatedAt   *core.DateTime `json:"updated_at"`
	}{
		embed:       embed(*e),
		CapturedAt:  core.NewDateTime(e.CapturedAt),
		EnrichedAt:  core.NewOptionalDateTime(e.EnrichedAt),
		LoadedAt:    core.NewOptionalDateTime(e.LoadedAt),
		ProcessedAt: core.NewOptionalDateTime(e.ProcessedAt),
		SentAt:      core.NewOptionalDateTime(e.SentAt),
		UpdatedAt:   core.NewDateTime(e.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (e *EventResponseData) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EventSummaryResponseData struct {
	CompanyCount  int        `json:"company_count" url:"company_count"`
	EnvironmentID string     `json:"environment_id" url:"environment_id"`
	EventCount    int        `json:"event_count" url:"event_count"`
	EventSubtype  string     `json:"event_subtype" url:"event_subtype"`
	LastSeenAt    *time.Time `json:"last_seen_at,omitempty" url:"last_seen_at,omitempty"`
	UserCount     int        `json:"user_count" url:"user_count"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *EventSummaryResponseData) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EventSummaryResponseData) UnmarshalJSON(data []byte) error {
	type embed EventSummaryResponseData
	var unmarshaler = struct {
		embed
		LastSeenAt *core.DateTime `json:"last_seen_at,omitempty"`
	}{
		embed: embed(*e),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*e = EventSummaryResponseData(unmarshaler.embed)
	e.LastSeenAt = unmarshaler.LastSeenAt.TimePtr()

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EventSummaryResponseData) MarshalJSON() ([]byte, error) {
	type embed EventSummaryResponseData
	var marshaler = struct {
		embed
		LastSeenAt *core.DateTime `json:"last_seen_at,omitempty"`
	}{
		embed:      embed(*e),
		LastSeenAt: core.NewOptionalDateTime(e.LastSeenAt),
	}
	return json.Marshal(marshaler)
}

func (e *EventSummaryResponseData) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type FeatureCompanyResponseData struct {
	// Whether further usage is permitted.
	Access bool `json:"access" url:"access"`
	// The maximum amount of usage that is permitted; a null value indicates that unlimited usage is permitted.
	Allocation *int `json:"allocation,omitempty" url:"allocation,omitempty"`
	// The type of allocation that is being used.
	AllocationType  FeatureCompanyResponseDataAllocationType `json:"allocation_type" url:"allocation_type"`
	Company         *CompanyDetailResponseData               `json:"company,omitempty" url:"company,omitempty"`
	EntitlementID   string                                   `json:"entitlement_id" url:"entitlement_id"`
	EntitlementType string                                   `json:"entitlement_type" url:"entitlement_type"`
	Feature         *FeatureDetailResponseData               `json:"feature,omitempty" url:"feature,omitempty"`
	// The period over which usage is measured.
	Period *string           `json:"period,omitempty" url:"period,omitempty"`
	Plan   *PlanResponseData `json:"plan,omitempty" url:"plan,omitempty"`
	// The amount of usage that has been consumed; a null value indicates that usage is not being measured.
	Usage *int `json:"usage,omitempty" url:"usage,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FeatureCompanyResponseData) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FeatureCompanyResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler FeatureCompanyResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FeatureCompanyResponseData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FeatureCompanyResponseData) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// The type of allocation that is being used.
type FeatureCompanyResponseDataAllocationType string

const (
	FeatureCompanyResponseDataAllocationTypeBoolean   FeatureCompanyResponseDataAllocationType = "boolean"
	FeatureCompanyResponseDataAllocationTypeNumeric   FeatureCompanyResponseDataAllocationType = "numeric"
	FeatureCompanyResponseDataAllocationTypeTrait     FeatureCompanyResponseDataAllocationType = "trait"
	FeatureCompanyResponseDataAllocationTypeUnlimited FeatureCompanyResponseDataAllocationType = "unlimited"
)

func NewFeatureCompanyResponseDataAllocationTypeFromString(s string) (FeatureCompanyResponseDataAllocationType, error) {
	switch s {
	case "boolean":
		return FeatureCompanyResponseDataAllocationTypeBoolean, nil
	case "numeric":
		return FeatureCompanyResponseDataAllocationTypeNumeric, nil
	case "trait":
		return FeatureCompanyResponseDataAllocationTypeTrait, nil
	case "unlimited":
		return FeatureCompanyResponseDataAllocationTypeUnlimited, nil
	}
	var t FeatureCompanyResponseDataAllocationType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FeatureCompanyResponseDataAllocationType) Ptr() *FeatureCompanyResponseDataAllocationType {
	return &f
}

type FeatureCompanyUserResponseData struct {
	// Whether further usage is permitted.
	Access bool `json:"access" url:"access"`
	// The maximum amount of usage that is permitted; a null value indicates that unlimited usage is permitted.
	Allocation *int `json:"allocation,omitempty" url:"allocation,omitempty"`
	// The type of allocation that is being used.
	AllocationType  FeatureCompanyUserResponseDataAllocationType `json:"allocation_type" url:"allocation_type"`
	Company         *CompanyDetailResponseData                   `json:"company,omitempty" url:"company,omitempty"`
	EntitlementID   string                                       `json:"entitlement_id" url:"entitlement_id"`
	EntitlementType string                                       `json:"entitlement_type" url:"entitlement_type"`
	Feature         *FeatureDetailResponseData                   `json:"feature,omitempty" url:"feature,omitempty"`
	// The period over which usage is measured.
	Period *string           `json:"period,omitempty" url:"period,omitempty"`
	Plan   *PlanResponseData `json:"plan,omitempty" url:"plan,omitempty"`
	// The amount of usage that has been consumed; a null value indicates that usage is not being measured.
	Usage *int              `json:"usage,omitempty" url:"usage,omitempty"`
	User  *UserResponseData `json:"user,omitempty" url:"user,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FeatureCompanyUserResponseData) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FeatureCompanyUserResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler FeatureCompanyUserResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FeatureCompanyUserResponseData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FeatureCompanyUserResponseData) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// The type of allocation that is being used.
type FeatureCompanyUserResponseDataAllocationType string

const (
	FeatureCompanyUserResponseDataAllocationTypeBoolean   FeatureCompanyUserResponseDataAllocationType = "boolean"
	FeatureCompanyUserResponseDataAllocationTypeNumeric   FeatureCompanyUserResponseDataAllocationType = "numeric"
	FeatureCompanyUserResponseDataAllocationTypeTrait     FeatureCompanyUserResponseDataAllocationType = "trait"
	FeatureCompanyUserResponseDataAllocationTypeUnlimited FeatureCompanyUserResponseDataAllocationType = "unlimited"
)

func NewFeatureCompanyUserResponseDataAllocationTypeFromString(s string) (FeatureCompanyUserResponseDataAllocationType, error) {
	switch s {
	case "boolean":
		return FeatureCompanyUserResponseDataAllocationTypeBoolean, nil
	case "numeric":
		return FeatureCompanyUserResponseDataAllocationTypeNumeric, nil
	case "trait":
		return FeatureCompanyUserResponseDataAllocationTypeTrait, nil
	case "unlimited":
		return FeatureCompanyUserResponseDataAllocationTypeUnlimited, nil
	}
	var t FeatureCompanyUserResponseDataAllocationType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FeatureCompanyUserResponseDataAllocationType) Ptr() *FeatureCompanyUserResponseDataAllocationType {
	return &f
}

type FeatureDetailResponseData struct {
	CreatedAt      time.Time                          `json:"created_at" url:"created_at"`
	Description    string                             `json:"description" url:"description"`
	EventSubtype   *string                            `json:"event_subtype,omitempty" url:"event_subtype,omitempty"`
	EventSummary   *EventSummaryResponseData          `json:"event_summary,omitempty" url:"event_summary,omitempty"`
	FeatureType    string                             `json:"feature_type" url:"feature_type"`
	Flags          []*FlagDetailResponseData          `json:"flags,omitempty" url:"flags,omitempty"`
	Icon           string                             `json:"icon" url:"icon"`
	ID             string                             `json:"id" url:"id"`
	LifecyclePhase *string                            `json:"lifecycle_phase,omitempty" url:"lifecycle_phase,omitempty"`
	MaintainerID   *string                            `json:"maintainer_id,omitempty" url:"maintainer_id,omitempty"`
	Name           string                             `json:"name" url:"name"`
	Plans          []*PreviewObject                   `json:"plans,omitempty" url:"plans,omitempty"`
	Trait          *EntityTraitDefinitionResponseData `json:"trait,omitempty" url:"trait,omitempty"`
	TraitID        *string                            `json:"trait_id,omitempty" url:"trait_id,omitempty"`
	UpdatedAt      time.Time                          `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FeatureDetailResponseData) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FeatureDetailResponseData) UnmarshalJSON(data []byte) error {
	type embed FeatureDetailResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FeatureDetailResponseData(unmarshaler.embed)
	f.CreatedAt = unmarshaler.CreatedAt.Time()
	f.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FeatureDetailResponseData) MarshalJSON() ([]byte, error) {
	type embed FeatureDetailResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*f),
		CreatedAt: core.NewDateTime(f.CreatedAt),
		UpdatedAt: core.NewDateTime(f.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (f *FeatureDetailResponseData) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FeatureResponseData struct {
	CreatedAt      time.Time `json:"created_at" url:"created_at"`
	Description    string    `json:"description" url:"description"`
	EventSubtype   *string   `json:"event_subtype,omitempty" url:"event_subtype,omitempty"`
	FeatureType    string    `json:"feature_type" url:"feature_type"`
	Icon           string    `json:"icon" url:"icon"`
	ID             string    `json:"id" url:"id"`
	LifecyclePhase *string   `json:"lifecycle_phase,omitempty" url:"lifecycle_phase,omitempty"`
	MaintainerID   *string   `json:"maintainer_id,omitempty" url:"maintainer_id,omitempty"`
	Name           string    `json:"name" url:"name"`
	TraitID        *string   `json:"trait_id,omitempty" url:"trait_id,omitempty"`
	UpdatedAt      time.Time `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FeatureResponseData) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FeatureResponseData) UnmarshalJSON(data []byte) error {
	type embed FeatureResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FeatureResponseData(unmarshaler.embed)
	f.CreatedAt = unmarshaler.CreatedAt.Time()
	f.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FeatureResponseData) MarshalJSON() ([]byte, error) {
	type embed FeatureResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*f),
		CreatedAt: core.NewDateTime(f.CreatedAt),
		UpdatedAt: core.NewDateTime(f.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (f *FeatureResponseData) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FeatureUsageDetailResponseData struct {
	Features []*FeatureUsageResponseData `json:"features,omitempty" url:"features,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FeatureUsageDetailResponseData) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FeatureUsageDetailResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler FeatureUsageDetailResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FeatureUsageDetailResponseData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FeatureUsageDetailResponseData) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FeatureUsageResponseData struct {
	// Whether further usage is permitted.
	Access bool `json:"access" url:"access"`
	// The maximum amount of usage that is permitted; a null value indicates that unlimited usage is permitted.
	Allocation *int `json:"allocation,omitempty" url:"allocation,omitempty"`
	// The type of allocation that is being used.
	AllocationType  FeatureUsageResponseDataAllocationType `json:"allocation_type" url:"allocation_type"`
	EntitlementID   string                                 `json:"entitlement_id" url:"entitlement_id"`
	EntitlementType string                                 `json:"entitlement_type" url:"entitlement_type"`
	Feature         *FeatureDetailResponseData             `json:"feature,omitempty" url:"feature,omitempty"`
	// The period over which usage is measured.
	Period *string           `json:"period,omitempty" url:"period,omitempty"`
	Plan   *PlanResponseData `json:"plan,omitempty" url:"plan,omitempty"`
	// The amount of usage that has been consumed; a null value indicates that usage is not being measured.
	Usage *int `json:"usage,omitempty" url:"usage,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FeatureUsageResponseData) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FeatureUsageResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler FeatureUsageResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FeatureUsageResponseData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FeatureUsageResponseData) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// The type of allocation that is being used.
type FeatureUsageResponseDataAllocationType string

const (
	FeatureUsageResponseDataAllocationTypeBoolean   FeatureUsageResponseDataAllocationType = "boolean"
	FeatureUsageResponseDataAllocationTypeNumeric   FeatureUsageResponseDataAllocationType = "numeric"
	FeatureUsageResponseDataAllocationTypeTrait     FeatureUsageResponseDataAllocationType = "trait"
	FeatureUsageResponseDataAllocationTypeUnlimited FeatureUsageResponseDataAllocationType = "unlimited"
)

func NewFeatureUsageResponseDataAllocationTypeFromString(s string) (FeatureUsageResponseDataAllocationType, error) {
	switch s {
	case "boolean":
		return FeatureUsageResponseDataAllocationTypeBoolean, nil
	case "numeric":
		return FeatureUsageResponseDataAllocationTypeNumeric, nil
	case "trait":
		return FeatureUsageResponseDataAllocationTypeTrait, nil
	case "unlimited":
		return FeatureUsageResponseDataAllocationTypeUnlimited, nil
	}
	var t FeatureUsageResponseDataAllocationType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FeatureUsageResponseDataAllocationType) Ptr() *FeatureUsageResponseDataAllocationType {
	return &f
}

type FlagDetailResponseData struct {
	CreatedAt     time.Time                 `json:"created_at" url:"created_at"`
	DefaultValue  bool                      `json:"default_value" url:"default_value"`
	Description   string                    `json:"description" url:"description"`
	Feature       *FeatureResponseData      `json:"feature,omitempty" url:"feature,omitempty"`
	FeatureID     *string                   `json:"feature_id,omitempty" url:"feature_id,omitempty"`
	FlagType      string                    `json:"flag_type" url:"flag_type"`
	ID            string                    `json:"id" url:"id"`
	Key           string                    `json:"key" url:"key"`
	LastCheckedAt *time.Time                `json:"last_checked_at,omitempty" url:"last_checked_at,omitempty"`
	MaintainerID  *string                   `json:"maintainer_id,omitempty" url:"maintainer_id,omitempty"`
	Name          string                    `json:"name" url:"name"`
	Rules         []*RuleDetailResponseData `json:"rules,omitempty" url:"rules,omitempty"`
	UpdatedAt     time.Time                 `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FlagDetailResponseData) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlagDetailResponseData) UnmarshalJSON(data []byte) error {
	type embed FlagDetailResponseData
	var unmarshaler = struct {
		embed
		CreatedAt     *core.DateTime `json:"created_at"`
		LastCheckedAt *core.DateTime `json:"last_checked_at,omitempty"`
		UpdatedAt     *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlagDetailResponseData(unmarshaler.embed)
	f.CreatedAt = unmarshaler.CreatedAt.Time()
	f.LastCheckedAt = unmarshaler.LastCheckedAt.TimePtr()
	f.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlagDetailResponseData) MarshalJSON() ([]byte, error) {
	type embed FlagDetailResponseData
	var marshaler = struct {
		embed
		CreatedAt     *core.DateTime `json:"created_at"`
		LastCheckedAt *core.DateTime `json:"last_checked_at,omitempty"`
		UpdatedAt     *core.DateTime `json:"updated_at"`
	}{
		embed:         embed(*f),
		CreatedAt:     core.NewDateTime(f.CreatedAt),
		LastCheckedAt: core.NewOptionalDateTime(f.LastCheckedAt),
		UpdatedAt:     core.NewDateTime(f.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (f *FlagDetailResponseData) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FlagResponseData struct {
	CreatedAt    time.Time `json:"created_at" url:"created_at"`
	DefaultValue bool      `json:"default_value" url:"default_value"`
	Description  string    `json:"description" url:"description"`
	FeatureID    *string   `json:"feature_id,omitempty" url:"feature_id,omitempty"`
	FlagType     string    `json:"flag_type" url:"flag_type"`
	ID           string    `json:"id" url:"id"`
	Key          string    `json:"key" url:"key"`
	MaintainerID *string   `json:"maintainer_id,omitempty" url:"maintainer_id,omitempty"`
	Name         string    `json:"name" url:"name"`
	UpdatedAt    time.Time `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FlagResponseData) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FlagResponseData) UnmarshalJSON(data []byte) error {
	type embed FlagResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FlagResponseData(unmarshaler.embed)
	f.CreatedAt = unmarshaler.CreatedAt.Time()
	f.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FlagResponseData) MarshalJSON() ([]byte, error) {
	type embed FlagResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*f),
		CreatedAt: core.NewDateTime(f.CreatedAt),
		UpdatedAt: core.NewDateTime(f.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (f *FlagResponseData) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type GenericPreviewObject struct {
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	ID          string  `json:"id" url:"id"`
	ImageURL    *string `json:"image_url,omitempty" url:"image_url,omitempty"`
	Name        string  `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GenericPreviewObject) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenericPreviewObject) UnmarshalJSON(data []byte) error {
	type unmarshaler GenericPreviewObject
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenericPreviewObject(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenericPreviewObject) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type InvoiceRequestBody struct {
	AmountDue               int        `json:"amount_due" url:"amount_due"`
	AmountPaid              int        `json:"amount_paid" url:"amount_paid"`
	AmountRemaining         int        `json:"amount_remaining" url:"amount_remaining"`
	CollectionMethod        string     `json:"collection_method" url:"collection_method"`
	Currency                string     `json:"currency" url:"currency"`
	CustomerExternalID      string     `json:"customer_external_id" url:"customer_external_id"`
	DueDate                 *time.Time `json:"due_date,omitempty" url:"due_date,omitempty"`
	PaymentMethodExternalID *string    `json:"payment_method_external_id,omitempty" url:"payment_method_external_id,omitempty"`
	SubscriptionExternalID  *string    `json:"subscription_external_id,omitempty" url:"subscription_external_id,omitempty"`
	Subtotal                int        `json:"subtotal" url:"subtotal"`
	URL                     *string    `json:"url,omitempty" url:"url,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *InvoiceRequestBody) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InvoiceRequestBody) UnmarshalJSON(data []byte) error {
	type embed InvoiceRequestBody
	var unmarshaler = struct {
		embed
		DueDate *core.DateTime `json:"due_date,omitempty"`
	}{
		embed: embed(*i),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*i = InvoiceRequestBody(unmarshaler.embed)
	i.DueDate = unmarshaler.DueDate.TimePtr()

	extraProperties, err := core.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *InvoiceRequestBody) MarshalJSON() ([]byte, error) {
	type embed InvoiceRequestBody
	var marshaler = struct {
		embed
		DueDate *core.DateTime `json:"due_date,omitempty"`
	}{
		embed:   embed(*i),
		DueDate: core.NewOptionalDateTime(i.DueDate),
	}
	return json.Marshal(marshaler)
}

func (i *InvoiceRequestBody) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type InvoiceResponseData struct {
	AmountDue               int        `json:"amount_due" url:"amount_due"`
	AmountPaid              int        `json:"amount_paid" url:"amount_paid"`
	AmountRemaining         int        `json:"amount_remaining" url:"amount_remaining"`
	CollectionMethod        string     `json:"collection_method" url:"collection_method"`
	CompanyID               *string    `json:"company_id,omitempty" url:"company_id,omitempty"`
	CreatedAt               time.Time  `json:"created_at" url:"created_at"`
	Currency                string     `json:"currency" url:"currency"`
	CustomerExternalID      string     `json:"customer_external_id" url:"customer_external_id"`
	DueDate                 *time.Time `json:"due_date,omitempty" url:"due_date,omitempty"`
	EnvironmentID           string     `json:"environment_id" url:"environment_id"`
	ExternalID              *string    `json:"external_id,omitempty" url:"external_id,omitempty"`
	ID                      string     `json:"id" url:"id"`
	PaymentMethodExternalID *string    `json:"payment_method_external_id,omitempty" url:"payment_method_external_id,omitempty"`
	SubscriptionExternalID  *string    `json:"subscription_external_id,omitempty" url:"subscription_external_id,omitempty"`
	Subtotal                int        `json:"subtotal" url:"subtotal"`
	UpdatedAt               time.Time  `json:"updated_at" url:"updated_at"`
	URL                     *string    `json:"url,omitempty" url:"url,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *InvoiceResponseData) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InvoiceResponseData) UnmarshalJSON(data []byte) error {
	type embed InvoiceResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		DueDate   *core.DateTime `json:"due_date,omitempty"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*i),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*i = InvoiceResponseData(unmarshaler.embed)
	i.CreatedAt = unmarshaler.CreatedAt.Time()
	i.DueDate = unmarshaler.DueDate.TimePtr()
	i.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *InvoiceResponseData) MarshalJSON() ([]byte, error) {
	type embed InvoiceResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		DueDate   *core.DateTime `json:"due_date,omitempty"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*i),
		CreatedAt: core.NewDateTime(i.CreatedAt),
		DueDate:   core.NewOptionalDateTime(i.DueDate),
		UpdatedAt: core.NewDateTime(i.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (i *InvoiceResponseData) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// The created resource
type IssueTemporaryAccessTokenResponseData struct {
	APIKeyID      string    `json:"api_key_id" url:"api_key_id"`
	CreatedAt     time.Time `json:"created_at" url:"created_at"`
	EnvironmentID string    `json:"environment_id" url:"environment_id"`
	ExpiredAt     time.Time `json:"expired_at" url:"expired_at"`
	ID            string    `json:"id" url:"id"`
	ResourceType  string    `json:"resource_type" url:"resource_type"`
	Token         string    `json:"token" url:"token"`
	UpdatedAt     time.Time `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *IssueTemporaryAccessTokenResponseData) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *IssueTemporaryAccessTokenResponseData) UnmarshalJSON(data []byte) error {
	type embed IssueTemporaryAccessTokenResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		ExpiredAt *core.DateTime `json:"expired_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*i),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*i = IssueTemporaryAccessTokenResponseData(unmarshaler.embed)
	i.CreatedAt = unmarshaler.CreatedAt.Time()
	i.ExpiredAt = unmarshaler.ExpiredAt.Time()
	i.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *IssueTemporaryAccessTokenResponseData) MarshalJSON() ([]byte, error) {
	type embed IssueTemporaryAccessTokenResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		ExpiredAt *core.DateTime `json:"expired_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*i),
		CreatedAt: core.NewDateTime(i.CreatedAt),
		ExpiredAt: core.NewDateTime(i.ExpiredAt),
		UpdatedAt: core.NewDateTime(i.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (i *IssueTemporaryAccessTokenResponseData) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type KeysRequestBody struct {
	Keys map[string]string `json:"keys,omitempty" url:"keys,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (k *KeysRequestBody) GetExtraProperties() map[string]interface{} {
	return k.extraProperties
}

func (k *KeysRequestBody) UnmarshalJSON(data []byte) error {
	type unmarshaler KeysRequestBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*k = KeysRequestBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *k)
	if err != nil {
		return err
	}
	k.extraProperties = extraProperties

	k._rawJSON = json.RawMessage(data)
	return nil
}

func (k *KeysRequestBody) String() string {
	if len(k._rawJSON) > 0 {
		if value, err := core.StringifyJSON(k._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(k); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", k)
}

type MeterRequestBody struct {
	DisplayName     string `json:"display_name" url:"display_name"`
	EventName       string `json:"event_name" url:"event_name"`
	EventPayloadKey string `json:"event_payload_key" url:"event_payload_key"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MeterRequestBody) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MeterRequestBody) UnmarshalJSON(data []byte) error {
	type unmarshaler MeterRequestBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MeterRequestBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MeterRequestBody) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MetricCountsHourlyResponseData struct {
	CompanyID     *string   `json:"company_id,omitempty" url:"company_id,omitempty"`
	CreatedAt     time.Time `json:"created_at" url:"created_at"`
	EnvironmentID string    `json:"environment_id" url:"environment_id"`
	EventSubtype  string    `json:"event_subtype" url:"event_subtype"`
	StartTime     time.Time `json:"start_time" url:"start_time"`
	UserID        *string   `json:"user_id,omitempty" url:"user_id,omitempty"`
	Value         int       `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MetricCountsHourlyResponseData) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MetricCountsHourlyResponseData) UnmarshalJSON(data []byte) error {
	type embed MetricCountsHourlyResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		StartTime *core.DateTime `json:"start_time"`
	}{
		embed: embed(*m),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*m = MetricCountsHourlyResponseData(unmarshaler.embed)
	m.CreatedAt = unmarshaler.CreatedAt.Time()
	m.StartTime = unmarshaler.StartTime.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MetricCountsHourlyResponseData) MarshalJSON() ([]byte, error) {
	type embed MetricCountsHourlyResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		StartTime *core.DateTime `json:"start_time"`
	}{
		embed:     embed(*m),
		CreatedAt: core.NewDateTime(m.CreatedAt),
		StartTime: core.NewDateTime(m.StartTime),
	}
	return json.Marshal(marshaler)
}

func (m *MetricCountsHourlyResponseData) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type PaginationFilter struct {
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"offset,omitempty" url:"offset,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PaginationFilter) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginationFilter) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginationFilter
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginationFilter(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginationFilter) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentMethodRequestBody struct {
	AccountLast4           *string `json:"account_last4,omitempty" url:"account_last4,omitempty"`
	AccountName            *string `json:"account_name,omitempty" url:"account_name,omitempty"`
	BankName               *string `json:"bank_name,omitempty" url:"bank_name,omitempty"`
	BillingEmail           *string `json:"billing_email,omitempty" url:"billing_email,omitempty"`
	BillingName            *string `json:"billing_name,omitempty" url:"billing_name,omitempty"`
	CardBrand              *string `json:"card_brand,omitempty" url:"card_brand,omitempty"`
	CardExpMonth           *int    `json:"card_exp_month,omitempty" url:"card_exp_month,omitempty"`
	CardExpYear            *int    `json:"card_exp_year,omitempty" url:"card_exp_year,omitempty"`
	CardLast4              *string `json:"card_last4,omitempty" url:"card_last4,omitempty"`
	CustomerExternalID     string  `json:"customer_external_id" url:"customer_external_id"`
	PaymentMethodType      string  `json:"payment_method_type" url:"payment_method_type"`
	SubscriptionExternalID *string `json:"subscription_external_id,omitempty" url:"subscription_external_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PaymentMethodRequestBody) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentMethodRequestBody) UnmarshalJSON(data []byte) error {
	type unmarshaler PaymentMethodRequestBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaymentMethodRequestBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentMethodRequestBody) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaymentMethodResponseData struct {
	AccountLast4           *string   `json:"account_last4,omitempty" url:"account_last4,omitempty"`
	AccountName            *string   `json:"account_name,omitempty" url:"account_name,omitempty"`
	BankName               *string   `json:"bank_name,omitempty" url:"bank_name,omitempty"`
	BillingEmail           *string   `json:"billing_email,omitempty" url:"billing_email,omitempty"`
	BillingName            *string   `json:"billing_name,omitempty" url:"billing_name,omitempty"`
	CardBrand              *string   `json:"card_brand,omitempty" url:"card_brand,omitempty"`
	CardExpMonth           *int      `json:"card_exp_month,omitempty" url:"card_exp_month,omitempty"`
	CardExpYear            *int      `json:"card_exp_year,omitempty" url:"card_exp_year,omitempty"`
	CardLast4              *string   `json:"card_last4,omitempty" url:"card_last4,omitempty"`
	CompanyID              *string   `json:"company_id,omitempty" url:"company_id,omitempty"`
	CreatedAt              time.Time `json:"created_at" url:"created_at"`
	CustomerExternalID     string    `json:"customer_external_id" url:"customer_external_id"`
	EnvironmentID          string    `json:"environment_id" url:"environment_id"`
	ExternalID             string    `json:"external_id" url:"external_id"`
	ID                     string    `json:"id" url:"id"`
	PaymentMethodType      string    `json:"payment_method_type" url:"payment_method_type"`
	SubscriptionExternalID *string   `json:"subscription_external_id,omitempty" url:"subscription_external_id,omitempty"`
	UpdatedAt              time.Time `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PaymentMethodResponseData) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaymentMethodResponseData) UnmarshalJSON(data []byte) error {
	type embed PaymentMethodResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PaymentMethodResponseData(unmarshaler.embed)
	p.CreatedAt = unmarshaler.CreatedAt.Time()
	p.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaymentMethodResponseData) MarshalJSON() ([]byte, error) {
	type embed PaymentMethodResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*p),
		CreatedAt: core.NewDateTime(p.CreatedAt),
		UpdatedAt: core.NewDateTime(p.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (p *PaymentMethodResponseData) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// The updated resource
type PlanAudienceDetailResponseData struct {
	ConditionGroups []*RuleConditionGroupDetailResponseData `json:"condition_groups,omitempty" url:"condition_groups,omitempty"`
	Conditions      []*RuleConditionDetailResponseData      `json:"conditions,omitempty" url:"conditions,omitempty"`
	CreatedAt       time.Time                               `json:"created_at" url:"created_at"`
	EnvironmentID   string                                  `json:"environment_id" url:"environment_id"`
	FlagID          *string                                 `json:"flag_id,omitempty" url:"flag_id,omitempty"`
	ID              string                                  `json:"id" url:"id"`
	Name            string                                  `json:"name" url:"name"`
	PlanID          *string                                 `json:"plan_id,omitempty" url:"plan_id,omitempty"`
	Priority        int                                     `json:"priority" url:"priority"`
	RuleType        string                                  `json:"rule_type" url:"rule_type"`
	UpdatedAt       time.Time                               `json:"updated_at" url:"updated_at"`
	Value           bool                                    `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PlanAudienceDetailResponseData) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PlanAudienceDetailResponseData) UnmarshalJSON(data []byte) error {
	type embed PlanAudienceDetailResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PlanAudienceDetailResponseData(unmarshaler.embed)
	p.CreatedAt = unmarshaler.CreatedAt.Time()
	p.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PlanAudienceDetailResponseData) MarshalJSON() ([]byte, error) {
	type embed PlanAudienceDetailResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*p),
		CreatedAt: core.NewDateTime(p.CreatedAt),
		UpdatedAt: core.NewDateTime(p.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (p *PlanAudienceDetailResponseData) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PlanAudienceResponseData struct {
	CreatedAt     time.Time `json:"created_at" url:"created_at"`
	EnvironmentID string    `json:"environment_id" url:"environment_id"`
	FlagID        *string   `json:"flag_id,omitempty" url:"flag_id,omitempty"`
	ID            string    `json:"id" url:"id"`
	Name          string    `json:"name" url:"name"`
	PlanID        *string   `json:"plan_id,omitempty" url:"plan_id,omitempty"`
	Priority      int       `json:"priority" url:"priority"`
	RuleType      string    `json:"rule_type" url:"rule_type"`
	UpdatedAt     time.Time `json:"updated_at" url:"updated_at"`
	Value         bool      `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PlanAudienceResponseData) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PlanAudienceResponseData) UnmarshalJSON(data []byte) error {
	type embed PlanAudienceResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PlanAudienceResponseData(unmarshaler.embed)
	p.CreatedAt = unmarshaler.CreatedAt.Time()
	p.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PlanAudienceResponseData) MarshalJSON() ([]byte, error) {
	type embed PlanAudienceResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*p),
		CreatedAt: core.NewDateTime(p.CreatedAt),
		UpdatedAt: core.NewDateTime(p.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (p *PlanAudienceResponseData) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PlanDetailResponseData struct {
	AudienceType   *string                           `json:"audience_type,omitempty" url:"audience_type,omitempty"`
	BillingProduct *BillingProductDetailResponseData `json:"billing_product,omitempty" url:"billing_product,omitempty"`
	CompanyCount   int                               `json:"company_count" url:"company_count"`
	CreatedAt      time.Time                         `json:"created_at" url:"created_at"`
	Description    string                            `json:"description" url:"description"`
	Features       []*FeatureDetailResponseData      `json:"features,omitempty" url:"features,omitempty"`
	Icon           string                            `json:"icon" url:"icon"`
	ID             string                            `json:"id" url:"id"`
	IsDefault      bool                              `json:"is_default" url:"is_default"`
	MonthlyPrice   *BillingPriceResponseData         `json:"monthly_price,omitempty" url:"monthly_price,omitempty"`
	Name           string                            `json:"name" url:"name"`
	PlanType       string                            `json:"plan_type" url:"plan_type"`
	UpdatedAt      time.Time                         `json:"updated_at" url:"updated_at"`
	YearlyPrice    *BillingPriceResponseData         `json:"yearly_price,omitempty" url:"yearly_price,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PlanDetailResponseData) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PlanDetailResponseData) UnmarshalJSON(data []byte) error {
	type embed PlanDetailResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PlanDetailResponseData(unmarshaler.embed)
	p.CreatedAt = unmarshaler.CreatedAt.Time()
	p.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PlanDetailResponseData) MarshalJSON() ([]byte, error) {
	type embed PlanDetailResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*p),
		CreatedAt: core.NewDateTime(p.CreatedAt),
		UpdatedAt: core.NewDateTime(p.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (p *PlanDetailResponseData) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PlanEntitlementResponseData struct {
	CreatedAt     time.Time                          `json:"created_at" url:"created_at"`
	EnvironmentID string                             `json:"environment_id" url:"environment_id"`
	Feature       *FeatureResponseData               `json:"feature,omitempty" url:"feature,omitempty"`
	FeatureID     string                             `json:"feature_id" url:"feature_id"`
	ID            string                             `json:"id" url:"id"`
	MetricPeriod  *string                            `json:"metric_period,omitempty" url:"metric_period,omitempty"`
	Plan          *PlanResponseData                  `json:"plan,omitempty" url:"plan,omitempty"`
	PlanID        string                             `json:"plan_id" url:"plan_id"`
	RuleID        string                             `json:"rule_id" url:"rule_id"`
	UpdatedAt     time.Time                          `json:"updated_at" url:"updated_at"`
	ValueBool     *bool                              `json:"value_bool,omitempty" url:"value_bool,omitempty"`
	ValueNumeric  *int                               `json:"value_numeric,omitempty" url:"value_numeric,omitempty"`
	ValueTrait    *EntityTraitDefinitionResponseData `json:"value_trait,omitempty" url:"value_trait,omitempty"`
	ValueTraitID  *string                            `json:"value_trait_id,omitempty" url:"value_trait_id,omitempty"`
	ValueType     string                             `json:"value_type" url:"value_type"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PlanEntitlementResponseData) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PlanEntitlementResponseData) UnmarshalJSON(data []byte) error {
	type embed PlanEntitlementResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PlanEntitlementResponseData(unmarshaler.embed)
	p.CreatedAt = unmarshaler.CreatedAt.Time()
	p.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PlanEntitlementResponseData) MarshalJSON() ([]byte, error) {
	type embed PlanEntitlementResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*p),
		CreatedAt: core.NewDateTime(p.CreatedAt),
		UpdatedAt: core.NewDateTime(p.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (p *PlanEntitlementResponseData) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// The returned resource
type PlanGroupDetailResponseData struct {
	DefaultPlan   *PlanGroupPlanDetailResponseData   `json:"default_plan,omitempty" url:"default_plan,omitempty"`
	DefaultPlanID *string                            `json:"default_plan_id,omitempty" url:"default_plan_id,omitempty"`
	ID            string                             `json:"id" url:"id"`
	Plans         []*PlanGroupPlanDetailResponseData `json:"plans,omitempty" url:"plans,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PlanGroupDetailResponseData) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PlanGroupDetailResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler PlanGroupDetailResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PlanGroupDetailResponseData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PlanGroupDetailResponseData) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PlanGroupPlanDetailResponseData struct {
	AudienceType   *string                           `json:"audience_type,omitempty" url:"audience_type,omitempty"`
	BillingProduct *BillingProductDetailResponseData `json:"billing_product,omitempty" url:"billing_product,omitempty"`
	CompanyCount   int                               `json:"company_count" url:"company_count"`
	CreatedAt      time.Time                         `json:"created_at" url:"created_at"`
	Description    string                            `json:"description" url:"description"`
	Entitlements   []*PlanEntitlementResponseData    `json:"entitlements,omitempty" url:"entitlements,omitempty"`
	Features       []*FeatureDetailResponseData      `json:"features,omitempty" url:"features,omitempty"`
	Icon           string                            `json:"icon" url:"icon"`
	ID             string                            `json:"id" url:"id"`
	IsDefault      bool                              `json:"is_default" url:"is_default"`
	MonthlyPrice   *BillingPriceResponseData         `json:"monthly_price,omitempty" url:"monthly_price,omitempty"`
	Name           string                            `json:"name" url:"name"`
	PlanType       string                            `json:"plan_type" url:"plan_type"`
	UpdatedAt      time.Time                         `json:"updated_at" url:"updated_at"`
	YearlyPrice    *BillingPriceResponseData         `json:"yearly_price,omitempty" url:"yearly_price,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PlanGroupPlanDetailResponseData) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PlanGroupPlanDetailResponseData) UnmarshalJSON(data []byte) error {
	type embed PlanGroupPlanDetailResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PlanGroupPlanDetailResponseData(unmarshaler.embed)
	p.CreatedAt = unmarshaler.CreatedAt.Time()
	p.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PlanGroupPlanDetailResponseData) MarshalJSON() ([]byte, error) {
	type embed PlanGroupPlanDetailResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*p),
		CreatedAt: core.NewDateTime(p.CreatedAt),
		UpdatedAt: core.NewDateTime(p.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (p *PlanGroupPlanDetailResponseData) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// The updated resource
type PlanGroupResponseData struct {
	AddOnIDs      []string `json:"add_on_ids,omitempty" url:"add_on_ids,omitempty"`
	DefaultPlanID *string  `json:"default_plan_id,omitempty" url:"default_plan_id,omitempty"`
	ID            string   `json:"id" url:"id"`
	PlanIDs       []string `json:"plan_ids,omitempty" url:"plan_ids,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PlanGroupResponseData) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PlanGroupResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler PlanGroupResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PlanGroupResponseData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PlanGroupResponseData) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PlanResponseData struct {
	AudienceType *string   `json:"audience_type,omitempty" url:"audience_type,omitempty"`
	CreatedAt    time.Time `json:"created_at" url:"created_at"`
	Description  string    `json:"description" url:"description"`
	Icon         string    `json:"icon" url:"icon"`
	ID           string    `json:"id" url:"id"`
	Name         string    `json:"name" url:"name"`
	PlanType     string    `json:"plan_type" url:"plan_type"`
	UpdatedAt    time.Time `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PlanResponseData) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PlanResponseData) UnmarshalJSON(data []byte) error {
	type embed PlanResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = PlanResponseData(unmarshaler.embed)
	p.CreatedAt = unmarshaler.CreatedAt.Time()
	p.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PlanResponseData) MarshalJSON() ([]byte, error) {
	type embed PlanResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*p),
		CreatedAt: core.NewDateTime(p.CreatedAt),
		UpdatedAt: core.NewDateTime(p.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (p *PlanResponseData) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PreviewObject struct {
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	ID          string  `json:"id" url:"id"`
	ImageURL    *string `json:"image_url,omitempty" url:"image_url,omitempty"`
	Name        string  `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PreviewObject) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PreviewObject) UnmarshalJSON(data []byte) error {
	type unmarshaler PreviewObject
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PreviewObject(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PreviewObject) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// The created resource
type RawEventBatchResponseData struct {
	Events []*RawEventResponseData `json:"events,omitempty" url:"events,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RawEventBatchResponseData) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RawEventBatchResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler RawEventBatchResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RawEventBatchResponseData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RawEventBatchResponseData) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RawEventResponseData struct {
	CapturedAt time.Time `json:"captured_at" url:"captured_at"`
	EventID    *string   `json:"event_id,omitempty" url:"event_id,omitempty"`
	RemoteAddr string    `json:"remote_addr" url:"remote_addr"`
	RemoteIP   string    `json:"remote_ip" url:"remote_ip"`
	UserAgent  string    `json:"user_agent" url:"user_agent"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RawEventResponseData) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RawEventResponseData) UnmarshalJSON(data []byte) error {
	type embed RawEventResponseData
	var unmarshaler = struct {
		embed
		CapturedAt *core.DateTime `json:"captured_at"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = RawEventResponseData(unmarshaler.embed)
	r.CapturedAt = unmarshaler.CapturedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RawEventResponseData) MarshalJSON() ([]byte, error) {
	type embed RawEventResponseData
	var marshaler = struct {
		embed
		CapturedAt *core.DateTime `json:"captured_at"`
	}{
		embed:      embed(*r),
		CapturedAt: core.NewDateTime(r.CapturedAt),
	}
	return json.Marshal(marshaler)
}

func (r *RawEventResponseData) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RuleConditionDetailResponseData struct {
	ComparisonTrait   *EntityTraitDefinitionResponseData   `json:"comparison_trait,omitempty" url:"comparison_trait,omitempty"`
	ComparisonTraitID *string                              `json:"comparison_trait_id,omitempty" url:"comparison_trait_id,omitempty"`
	ConditionGroupID  *string                              `json:"condition_group_id,omitempty" url:"condition_group_id,omitempty"`
	ConditionType     string                               `json:"condition_type" url:"condition_type"`
	CreatedAt         time.Time                            `json:"created_at" url:"created_at"`
	EnvironmentID     string                               `json:"environment_id" url:"environment_id"`
	EventSubtype      *string                              `json:"event_subtype,omitempty" url:"event_subtype,omitempty"`
	FlagID            *string                              `json:"flag_id,omitempty" url:"flag_id,omitempty"`
	ID                string                               `json:"id" url:"id"`
	MetricPeriod      *string                              `json:"metric_period,omitempty" url:"metric_period,omitempty"`
	MetricValue       *int                                 `json:"metric_value,omitempty" url:"metric_value,omitempty"`
	Operator          string                               `json:"operator" url:"operator"`
	PlanID            *string                              `json:"plan_id,omitempty" url:"plan_id,omitempty"`
	ResourceIDs       []string                             `json:"resource_ids,omitempty" url:"resource_ids,omitempty"`
	Resources         []*RuleConditionResourceResponseData `json:"resources,omitempty" url:"resources,omitempty"`
	RuleID            string                               `json:"rule_id" url:"rule_id"`
	Trait             *EntityTraitDefinitionResponseData   `json:"trait,omitempty" url:"trait,omitempty"`
	TraitEntityType   *string                              `json:"trait_entity_type,omitempty" url:"trait_entity_type,omitempty"`
	TraitID           *string                              `json:"trait_id,omitempty" url:"trait_id,omitempty"`
	TraitValue        string                               `json:"trait_value" url:"trait_value"`
	UpdatedAt         time.Time                            `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RuleConditionDetailResponseData) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RuleConditionDetailResponseData) UnmarshalJSON(data []byte) error {
	type embed RuleConditionDetailResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = RuleConditionDetailResponseData(unmarshaler.embed)
	r.CreatedAt = unmarshaler.CreatedAt.Time()
	r.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RuleConditionDetailResponseData) MarshalJSON() ([]byte, error) {
	type embed RuleConditionDetailResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*r),
		CreatedAt: core.NewDateTime(r.CreatedAt),
		UpdatedAt: core.NewDateTime(r.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (r *RuleConditionDetailResponseData) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RuleConditionGroupDetailResponseData struct {
	Conditions    []*RuleConditionDetailResponseData `json:"conditions,omitempty" url:"conditions,omitempty"`
	CreatedAt     time.Time                          `json:"created_at" url:"created_at"`
	EnvironmentID string                             `json:"environment_id" url:"environment_id"`
	FlagID        *string                            `json:"flag_id,omitempty" url:"flag_id,omitempty"`
	ID            string                             `json:"id" url:"id"`
	PlanID        *string                            `json:"plan_id,omitempty" url:"plan_id,omitempty"`
	RuleID        string                             `json:"rule_id" url:"rule_id"`
	UpdatedAt     time.Time                          `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RuleConditionGroupDetailResponseData) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RuleConditionGroupDetailResponseData) UnmarshalJSON(data []byte) error {
	type embed RuleConditionGroupDetailResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = RuleConditionGroupDetailResponseData(unmarshaler.embed)
	r.CreatedAt = unmarshaler.CreatedAt.Time()
	r.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RuleConditionGroupDetailResponseData) MarshalJSON() ([]byte, error) {
	type embed RuleConditionGroupDetailResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*r),
		CreatedAt: core.NewDateTime(r.CreatedAt),
		UpdatedAt: core.NewDateTime(r.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (r *RuleConditionGroupDetailResponseData) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RuleConditionGroupResponseData struct {
	CreatedAt     time.Time `json:"created_at" url:"created_at"`
	EnvironmentID string    `json:"environment_id" url:"environment_id"`
	FlagID        *string   `json:"flag_id,omitempty" url:"flag_id,omitempty"`
	ID            string    `json:"id" url:"id"`
	PlanID        *string   `json:"plan_id,omitempty" url:"plan_id,omitempty"`
	RuleID        string    `json:"rule_id" url:"rule_id"`
	UpdatedAt     time.Time `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RuleConditionGroupResponseData) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RuleConditionGroupResponseData) UnmarshalJSON(data []byte) error {
	type embed RuleConditionGroupResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = RuleConditionGroupResponseData(unmarshaler.embed)
	r.CreatedAt = unmarshaler.CreatedAt.Time()
	r.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RuleConditionGroupResponseData) MarshalJSON() ([]byte, error) {
	type embed RuleConditionGroupResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*r),
		CreatedAt: core.NewDateTime(r.CreatedAt),
		UpdatedAt: core.NewDateTime(r.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (r *RuleConditionGroupResponseData) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RuleConditionResourceResponseData struct {
	ID   string `json:"id" url:"id"`
	Name string `json:"name" url:"name"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RuleConditionResourceResponseData) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RuleConditionResourceResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler RuleConditionResourceResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RuleConditionResourceResponseData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RuleConditionResourceResponseData) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RuleConditionResponseData struct {
	ComparisonTraitID *string   `json:"comparison_trait_id,omitempty" url:"comparison_trait_id,omitempty"`
	ConditionGroupID  *string   `json:"condition_group_id,omitempty" url:"condition_group_id,omitempty"`
	ConditionType     string    `json:"condition_type" url:"condition_type"`
	CreatedAt         time.Time `json:"created_at" url:"created_at"`
	EnvironmentID     string    `json:"environment_id" url:"environment_id"`
	EventSubtype      *string   `json:"event_subtype,omitempty" url:"event_subtype,omitempty"`
	FlagID            *string   `json:"flag_id,omitempty" url:"flag_id,omitempty"`
	ID                string    `json:"id" url:"id"`
	MetricPeriod      *string   `json:"metric_period,omitempty" url:"metric_period,omitempty"`
	MetricValue       *int      `json:"metric_value,omitempty" url:"metric_value,omitempty"`
	Operator          string    `json:"operator" url:"operator"`
	PlanID            *string   `json:"plan_id,omitempty" url:"plan_id,omitempty"`
	ResourceIDs       []string  `json:"resource_ids,omitempty" url:"resource_ids,omitempty"`
	RuleID            string    `json:"rule_id" url:"rule_id"`
	TraitEntityType   *string   `json:"trait_entity_type,omitempty" url:"trait_entity_type,omitempty"`
	TraitID           *string   `json:"trait_id,omitempty" url:"trait_id,omitempty"`
	TraitValue        string    `json:"trait_value" url:"trait_value"`
	UpdatedAt         time.Time `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RuleConditionResponseData) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RuleConditionResponseData) UnmarshalJSON(data []byte) error {
	type embed RuleConditionResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = RuleConditionResponseData(unmarshaler.embed)
	r.CreatedAt = unmarshaler.CreatedAt.Time()
	r.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RuleConditionResponseData) MarshalJSON() ([]byte, error) {
	type embed RuleConditionResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*r),
		CreatedAt: core.NewDateTime(r.CreatedAt),
		UpdatedAt: core.NewDateTime(r.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (r *RuleConditionResponseData) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RuleDetailResponseData struct {
	ConditionGroups []*RuleConditionGroupDetailResponseData `json:"condition_groups,omitempty" url:"condition_groups,omitempty"`
	Conditions      []*RuleConditionDetailResponseData      `json:"conditions,omitempty" url:"conditions,omitempty"`
	CreatedAt       time.Time                               `json:"created_at" url:"created_at"`
	EnvironmentID   string                                  `json:"environment_id" url:"environment_id"`
	FlagID          *string                                 `json:"flag_id,omitempty" url:"flag_id,omitempty"`
	ID              string                                  `json:"id" url:"id"`
	Name            string                                  `json:"name" url:"name"`
	PlanID          *string                                 `json:"plan_id,omitempty" url:"plan_id,omitempty"`
	Priority        int                                     `json:"priority" url:"priority"`
	RuleType        string                                  `json:"rule_type" url:"rule_type"`
	UpdatedAt       time.Time                               `json:"updated_at" url:"updated_at"`
	Value           bool                                    `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RuleDetailResponseData) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RuleDetailResponseData) UnmarshalJSON(data []byte) error {
	type embed RuleDetailResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = RuleDetailResponseData(unmarshaler.embed)
	r.CreatedAt = unmarshaler.CreatedAt.Time()
	r.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RuleDetailResponseData) MarshalJSON() ([]byte, error) {
	type embed RuleDetailResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*r),
		CreatedAt: core.NewDateTime(r.CreatedAt),
		UpdatedAt: core.NewDateTime(r.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (r *RuleDetailResponseData) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RuleResponseData struct {
	CreatedAt     time.Time `json:"created_at" url:"created_at"`
	EnvironmentID string    `json:"environment_id" url:"environment_id"`
	FlagID        *string   `json:"flag_id,omitempty" url:"flag_id,omitempty"`
	ID            string    `json:"id" url:"id"`
	Name          string    `json:"name" url:"name"`
	PlanID        *string   `json:"plan_id,omitempty" url:"plan_id,omitempty"`
	Priority      int       `json:"priority" url:"priority"`
	RuleType      string    `json:"rule_type" url:"rule_type"`
	UpdatedAt     time.Time `json:"updated_at" url:"updated_at"`
	Value         bool      `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RuleResponseData) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RuleResponseData) UnmarshalJSON(data []byte) error {
	type embed RuleResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = RuleResponseData(unmarshaler.embed)
	r.CreatedAt = unmarshaler.CreatedAt.Time()
	r.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RuleResponseData) MarshalJSON() ([]byte, error) {
	type embed RuleResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*r),
		CreatedAt: core.NewDateTime(r.CreatedAt),
		UpdatedAt: core.NewDateTime(r.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (r *RuleResponseData) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// The updated resource
type RulesDetailResponseData struct {
	Flag  *FlagResponseData         `json:"flag,omitempty" url:"flag,omitempty"`
	Rules []*RuleDetailResponseData `json:"rules,omitempty" url:"rules,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RulesDetailResponseData) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RulesDetailResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler RulesDetailResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RulesDetailResponseData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RulesDetailResponseData) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// The returned resource
type SegmentStatusResp struct {
	Connected     bool       `json:"connected" url:"connected"`
	EnvironmentID string     `json:"environment_id" url:"environment_id"`
	LastEventAt   *time.Time `json:"last_event_at,omitempty" url:"last_event_at,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SegmentStatusResp) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SegmentStatusResp) UnmarshalJSON(data []byte) error {
	type embed SegmentStatusResp
	var unmarshaler = struct {
		embed
		LastEventAt *core.DateTime `json:"last_event_at,omitempty"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SegmentStatusResp(unmarshaler.embed)
	s.LastEventAt = unmarshaler.LastEventAt.TimePtr()

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SegmentStatusResp) MarshalJSON() ([]byte, error) {
	type embed SegmentStatusResp
	var marshaler = struct {
		embed
		LastEventAt *core.DateTime `json:"last_event_at,omitempty"`
	}{
		embed:       embed(*s),
		LastEventAt: core.NewOptionalDateTime(s.LastEventAt),
	}
	return json.Marshal(marshaler)
}

func (s *SegmentStatusResp) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type StripeEmbedInfo struct {
	PublishableKey          string  `json:"publishable_key" url:"publishable_key"`
	SetupIntentClientSecret *string `json:"setup_intent_client_secret,omitempty" url:"setup_intent_client_secret,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *StripeEmbedInfo) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StripeEmbedInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler StripeEmbedInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StripeEmbedInfo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StripeEmbedInfo) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type TemporaryAccessTokenResponseData struct {
	APIKeyID      string    `json:"api_key_id" url:"api_key_id"`
	CreatedAt     time.Time `json:"created_at" url:"created_at"`
	EnvironmentID string    `json:"environment_id" url:"environment_id"`
	ExpiredAt     time.Time `json:"expired_at" url:"expired_at"`
	ID            string    `json:"id" url:"id"`
	ResourceType  string    `json:"resource_type" url:"resource_type"`
	UpdatedAt     time.Time `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TemporaryAccessTokenResponseData) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TemporaryAccessTokenResponseData) UnmarshalJSON(data []byte) error {
	type embed TemporaryAccessTokenResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		ExpiredAt *core.DateTime `json:"expired_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TemporaryAccessTokenResponseData(unmarshaler.embed)
	t.CreatedAt = unmarshaler.CreatedAt.Time()
	t.ExpiredAt = unmarshaler.ExpiredAt.Time()
	t.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemporaryAccessTokenResponseData) MarshalJSON() ([]byte, error) {
	type embed TemporaryAccessTokenResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		ExpiredAt *core.DateTime `json:"expired_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*t),
		CreatedAt: core.NewDateTime(t.CreatedAt),
		ExpiredAt: core.NewDateTime(t.ExpiredAt),
		UpdatedAt: core.NewDateTime(t.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (t *TemporaryAccessTokenResponseData) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type UpdateReqCommon struct {
	MetricPeriod *UpdateReqCommonMetricPeriod `json:"metric_period,omitempty" url:"metric_period,omitempty"`
	ValueBool    *bool                        `json:"value_bool,omitempty" url:"value_bool,omitempty"`
	ValueNumeric *int                         `json:"value_numeric,omitempty" url:"value_numeric,omitempty"`
	ValueTraitID *string                      `json:"value_trait_id,omitempty" url:"value_trait_id,omitempty"`
	ValueType    UpdateReqCommonValueType     `json:"value_type" url:"value_type"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpdateReqCommon) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateReqCommon) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateReqCommon
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateReqCommon(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateReqCommon) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateReqCommonMetricPeriod string

const (
	UpdateReqCommonMetricPeriodBilling      UpdateReqCommonMetricPeriod = "billing"
	UpdateReqCommonMetricPeriodCurrentMonth UpdateReqCommonMetricPeriod = "current_month"
	UpdateReqCommonMetricPeriodCurrentWeek  UpdateReqCommonMetricPeriod = "current_week"
	UpdateReqCommonMetricPeriodCurrentDay   UpdateReqCommonMetricPeriod = "current_day"
)

func NewUpdateReqCommonMetricPeriodFromString(s string) (UpdateReqCommonMetricPeriod, error) {
	switch s {
	case "billing":
		return UpdateReqCommonMetricPeriodBilling, nil
	case "current_month":
		return UpdateReqCommonMetricPeriodCurrentMonth, nil
	case "current_week":
		return UpdateReqCommonMetricPeriodCurrentWeek, nil
	case "current_day":
		return UpdateReqCommonMetricPeriodCurrentDay, nil
	}
	var t UpdateReqCommonMetricPeriod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UpdateReqCommonMetricPeriod) Ptr() *UpdateReqCommonMetricPeriod {
	return &u
}

type UpdateReqCommonValueType string

const (
	UpdateReqCommonValueTypeBoolean   UpdateReqCommonValueType = "boolean"
	UpdateReqCommonValueTypeNumeric   UpdateReqCommonValueType = "numeric"
	UpdateReqCommonValueTypeTrait     UpdateReqCommonValueType = "trait"
	UpdateReqCommonValueTypeUnlimited UpdateReqCommonValueType = "unlimited"
)

func NewUpdateReqCommonValueTypeFromString(s string) (UpdateReqCommonValueType, error) {
	switch s {
	case "boolean":
		return UpdateReqCommonValueTypeBoolean, nil
	case "numeric":
		return UpdateReqCommonValueTypeNumeric, nil
	case "trait":
		return UpdateReqCommonValueTypeTrait, nil
	case "unlimited":
		return UpdateReqCommonValueTypeUnlimited, nil
	}
	var t UpdateReqCommonValueType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UpdateReqCommonValueType) Ptr() *UpdateReqCommonValueType {
	return &u
}

type UpdateRuleRequestBody struct {
	ConditionGroups []*CreateOrUpdateConditionGroupRequestBody `json:"condition_groups,omitempty" url:"condition_groups,omitempty"`
	Conditions      []*CreateOrUpdateConditionRequestBody      `json:"conditions,omitempty" url:"conditions,omitempty"`
	Name            string                                     `json:"name" url:"name"`
	Priority        int                                        `json:"priority" url:"priority"`
	Value           bool                                       `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpdateRuleRequestBody) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateRuleRequestBody) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateRuleRequestBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateRuleRequestBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateRuleRequestBody) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpsertCompanyRequestBody struct {
	// If you know the Schematic ID, you can use that here instead of keys
	ID         *string           `json:"id,omitempty" url:"id,omitempty"`
	Keys       map[string]string `json:"keys,omitempty" url:"keys,omitempty"`
	LastSeenAt *time.Time        `json:"last_seen_at,omitempty" url:"last_seen_at,omitempty"`
	Name       *string           `json:"name,omitempty" url:"name,omitempty"`
	// A map of trait names to trait values
	Traits     map[string]interface{} `json:"traits,omitempty" url:"traits,omitempty"`
	UpdateOnly *bool                  `json:"update_only,omitempty" url:"update_only,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpsertCompanyRequestBody) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertCompanyRequestBody) UnmarshalJSON(data []byte) error {
	type embed UpsertCompanyRequestBody
	var unmarshaler = struct {
		embed
		LastSeenAt *core.DateTime `json:"last_seen_at,omitempty"`
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = UpsertCompanyRequestBody(unmarshaler.embed)
	u.LastSeenAt = unmarshaler.LastSeenAt.TimePtr()

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertCompanyRequestBody) MarshalJSON() ([]byte, error) {
	type embed UpsertCompanyRequestBody
	var marshaler = struct {
		embed
		LastSeenAt *core.DateTime `json:"last_seen_at,omitempty"`
	}{
		embed:      embed(*u),
		LastSeenAt: core.NewOptionalDateTime(u.LastSeenAt),
	}
	return json.Marshal(marshaler)
}

func (u *UpsertCompanyRequestBody) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpsertTraitRequestBody struct {
	// Amount to increment the trait by (positive or negative)
	Incr *int `json:"incr,omitempty" url:"incr,omitempty"`
	// Key/value pairs too identify a company or user
	Keys map[string]string `json:"keys,omitempty" url:"keys,omitempty"`
	// Value to set the trait to
	Set *string `json:"set,omitempty" url:"set,omitempty"`
	// Name of the trait to update
	Trait string `json:"trait" url:"trait"`
	// Unless this is set, the company or user will be created if it does not already exist
	UpdateOnly *bool `json:"update_only,omitempty" url:"update_only,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpsertTraitRequestBody) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertTraitRequestBody) UnmarshalJSON(data []byte) error {
	type unmarshaler UpsertTraitRequestBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpsertTraitRequestBody(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertTraitRequestBody) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpsertUserRequestBody struct {
	// Optionally specify company using key/value pairs
	Company map[string]string `json:"company,omitempty" url:"company,omitempty"`
	// Optionally specify company using Schematic company ID
	CompanyID *string `json:"company_id,omitempty" url:"company_id,omitempty"`
	// If you know the Schematic ID, you can use that here instead of keys
	ID         *string           `json:"id,omitempty" url:"id,omitempty"`
	Keys       map[string]string `json:"keys,omitempty" url:"keys,omitempty"`
	LastSeenAt *time.Time        `json:"last_seen_at,omitempty" url:"last_seen_at,omitempty"`
	Name       *string           `json:"name,omitempty" url:"name,omitempty"`
	// A map of trait names to trait values
	Traits     map[string]interface{} `json:"traits,omitempty" url:"traits,omitempty"`
	UpdateOnly *bool                  `json:"update_only,omitempty" url:"update_only,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpsertUserRequestBody) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertUserRequestBody) UnmarshalJSON(data []byte) error {
	type embed UpsertUserRequestBody
	var unmarshaler = struct {
		embed
		LastSeenAt *core.DateTime `json:"last_seen_at,omitempty"`
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = UpsertUserRequestBody(unmarshaler.embed)
	u.LastSeenAt = unmarshaler.LastSeenAt.TimePtr()

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertUserRequestBody) MarshalJSON() ([]byte, error) {
	type embed UpsertUserRequestBody
	var marshaler = struct {
		embed
		LastSeenAt *core.DateTime `json:"last_seen_at,omitempty"`
	}{
		embed:      embed(*u),
		LastSeenAt: core.NewOptionalDateTime(u.LastSeenAt),
	}
	return json.Marshal(marshaler)
}

func (u *UpsertUserRequestBody) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpsertUserSubRequestBody struct {
	// Optionally specify company using Schematic company ID
	CompanyID *string `json:"company_id,omitempty" url:"company_id,omitempty"`
	// If you know the Schematic ID, you can use that here instead of keys
	ID         *string           `json:"id,omitempty" url:"id,omitempty"`
	Keys       map[string]string `json:"keys,omitempty" url:"keys,omitempty"`
	LastSeenAt *time.Time        `json:"last_seen_at,omitempty" url:"last_seen_at,omitempty"`
	Name       *string           `json:"name,omitempty" url:"name,omitempty"`
	// A map of trait names to trait values
	Traits     map[string]interface{} `json:"traits,omitempty" url:"traits,omitempty"`
	UpdateOnly *bool                  `json:"update_only,omitempty" url:"update_only,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpsertUserSubRequestBody) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertUserSubRequestBody) UnmarshalJSON(data []byte) error {
	type embed UpsertUserSubRequestBody
	var unmarshaler = struct {
		embed
		LastSeenAt *core.DateTime `json:"last_seen_at,omitempty"`
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = UpsertUserSubRequestBody(unmarshaler.embed)
	u.LastSeenAt = unmarshaler.LastSeenAt.TimePtr()

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertUserSubRequestBody) MarshalJSON() ([]byte, error) {
	type embed UpsertUserSubRequestBody
	var marshaler = struct {
		embed
		LastSeenAt *core.DateTime `json:"last_seen_at,omitempty"`
	}{
		embed:      embed(*u),
		LastSeenAt: core.NewOptionalDateTime(u.LastSeenAt),
	}
	return json.Marshal(marshaler)
}

func (u *UpsertUserSubRequestBody) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UserDetailResponseData struct {
	CompanyMemberships []*CompanyMembershipDetailResponseData `json:"company_memberships,omitempty" url:"company_memberships,omitempty"`
	CreatedAt          time.Time                              `json:"created_at" url:"created_at"`
	EntityTraits       []*EntityTraitDetailResponseData       `json:"entity_traits,omitempty" url:"entity_traits,omitempty"`
	EnvironmentID      string                                 `json:"environment_id" url:"environment_id"`
	ID                 string                                 `json:"id" url:"id"`
	Keys               []*EntityKeyDetailResponseData         `json:"keys,omitempty" url:"keys,omitempty"`
	LastSeenAt         *time.Time                             `json:"last_seen_at,omitempty" url:"last_seen_at,omitempty"`
	Name               string                                 `json:"name" url:"name"`
	// A map of trait names to trait values
	Traits    map[string]interface{} `json:"traits,omitempty" url:"traits,omitempty"`
	UpdatedAt time.Time              `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UserDetailResponseData) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UserDetailResponseData) UnmarshalJSON(data []byte) error {
	type embed UserDetailResponseData
	var unmarshaler = struct {
		embed
		CreatedAt  *core.DateTime `json:"created_at"`
		LastSeenAt *core.DateTime `json:"last_seen_at,omitempty"`
		UpdatedAt  *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = UserDetailResponseData(unmarshaler.embed)
	u.CreatedAt = unmarshaler.CreatedAt.Time()
	u.LastSeenAt = unmarshaler.LastSeenAt.TimePtr()
	u.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserDetailResponseData) MarshalJSON() ([]byte, error) {
	type embed UserDetailResponseData
	var marshaler = struct {
		embed
		CreatedAt  *core.DateTime `json:"created_at"`
		LastSeenAt *core.DateTime `json:"last_seen_at,omitempty"`
		UpdatedAt  *core.DateTime `json:"updated_at"`
	}{
		embed:      embed(*u),
		CreatedAt:  core.NewDateTime(u.CreatedAt),
		LastSeenAt: core.NewOptionalDateTime(u.LastSeenAt),
		UpdatedAt:  core.NewDateTime(u.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (u *UserDetailResponseData) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UserResponseData struct {
	CreatedAt     time.Time  `json:"created_at" url:"created_at"`
	EnvironmentID string     `json:"environment_id" url:"environment_id"`
	ID            string     `json:"id" url:"id"`
	LastSeenAt    *time.Time `json:"last_seen_at,omitempty" url:"last_seen_at,omitempty"`
	Name          string     `json:"name" url:"name"`
	UpdatedAt     time.Time  `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UserResponseData) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UserResponseData) UnmarshalJSON(data []byte) error {
	type embed UserResponseData
	var unmarshaler = struct {
		embed
		CreatedAt  *core.DateTime `json:"created_at"`
		LastSeenAt *core.DateTime `json:"last_seen_at,omitempty"`
		UpdatedAt  *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*u),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*u = UserResponseData(unmarshaler.embed)
	u.CreatedAt = unmarshaler.CreatedAt.Time()
	u.LastSeenAt = unmarshaler.LastSeenAt.TimePtr()
	u.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserResponseData) MarshalJSON() ([]byte, error) {
	type embed UserResponseData
	var marshaler = struct {
		embed
		CreatedAt  *core.DateTime `json:"created_at"`
		LastSeenAt *core.DateTime `json:"last_seen_at,omitempty"`
		UpdatedAt  *core.DateTime `json:"updated_at"`
	}{
		embed:      embed(*u),
		CreatedAt:  core.NewDateTime(u.CreatedAt),
		LastSeenAt: core.NewOptionalDateTime(u.LastSeenAt),
		UpdatedAt:  core.NewDateTime(u.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (u *UserResponseData) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type WebhookEventDetailResponseData struct {
	CreatedAt    time.Time            `json:"created_at" url:"created_at"`
	ID           string               `json:"id" url:"id"`
	Payload      *string              `json:"payload,omitempty" url:"payload,omitempty"`
	RequestType  string               `json:"request_type" url:"request_type"`
	ResponseCode *int                 `json:"response_code,omitempty" url:"response_code,omitempty"`
	SentAt       *time.Time           `json:"sent_at,omitempty" url:"sent_at,omitempty"`
	Status       string               `json:"status" url:"status"`
	UpdatedAt    time.Time            `json:"updated_at" url:"updated_at"`
	Webhook      *WebhookResponseData `json:"webhook,omitempty" url:"webhook,omitempty"`
	WebhookID    string               `json:"webhook_id" url:"webhook_id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WebhookEventDetailResponseData) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WebhookEventDetailResponseData) UnmarshalJSON(data []byte) error {
	type embed WebhookEventDetailResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		SentAt    *core.DateTime `json:"sent_at,omitempty"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WebhookEventDetailResponseData(unmarshaler.embed)
	w.CreatedAt = unmarshaler.CreatedAt.Time()
	w.SentAt = unmarshaler.SentAt.TimePtr()
	w.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WebhookEventDetailResponseData) MarshalJSON() ([]byte, error) {
	type embed WebhookEventDetailResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		SentAt    *core.DateTime `json:"sent_at,omitempty"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*w),
		CreatedAt: core.NewDateTime(w.CreatedAt),
		SentAt:    core.NewOptionalDateTime(w.SentAt),
		UpdatedAt: core.NewDateTime(w.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (w *WebhookEventDetailResponseData) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WebhookEventResponseData struct {
	CreatedAt    time.Time  `json:"created_at" url:"created_at"`
	ID           string     `json:"id" url:"id"`
	Payload      *string    `json:"payload,omitempty" url:"payload,omitempty"`
	RequestType  string     `json:"request_type" url:"request_type"`
	ResponseCode *int       `json:"response_code,omitempty" url:"response_code,omitempty"`
	SentAt       *time.Time `json:"sent_at,omitempty" url:"sent_at,omitempty"`
	Status       string     `json:"status" url:"status"`
	UpdatedAt    time.Time  `json:"updated_at" url:"updated_at"`
	WebhookID    string     `json:"webhook_id" url:"webhook_id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WebhookEventResponseData) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WebhookEventResponseData) UnmarshalJSON(data []byte) error {
	type embed WebhookEventResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		SentAt    *core.DateTime `json:"sent_at,omitempty"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WebhookEventResponseData(unmarshaler.embed)
	w.CreatedAt = unmarshaler.CreatedAt.Time()
	w.SentAt = unmarshaler.SentAt.TimePtr()
	w.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WebhookEventResponseData) MarshalJSON() ([]byte, error) {
	type embed WebhookEventResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		SentAt    *core.DateTime `json:"sent_at,omitempty"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*w),
		CreatedAt: core.NewDateTime(w.CreatedAt),
		SentAt:    core.NewOptionalDateTime(w.SentAt),
		UpdatedAt: core.NewDateTime(w.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (w *WebhookEventResponseData) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WebhookResponseData struct {
	CreatedAt    time.Time `json:"created_at" url:"created_at"`
	ID           string    `json:"id" url:"id"`
	Name         string    `json:"name" url:"name"`
	RequestTypes []string  `json:"request_types,omitempty" url:"request_types,omitempty"`
	Status       string    `json:"status" url:"status"`
	UpdatedAt    time.Time `json:"updated_at" url:"updated_at"`
	URL          string    `json:"url" url:"url"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WebhookResponseData) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WebhookResponseData) UnmarshalJSON(data []byte) error {
	type embed WebhookResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WebhookResponseData(unmarshaler.embed)
	w.CreatedAt = unmarshaler.CreatedAt.Time()
	w.UpdatedAt = unmarshaler.UpdatedAt.Time()

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WebhookResponseData) MarshalJSON() ([]byte, error) {
	type embed WebhookResponseData
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		UpdatedAt *core.DateTime `json:"updated_at"`
	}{
		embed:     embed(*w),
		CreatedAt: core.NewDateTime(w.CreatedAt),
		UpdatedAt: core.NewDateTime(w.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (w *WebhookResponseData) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// Input parameters
type CountAPIKeysParams struct {
	EnvironmentID *string `json:"environment_id,omitempty" url:"environment_id,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset             *int  `json:"offset,omitempty" url:"offset,omitempty"`
	RequireEnvironment *bool `json:"require_environment,omitempty" url:"require_environment,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CountAPIKeysParams) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountAPIKeysParams) UnmarshalJSON(data []byte) error {
	type unmarshaler CountAPIKeysParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountAPIKeysParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountAPIKeysParams) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Input parameters
type CountAPIRequestsParams struct {
	EnvironmentID *string `json:"environment_id,omitempty" url:"environment_id,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset      *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Q           *string `json:"q,omitempty" url:"q,omitempty"`
	RequestType *string `json:"request_type,omitempty" url:"request_type,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CountAPIRequestsParams) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountAPIRequestsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler CountAPIRequestsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountAPIRequestsParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountAPIRequestsParams) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Input parameters
type ListAPIKeysParams struct {
	EnvironmentID *string `json:"environment_id,omitempty" url:"environment_id,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset             *int  `json:"offset,omitempty" url:"offset,omitempty"`
	RequireEnvironment *bool `json:"require_environment,omitempty" url:"require_environment,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListAPIKeysParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListAPIKeysParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListAPIKeysParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListAPIKeysParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListAPIKeysParams) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type ListAPIRequestsParams struct {
	EnvironmentID *string `json:"environment_id,omitempty" url:"environment_id,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset      *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Q           *string `json:"q,omitempty" url:"q,omitempty"`
	RequestType *string `json:"request_type,omitempty" url:"request_type,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListAPIRequestsParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListAPIRequestsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListAPIRequestsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListAPIRequestsParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListAPIRequestsParams) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type ListEnvironmentsParams struct {
	IDs []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"offset,omitempty" url:"offset,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListEnvironmentsParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListEnvironmentsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListEnvironmentsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListEnvironmentsParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListEnvironmentsParams) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type CountBillingProductsParams struct {
	IDs []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int    `json:"limit,omitempty" url:"limit,omitempty"`
	Name  *string `json:"name,omitempty" url:"name,omitempty"`
	// Page offset (default 0)
	Offset *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Q      *string `json:"q,omitempty" url:"q,omitempty"`
	// Filter products that are not linked to any plan
	WithoutLinkedToPlan *bool `json:"without_linked_to_plan,omitempty" url:"without_linked_to_plan,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CountBillingProductsParams) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountBillingProductsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler CountBillingProductsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountBillingProductsParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountBillingProductsParams) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Input parameters
type CountCustomersParams struct {
	FailedToImport *bool `json:"failed_to_import,omitempty" url:"failed_to_import,omitempty"`
	// Page limit (default 100)
	Limit *int    `json:"limit,omitempty" url:"limit,omitempty"`
	Name  *string `json:"name,omitempty" url:"name,omitempty"`
	// Page offset (default 0)
	Offset *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Q      *string `json:"q,omitempty" url:"q,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CountCustomersParams) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountCustomersParams) UnmarshalJSON(data []byte) error {
	type unmarshaler CountCustomersParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountCustomersParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountCustomersParams) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Input parameters
type ListBillingProductsParams struct {
	IDs []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int    `json:"limit,omitempty" url:"limit,omitempty"`
	Name  *string `json:"name,omitempty" url:"name,omitempty"`
	// Page offset (default 0)
	Offset *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Q      *string `json:"q,omitempty" url:"q,omitempty"`
	// Filter products that are not linked to any plan
	WithoutLinkedToPlan *bool `json:"without_linked_to_plan,omitempty" url:"without_linked_to_plan,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListBillingProductsParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListBillingProductsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListBillingProductsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListBillingProductsParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListBillingProductsParams) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type ListCustomersParams struct {
	FailedToImport *bool `json:"failed_to_import,omitempty" url:"failed_to_import,omitempty"`
	// Page limit (default 100)
	Limit *int    `json:"limit,omitempty" url:"limit,omitempty"`
	Name  *string `json:"name,omitempty" url:"name,omitempty"`
	// Page offset (default 0)
	Offset *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Q      *string `json:"q,omitempty" url:"q,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListCustomersParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListCustomersParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListCustomersParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListCustomersParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListCustomersParams) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type ListInvoicesParams struct {
	CompanyID          *string `json:"company_id,omitempty" url:"company_id,omitempty"`
	CustomerExternalID *string `json:"customer_external_id,omitempty" url:"customer_external_id,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset                 *int    `json:"offset,omitempty" url:"offset,omitempty"`
	SubscriptionExternalID *string `json:"subscription_external_id,omitempty" url:"subscription_external_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListInvoicesParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListInvoicesParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListInvoicesParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListInvoicesParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListInvoicesParams) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type ListMetersParams struct {
	DisplayName *string `json:"display_name,omitempty" url:"display_name,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"offset,omitempty" url:"offset,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListMetersParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListMetersParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListMetersParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListMetersParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListMetersParams) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type ListPaymentMethodsParams struct {
	CompanyID          *string `json:"company_id,omitempty" url:"company_id,omitempty"`
	CustomerExternalID *string `json:"customer_external_id,omitempty" url:"customer_external_id,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset                 *int    `json:"offset,omitempty" url:"offset,omitempty"`
	SubscriptionExternalID *string `json:"subscription_external_id,omitempty" url:"subscription_external_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListPaymentMethodsParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListPaymentMethodsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListPaymentMethodsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListPaymentMethodsParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListPaymentMethodsParams) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type ListProductPricesParams struct {
	IDs []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int    `json:"limit,omitempty" url:"limit,omitempty"`
	Name  *string `json:"name,omitempty" url:"name,omitempty"`
	// Page offset (default 0)
	Offset *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Q      *string `json:"q,omitempty" url:"q,omitempty"`
	// Filter products that are not linked to any plan
	WithoutLinkedToPlan *bool `json:"without_linked_to_plan,omitempty" url:"without_linked_to_plan,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListProductPricesParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListProductPricesParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListProductPricesParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListProductPricesParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListProductPricesParams) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type CountCompaniesParams struct {
	// Filter companies by multiple company IDs (starts with comp\_)
	IDs []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"offset,omitempty" url:"offset,omitempty"`
	// Filter companies by plan ID (starts with plan\_)
	PlanID *string `json:"plan_id,omitempty" url:"plan_id,omitempty"`
	// Search for companies by name, keys or string traits
	Q *string `json:"q,omitempty" url:"q,omitempty"`
	// Filter out companies that already have a company override for the specified feature ID
	WithoutFeatureOverrideFor *string `json:"without_feature_override_for,omitempty" url:"without_feature_override_for,omitempty"`
	// Filter out companies that have a plan
	WithoutPlan *bool `json:"without_plan,omitempty" url:"without_plan,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CountCompaniesParams) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountCompaniesParams) UnmarshalJSON(data []byte) error {
	type unmarshaler CountCompaniesParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountCompaniesParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountCompaniesParams) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Input parameters
type CountEntityKeyDefinitionsParams struct {
	EntityType *CountEntityKeyDefinitionsResponseParamsEntityType `json:"entity_type,omitempty" url:"entity_type,omitempty"`
	IDs        []string                                           `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Q      *string `json:"q,omitempty" url:"q,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CountEntityKeyDefinitionsParams) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountEntityKeyDefinitionsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler CountEntityKeyDefinitionsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountEntityKeyDefinitionsParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountEntityKeyDefinitionsParams) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CountEntityKeyDefinitionsResponseParamsEntityType string

const (
	CountEntityKeyDefinitionsResponseParamsEntityTypeCompany CountEntityKeyDefinitionsResponseParamsEntityType = "company"
	CountEntityKeyDefinitionsResponseParamsEntityTypeUser    CountEntityKeyDefinitionsResponseParamsEntityType = "user"
)

func NewCountEntityKeyDefinitionsResponseParamsEntityTypeFromString(s string) (CountEntityKeyDefinitionsResponseParamsEntityType, error) {
	switch s {
	case "company":
		return CountEntityKeyDefinitionsResponseParamsEntityTypeCompany, nil
	case "user":
		return CountEntityKeyDefinitionsResponseParamsEntityTypeUser, nil
	}
	var t CountEntityKeyDefinitionsResponseParamsEntityType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CountEntityKeyDefinitionsResponseParamsEntityType) Ptr() *CountEntityKeyDefinitionsResponseParamsEntityType {
	return &c
}

// Input parameters
type CountEntityTraitDefinitionsParams struct {
	EntityType *CountEntityTraitDefinitionsResponseParamsEntityType `json:"entity_type,omitempty" url:"entity_type,omitempty"`
	IDs        []string                                             `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset    *int                                                `json:"offset,omitempty" url:"offset,omitempty"`
	Q         *string                                             `json:"q,omitempty" url:"q,omitempty"`
	TraitType *CountEntityTraitDefinitionsResponseParamsTraitType `json:"trait_type,omitempty" url:"trait_type,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CountEntityTraitDefinitionsParams) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountEntityTraitDefinitionsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler CountEntityTraitDefinitionsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountEntityTraitDefinitionsParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountEntityTraitDefinitionsParams) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CountEntityTraitDefinitionsResponseParamsEntityType string

const (
	CountEntityTraitDefinitionsResponseParamsEntityTypeCompany CountEntityTraitDefinitionsResponseParamsEntityType = "company"
	CountEntityTraitDefinitionsResponseParamsEntityTypeUser    CountEntityTraitDefinitionsResponseParamsEntityType = "user"
)

func NewCountEntityTraitDefinitionsResponseParamsEntityTypeFromString(s string) (CountEntityTraitDefinitionsResponseParamsEntityType, error) {
	switch s {
	case "company":
		return CountEntityTraitDefinitionsResponseParamsEntityTypeCompany, nil
	case "user":
		return CountEntityTraitDefinitionsResponseParamsEntityTypeUser, nil
	}
	var t CountEntityTraitDefinitionsResponseParamsEntityType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CountEntityTraitDefinitionsResponseParamsEntityType) Ptr() *CountEntityTraitDefinitionsResponseParamsEntityType {
	return &c
}

type CountEntityTraitDefinitionsResponseParamsTraitType string

const (
	CountEntityTraitDefinitionsResponseParamsTraitTypeBoolean  CountEntityTraitDefinitionsResponseParamsTraitType = "boolean"
	CountEntityTraitDefinitionsResponseParamsTraitTypeCurrency CountEntityTraitDefinitionsResponseParamsTraitType = "currency"
	CountEntityTraitDefinitionsResponseParamsTraitTypeDate     CountEntityTraitDefinitionsResponseParamsTraitType = "date"
	CountEntityTraitDefinitionsResponseParamsTraitTypeNumber   CountEntityTraitDefinitionsResponseParamsTraitType = "number"
	CountEntityTraitDefinitionsResponseParamsTraitTypeString   CountEntityTraitDefinitionsResponseParamsTraitType = "string"
	CountEntityTraitDefinitionsResponseParamsTraitTypeURL      CountEntityTraitDefinitionsResponseParamsTraitType = "url"
)

func NewCountEntityTraitDefinitionsResponseParamsTraitTypeFromString(s string) (CountEntityTraitDefinitionsResponseParamsTraitType, error) {
	switch s {
	case "boolean":
		return CountEntityTraitDefinitionsResponseParamsTraitTypeBoolean, nil
	case "currency":
		return CountEntityTraitDefinitionsResponseParamsTraitTypeCurrency, nil
	case "date":
		return CountEntityTraitDefinitionsResponseParamsTraitTypeDate, nil
	case "number":
		return CountEntityTraitDefinitionsResponseParamsTraitTypeNumber, nil
	case "string":
		return CountEntityTraitDefinitionsResponseParamsTraitTypeString, nil
	case "url":
		return CountEntityTraitDefinitionsResponseParamsTraitTypeURL, nil
	}
	var t CountEntityTraitDefinitionsResponseParamsTraitType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CountEntityTraitDefinitionsResponseParamsTraitType) Ptr() *CountEntityTraitDefinitionsResponseParamsTraitType {
	return &c
}

// Input parameters
type CountUsersParams struct {
	// Filter users by company ID (starts with comp\_)
	CompanyID *string `json:"company_id,omitempty" url:"company_id,omitempty"`
	// Filter users by multiple user IDs (starts with user\_)
	IDs []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"offset,omitempty" url:"offset,omitempty"`
	// Filter users by plan ID (starts with plan\_)
	PlanID *string `json:"plan_id,omitempty" url:"plan_id,omitempty"`
	// Search for users by name, keys or string traits
	Q *string `json:"q,omitempty" url:"q,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CountUsersParams) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountUsersParams) UnmarshalJSON(data []byte) error {
	type unmarshaler CountUsersParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountUsersParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountUsersParams) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Input parameters
type GetActiveCompanySubscriptionParams struct {
	CompanyID  *string  `json:"company_id,omitempty" url:"company_id,omitempty"`
	CompanyIDs []string `json:"company_ids,omitempty" url:"company_ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"offset,omitempty" url:"offset,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetActiveCompanySubscriptionParams) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetActiveCompanySubscriptionParams) UnmarshalJSON(data []byte) error {
	type unmarshaler GetActiveCompanySubscriptionParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetActiveCompanySubscriptionParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetActiveCompanySubscriptionParams) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Input parameters
type GetActiveDealsParams struct {
	CompanyID *string `json:"company_id,omitempty" url:"company_id,omitempty"`
	DealStage *string `json:"deal_stage,omitempty" url:"deal_stage,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"offset,omitempty" url:"offset,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetActiveDealsParams) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetActiveDealsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler GetActiveDealsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetActiveDealsParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetActiveDealsParams) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Input parameters
type GetEntityTraitValuesParams struct {
	DefinitionID *string `json:"definition_id,omitempty" url:"definition_id,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Q      *string `json:"q,omitempty" url:"q,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetEntityTraitValuesParams) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetEntityTraitValuesParams) UnmarshalJSON(data []byte) error {
	type unmarshaler GetEntityTraitValuesParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetEntityTraitValuesParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetEntityTraitValuesParams) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Input parameters
type ListCompaniesParams struct {
	// Filter companies by multiple company IDs (starts with comp\_)
	IDs []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"offset,omitempty" url:"offset,omitempty"`
	// Filter companies by plan ID (starts with plan\_)
	PlanID *string `json:"plan_id,omitempty" url:"plan_id,omitempty"`
	// Search for companies by name, keys or string traits
	Q *string `json:"q,omitempty" url:"q,omitempty"`
	// Filter out companies that already have a company override for the specified feature ID
	WithoutFeatureOverrideFor *string `json:"without_feature_override_for,omitempty" url:"without_feature_override_for,omitempty"`
	// Filter out companies that have a plan
	WithoutPlan *bool `json:"without_plan,omitempty" url:"without_plan,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListCompaniesParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListCompaniesParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListCompaniesParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListCompaniesParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListCompaniesParams) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type ListCompanyMembershipsParams struct {
	CompanyID *string `json:"company_id,omitempty" url:"company_id,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int    `json:"offset,omitempty" url:"offset,omitempty"`
	UserID *string `json:"user_id,omitempty" url:"user_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListCompanyMembershipsParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListCompanyMembershipsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListCompanyMembershipsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListCompanyMembershipsParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListCompanyMembershipsParams) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type ListEntityKeyDefinitionsParams struct {
	EntityType *ListEntityKeyDefinitionsResponseParamsEntityType `json:"entity_type,omitempty" url:"entity_type,omitempty"`
	IDs        []string                                          `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Q      *string `json:"q,omitempty" url:"q,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListEntityKeyDefinitionsParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListEntityKeyDefinitionsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListEntityKeyDefinitionsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListEntityKeyDefinitionsParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListEntityKeyDefinitionsParams) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListEntityKeyDefinitionsResponseParamsEntityType string

const (
	ListEntityKeyDefinitionsResponseParamsEntityTypeCompany ListEntityKeyDefinitionsResponseParamsEntityType = "company"
	ListEntityKeyDefinitionsResponseParamsEntityTypeUser    ListEntityKeyDefinitionsResponseParamsEntityType = "user"
)

func NewListEntityKeyDefinitionsResponseParamsEntityTypeFromString(s string) (ListEntityKeyDefinitionsResponseParamsEntityType, error) {
	switch s {
	case "company":
		return ListEntityKeyDefinitionsResponseParamsEntityTypeCompany, nil
	case "user":
		return ListEntityKeyDefinitionsResponseParamsEntityTypeUser, nil
	}
	var t ListEntityKeyDefinitionsResponseParamsEntityType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l ListEntityKeyDefinitionsResponseParamsEntityType) Ptr() *ListEntityKeyDefinitionsResponseParamsEntityType {
	return &l
}

// Input parameters
type ListEntityTraitDefinitionsParams struct {
	EntityType *ListEntityTraitDefinitionsResponseParamsEntityType `json:"entity_type,omitempty" url:"entity_type,omitempty"`
	IDs        []string                                            `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset    *int                                               `json:"offset,omitempty" url:"offset,omitempty"`
	Q         *string                                            `json:"q,omitempty" url:"q,omitempty"`
	TraitType *ListEntityTraitDefinitionsResponseParamsTraitType `json:"trait_type,omitempty" url:"trait_type,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListEntityTraitDefinitionsParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListEntityTraitDefinitionsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListEntityTraitDefinitionsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListEntityTraitDefinitionsParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListEntityTraitDefinitionsParams) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListEntityTraitDefinitionsResponseParamsEntityType string

const (
	ListEntityTraitDefinitionsResponseParamsEntityTypeCompany ListEntityTraitDefinitionsResponseParamsEntityType = "company"
	ListEntityTraitDefinitionsResponseParamsEntityTypeUser    ListEntityTraitDefinitionsResponseParamsEntityType = "user"
)

func NewListEntityTraitDefinitionsResponseParamsEntityTypeFromString(s string) (ListEntityTraitDefinitionsResponseParamsEntityType, error) {
	switch s {
	case "company":
		return ListEntityTraitDefinitionsResponseParamsEntityTypeCompany, nil
	case "user":
		return ListEntityTraitDefinitionsResponseParamsEntityTypeUser, nil
	}
	var t ListEntityTraitDefinitionsResponseParamsEntityType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l ListEntityTraitDefinitionsResponseParamsEntityType) Ptr() *ListEntityTraitDefinitionsResponseParamsEntityType {
	return &l
}

type ListEntityTraitDefinitionsResponseParamsTraitType string

const (
	ListEntityTraitDefinitionsResponseParamsTraitTypeBoolean  ListEntityTraitDefinitionsResponseParamsTraitType = "boolean"
	ListEntityTraitDefinitionsResponseParamsTraitTypeCurrency ListEntityTraitDefinitionsResponseParamsTraitType = "currency"
	ListEntityTraitDefinitionsResponseParamsTraitTypeDate     ListEntityTraitDefinitionsResponseParamsTraitType = "date"
	ListEntityTraitDefinitionsResponseParamsTraitTypeNumber   ListEntityTraitDefinitionsResponseParamsTraitType = "number"
	ListEntityTraitDefinitionsResponseParamsTraitTypeString   ListEntityTraitDefinitionsResponseParamsTraitType = "string"
	ListEntityTraitDefinitionsResponseParamsTraitTypeURL      ListEntityTraitDefinitionsResponseParamsTraitType = "url"
)

func NewListEntityTraitDefinitionsResponseParamsTraitTypeFromString(s string) (ListEntityTraitDefinitionsResponseParamsTraitType, error) {
	switch s {
	case "boolean":
		return ListEntityTraitDefinitionsResponseParamsTraitTypeBoolean, nil
	case "currency":
		return ListEntityTraitDefinitionsResponseParamsTraitTypeCurrency, nil
	case "date":
		return ListEntityTraitDefinitionsResponseParamsTraitTypeDate, nil
	case "number":
		return ListEntityTraitDefinitionsResponseParamsTraitTypeNumber, nil
	case "string":
		return ListEntityTraitDefinitionsResponseParamsTraitTypeString, nil
	case "url":
		return ListEntityTraitDefinitionsResponseParamsTraitTypeURL, nil
	}
	var t ListEntityTraitDefinitionsResponseParamsTraitType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l ListEntityTraitDefinitionsResponseParamsTraitType) Ptr() *ListEntityTraitDefinitionsResponseParamsTraitType {
	return &l
}

// Input parameters
type ListUsersParams struct {
	// Filter users by company ID (starts with comp\_)
	CompanyID *string `json:"company_id,omitempty" url:"company_id,omitempty"`
	// Filter users by multiple user IDs (starts with user\_)
	IDs []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"offset,omitempty" url:"offset,omitempty"`
	// Filter users by plan ID (starts with plan\_)
	PlanID *string `json:"plan_id,omitempty" url:"plan_id,omitempty"`
	// Search for users by name, keys or string traits
	Q *string `json:"q,omitempty" url:"q,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListUsersParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListUsersParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListUsersParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListUsersParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListUsersParams) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type LookupCompanyParams struct {
	Keys map[string]interface{} `json:"keys,omitempty" url:"keys,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *LookupCompanyParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *LookupCompanyParams) UnmarshalJSON(data []byte) error {
	type unmarshaler LookupCompanyParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LookupCompanyParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *LookupCompanyParams) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type LookupUserParams struct {
	Keys map[string]interface{} `json:"keys,omitempty" url:"keys,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *LookupUserParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *LookupUserParams) UnmarshalJSON(data []byte) error {
	type unmarshaler LookupUserParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LookupUserParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *LookupUserParams) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type CountComponentsParams struct {
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Q      *string `json:"q,omitempty" url:"q,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CountComponentsParams) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountComponentsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler CountComponentsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountComponentsParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountComponentsParams) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Input parameters
type ListComponentsParams struct {
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Q      *string `json:"q,omitempty" url:"q,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListComponentsParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListComponentsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListComponentsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListComponentsParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListComponentsParams) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type PreviewComponentDataParams struct {
	CompanyID   *string `json:"company_id,omitempty" url:"company_id,omitempty"`
	ComponentID *string `json:"component_id,omitempty" url:"component_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PreviewComponentDataParams) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PreviewComponentDataParams) UnmarshalJSON(data []byte) error {
	type unmarshaler PreviewComponentDataParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PreviewComponentDataParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PreviewComponentDataParams) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// Input parameters
type ListCrmProductsParams struct {
	IDs []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int    `json:"limit,omitempty" url:"limit,omitempty"`
	Name  *string `json:"name,omitempty" url:"name,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"offset,omitempty" url:"offset,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListCrmProductsParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListCrmProductsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListCrmProductsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListCrmProductsParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListCrmProductsParams) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type CountCompanyOverridesParams struct {
	// Filter company overrides by a single company ID (starting with comp\_)
	CompanyID *string `json:"company_id,omitempty" url:"company_id,omitempty"`
	// Filter company overrides by multiple company IDs (starting with comp\_)
	CompanyIDs []string `json:"company_ids,omitempty" url:"company_ids,omitempty"`
	// Filter company overrides by a single feature ID (starting with feat\_)
	FeatureID *string `json:"feature_id,omitempty" url:"feature_id,omitempty"`
	// Filter company overrides by multiple feature IDs (starting with feat\_)
	FeatureIDs []string `json:"feature_ids,omitempty" url:"feature_ids,omitempty"`
	// Filter company overrides by multiple company override IDs (starting with cmov\_)
	IDs []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"offset,omitempty" url:"offset,omitempty"`
	// Search for company overrides by feature or company name
	Q *string `json:"q,omitempty" url:"q,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CountCompanyOverridesParams) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountCompanyOverridesParams) UnmarshalJSON(data []byte) error {
	type unmarshaler CountCompanyOverridesParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountCompanyOverridesParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountCompanyOverridesParams) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Input parameters
type CountFeatureCompaniesParams struct {
	FeatureID *string `json:"feature_id,omitempty" url:"feature_id,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Q      *string `json:"q,omitempty" url:"q,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CountFeatureCompaniesParams) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountFeatureCompaniesParams) UnmarshalJSON(data []byte) error {
	type unmarshaler CountFeatureCompaniesParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountFeatureCompaniesParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountFeatureCompaniesParams) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Input parameters
type CountFeatureUsageParams struct {
	CompanyID   *string           `json:"company_id,omitempty" url:"company_id,omitempty"`
	CompanyKeys map[string]string `json:"company_keys,omitempty" url:"company_keys,omitempty"`
	FeatureIDs  []string          `json:"feature_ids,omitempty" url:"feature_ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset                      *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Q                           *string `json:"q,omitempty" url:"q,omitempty"`
	WithoutNegativeEntitlements *bool   `json:"without_negative_entitlements,omitempty" url:"without_negative_entitlements,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CountFeatureUsageParams) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountFeatureUsageParams) UnmarshalJSON(data []byte) error {
	type unmarshaler CountFeatureUsageParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountFeatureUsageParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountFeatureUsageParams) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Input parameters
type CountFeatureUsersParams struct {
	FeatureID *string `json:"feature_id,omitempty" url:"feature_id,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Q      *string `json:"q,omitempty" url:"q,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CountFeatureUsersParams) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountFeatureUsersParams) UnmarshalJSON(data []byte) error {
	type unmarshaler CountFeatureUsersParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountFeatureUsersParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountFeatureUsersParams) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Input parameters
type CountPlanEntitlementsParams struct {
	// Filter plan entitlements by a single feature ID (starting with feat\_)
	FeatureID *string `json:"feature_id,omitempty" url:"feature_id,omitempty"`
	// Filter plan entitlements by multiple feature IDs (starting with feat\_)
	FeatureIDs []string `json:"feature_ids,omitempty" url:"feature_ids,omitempty"`
	// Filter plan entitlements by multiple plan entitlement IDs (starting with pltl\_)
	IDs []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"offset,omitempty" url:"offset,omitempty"`
	// Filter plan entitlements by a single plan ID (starting with plan\_)
	PlanID *string `json:"plan_id,omitempty" url:"plan_id,omitempty"`
	// Filter plan entitlements by multiple plan IDs (starting with plan\_)
	PlanIDs []string `json:"plan_ids,omitempty" url:"plan_ids,omitempty"`
	// Search for plan entitlements by feature or company name
	Q *string `json:"q,omitempty" url:"q,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CountPlanEntitlementsParams) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountPlanEntitlementsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler CountPlanEntitlementsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountPlanEntitlementsParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountPlanEntitlementsParams) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Input parameters
type GetFeatureUsageByCompanyParams struct {
	Keys map[string]interface{} `json:"keys,omitempty" url:"keys,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetFeatureUsageByCompanyParams) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetFeatureUsageByCompanyParams) UnmarshalJSON(data []byte) error {
	type unmarshaler GetFeatureUsageByCompanyParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetFeatureUsageByCompanyParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetFeatureUsageByCompanyParams) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Input parameters
type ListCompanyOverridesParams struct {
	// Filter company overrides by a single company ID (starting with comp\_)
	CompanyID *string `json:"company_id,omitempty" url:"company_id,omitempty"`
	// Filter company overrides by multiple company IDs (starting with comp\_)
	CompanyIDs []string `json:"company_ids,omitempty" url:"company_ids,omitempty"`
	// Filter company overrides by a single feature ID (starting with feat\_)
	FeatureID *string `json:"feature_id,omitempty" url:"feature_id,omitempty"`
	// Filter company overrides by multiple feature IDs (starting with feat\_)
	FeatureIDs []string `json:"feature_ids,omitempty" url:"feature_ids,omitempty"`
	// Filter company overrides by multiple company override IDs (starting with cmov\_)
	IDs []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"offset,omitempty" url:"offset,omitempty"`
	// Search for company overrides by feature or company name
	Q *string `json:"q,omitempty" url:"q,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListCompanyOverridesParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListCompanyOverridesParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListCompanyOverridesParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListCompanyOverridesParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListCompanyOverridesParams) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type ListFeatureCompaniesParams struct {
	FeatureID *string `json:"feature_id,omitempty" url:"feature_id,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Q      *string `json:"q,omitempty" url:"q,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListFeatureCompaniesParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListFeatureCompaniesParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListFeatureCompaniesParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListFeatureCompaniesParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListFeatureCompaniesParams) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type ListFeatureUsageParams struct {
	CompanyID   *string           `json:"company_id,omitempty" url:"company_id,omitempty"`
	CompanyKeys map[string]string `json:"company_keys,omitempty" url:"company_keys,omitempty"`
	FeatureIDs  []string          `json:"feature_ids,omitempty" url:"feature_ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset                      *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Q                           *string `json:"q,omitempty" url:"q,omitempty"`
	WithoutNegativeEntitlements *bool   `json:"without_negative_entitlements,omitempty" url:"without_negative_entitlements,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListFeatureUsageParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListFeatureUsageParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListFeatureUsageParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListFeatureUsageParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListFeatureUsageParams) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type ListFeatureUsersParams struct {
	FeatureID *string `json:"feature_id,omitempty" url:"feature_id,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Q      *string `json:"q,omitempty" url:"q,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListFeatureUsersParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListFeatureUsersParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListFeatureUsersParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListFeatureUsersParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListFeatureUsersParams) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type ListPlanEntitlementsParams struct {
	// Filter plan entitlements by a single feature ID (starting with feat\_)
	FeatureID *string `json:"feature_id,omitempty" url:"feature_id,omitempty"`
	// Filter plan entitlements by multiple feature IDs (starting with feat\_)
	FeatureIDs []string `json:"feature_ids,omitempty" url:"feature_ids,omitempty"`
	// Filter plan entitlements by multiple plan entitlement IDs (starting with pltl\_)
	IDs []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"offset,omitempty" url:"offset,omitempty"`
	// Filter plan entitlements by a single plan ID (starting with plan\_)
	PlanID *string `json:"plan_id,omitempty" url:"plan_id,omitempty"`
	// Filter plan entitlements by multiple plan IDs (starting with plan\_)
	PlanIDs []string `json:"plan_ids,omitempty" url:"plan_ids,omitempty"`
	// Search for plan entitlements by feature or company name
	Q *string `json:"q,omitempty" url:"q,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListPlanEntitlementsParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListPlanEntitlementsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListPlanEntitlementsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListPlanEntitlementsParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListPlanEntitlementsParams) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type GetEventSummariesParams struct {
	EventSubtypes []string `json:"event_subtypes,omitempty" url:"event_subtypes,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Q      *string `json:"q,omitempty" url:"q,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetEventSummariesParams) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetEventSummariesParams) UnmarshalJSON(data []byte) error {
	type unmarshaler GetEventSummariesParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetEventSummariesParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetEventSummariesParams) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Input parameters
type ListEventsParams struct {
	CompanyID    *string  `json:"company_id,omitempty" url:"company_id,omitempty"`
	EventSubtype *string  `json:"event_subtype,omitempty" url:"event_subtype,omitempty"`
	EventTypes   []string `json:"event_types,omitempty" url:"event_types,omitempty"`
	FlagID       *string  `json:"flag_id,omitempty" url:"flag_id,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int    `json:"offset,omitempty" url:"offset,omitempty"`
	UserID *string `json:"user_id,omitempty" url:"user_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListEventsParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListEventsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListEventsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListEventsParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListEventsParams) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type ListMetricCountsParams struct {
	CompanyID     *string    `json:"company_id,omitempty" url:"company_id,omitempty"`
	CompanyIDs    []string   `json:"company_ids,omitempty" url:"company_ids,omitempty"`
	EndTime       *time.Time `json:"end_time,omitempty" url:"end_time,omitempty"`
	EventSubtype  *string    `json:"event_subtype,omitempty" url:"event_subtype,omitempty"`
	EventSubtypes []string   `json:"event_subtypes,omitempty" url:"event_subtypes,omitempty"`
	Grouping      *string    `json:"grouping,omitempty" url:"grouping,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset    *int       `json:"offset,omitempty" url:"offset,omitempty"`
	StartTime *time.Time `json:"start_time,omitempty" url:"start_time,omitempty"`
	UserID    *string    `json:"user_id,omitempty" url:"user_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListMetricCountsParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListMetricCountsParams) UnmarshalJSON(data []byte) error {
	type embed ListMetricCountsParams
	var unmarshaler = struct {
		embed
		EndTime   *core.DateTime `json:"end_time,omitempty"`
		StartTime *core.DateTime `json:"start_time,omitempty"`
	}{
		embed: embed(*l),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*l = ListMetricCountsParams(unmarshaler.embed)
	l.EndTime = unmarshaler.EndTime.TimePtr()
	l.StartTime = unmarshaler.StartTime.TimePtr()

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListMetricCountsParams) MarshalJSON() ([]byte, error) {
	type embed ListMetricCountsParams
	var marshaler = struct {
		embed
		EndTime   *core.DateTime `json:"end_time,omitempty"`
		StartTime *core.DateTime `json:"start_time,omitempty"`
	}{
		embed:     embed(*l),
		EndTime:   core.NewOptionalDateTime(l.EndTime),
		StartTime: core.NewOptionalDateTime(l.StartTime),
	}
	return json.Marshal(marshaler)
}

func (l *ListMetricCountsParams) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type CountFeaturesParams struct {
	IDs []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Q      *string `json:"q,omitempty" url:"q,omitempty"`
	// Filter out features that already have a company override for the specified company ID
	WithoutCompanyOverrideFor *string `json:"without_company_override_for,omitempty" url:"without_company_override_for,omitempty"`
	// Filter out features that already have a plan entitlement for the specified plan ID
	WithoutPlanEntitlementFor *string `json:"without_plan_entitlement_for,omitempty" url:"without_plan_entitlement_for,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CountFeaturesParams) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountFeaturesParams) UnmarshalJSON(data []byte) error {
	type unmarshaler CountFeaturesParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountFeaturesParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountFeaturesParams) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Input parameters
type CountFlagsParams struct {
	FeatureID *string  `json:"feature_id,omitempty" url:"feature_id,omitempty"`
	IDs       []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Q      *string `json:"q,omitempty" url:"q,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CountFlagsParams) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountFlagsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler CountFlagsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountFlagsParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountFlagsParams) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Input parameters
type ListFeaturesParams struct {
	IDs []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Q      *string `json:"q,omitempty" url:"q,omitempty"`
	// Filter out features that already have a company override for the specified company ID
	WithoutCompanyOverrideFor *string `json:"without_company_override_for,omitempty" url:"without_company_override_for,omitempty"`
	// Filter out features that already have a plan entitlement for the specified plan ID
	WithoutPlanEntitlementFor *string `json:"without_plan_entitlement_for,omitempty" url:"without_plan_entitlement_for,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListFeaturesParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListFeaturesParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListFeaturesParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListFeaturesParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListFeaturesParams) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type ListFlagsParams struct {
	FeatureID *string  `json:"feature_id,omitempty" url:"feature_id,omitempty"`
	IDs       []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Q      *string `json:"q,omitempty" url:"q,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListFlagsParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListFlagsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListFlagsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListFlagsParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListFlagsParams) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type CountPlansParams struct {
	CompanyID *string `json:"company_id,omitempty" url:"company_id,omitempty"`
	// Filter out plans that do not have a billing product ID
	HasProductID *bool    `json:"has_product_id,omitempty" url:"has_product_id,omitempty"`
	IDs          []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"offset,omitempty" url:"offset,omitempty"`
	// Filter by plan type
	PlanType *CountPlansResponseParamsPlanType `json:"plan_type,omitempty" url:"plan_type,omitempty"`
	Q        *string                           `json:"q,omitempty" url:"q,omitempty"`
	// Filter out plans that already have a plan entitlement for the specified feature ID
	WithoutEntitlementFor *string `json:"without_entitlement_for,omitempty" url:"without_entitlement_for,omitempty"`
	// Filter out plans that have a billing product ID
	WithoutProductID *bool `json:"without_product_id,omitempty" url:"without_product_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CountPlansParams) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountPlansParams) UnmarshalJSON(data []byte) error {
	type unmarshaler CountPlansParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountPlansParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountPlansParams) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Filter by plan type
type CountPlansResponseParamsPlanType string

const (
	CountPlansResponseParamsPlanTypePlan  CountPlansResponseParamsPlanType = "plan"
	CountPlansResponseParamsPlanTypeAddOn CountPlansResponseParamsPlanType = "add_on"
)

func NewCountPlansResponseParamsPlanTypeFromString(s string) (CountPlansResponseParamsPlanType, error) {
	switch s {
	case "plan":
		return CountPlansResponseParamsPlanTypePlan, nil
	case "add_on":
		return CountPlansResponseParamsPlanTypeAddOn, nil
	}
	var t CountPlansResponseParamsPlanType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CountPlansResponseParamsPlanType) Ptr() *CountPlansResponseParamsPlanType {
	return &c
}

// Input parameters
type ListPlansParams struct {
	CompanyID *string `json:"company_id,omitempty" url:"company_id,omitempty"`
	// Filter out plans that do not have a billing product ID
	HasProductID *bool    `json:"has_product_id,omitempty" url:"has_product_id,omitempty"`
	IDs          []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"offset,omitempty" url:"offset,omitempty"`
	// Filter by plan type
	PlanType *ListPlansResponseParamsPlanType `json:"plan_type,omitempty" url:"plan_type,omitempty"`
	Q        *string                          `json:"q,omitempty" url:"q,omitempty"`
	// Filter out plans that already have a plan entitlement for the specified feature ID
	WithoutEntitlementFor *string `json:"without_entitlement_for,omitempty" url:"without_entitlement_for,omitempty"`
	// Filter out plans that have a billing product ID
	WithoutProductID *bool `json:"without_product_id,omitempty" url:"without_product_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListPlansParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListPlansParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListPlansParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListPlansParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListPlansParams) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Filter by plan type
type ListPlansResponseParamsPlanType string

const (
	ListPlansResponseParamsPlanTypePlan  ListPlansResponseParamsPlanType = "plan"
	ListPlansResponseParamsPlanTypeAddOn ListPlansResponseParamsPlanType = "add_on"
)

func NewListPlansResponseParamsPlanTypeFromString(s string) (ListPlansResponseParamsPlanType, error) {
	switch s {
	case "plan":
		return ListPlansResponseParamsPlanTypePlan, nil
	case "add_on":
		return ListPlansResponseParamsPlanTypeAddOn, nil
	}
	var t ListPlansResponseParamsPlanType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l ListPlansResponseParamsPlanType) Ptr() *ListPlansResponseParamsPlanType {
	return &l
}

// Input parameters
type CountWebhookEventsParams struct {
	IDs []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset    *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Q         *string `json:"q,omitempty" url:"q,omitempty"`
	WebhookID *string `json:"webhook_id,omitempty" url:"webhook_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CountWebhookEventsParams) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountWebhookEventsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler CountWebhookEventsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountWebhookEventsParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountWebhookEventsParams) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Input parameters
type CountWebhooksParams struct {
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Q      *string `json:"q,omitempty" url:"q,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CountWebhooksParams) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountWebhooksParams) UnmarshalJSON(data []byte) error {
	type unmarshaler CountWebhooksParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountWebhooksParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountWebhooksParams) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Input parameters
type ListWebhookEventsParams struct {
	IDs []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset    *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Q         *string `json:"q,omitempty" url:"q,omitempty"`
	WebhookID *string `json:"webhook_id,omitempty" url:"webhook_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListWebhookEventsParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListWebhookEventsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListWebhookEventsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListWebhookEventsParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListWebhookEventsParams) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type ListWebhooksParams struct {
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Q      *string `json:"q,omitempty" url:"q,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListWebhooksParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListWebhooksParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListWebhooksParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListWebhooksParams(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListWebhooksParams) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}
