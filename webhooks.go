// This file was auto-generated by Fern from our API Definition.

package schematichq

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/schematichq/schematic-go/internal"
	time "time"
)

type CountWebhookEventsRequest struct {
	IDs       []*string `json:"-" url:"ids,omitempty"`
	Q         *string   `json:"-" url:"q,omitempty"`
	WebhookID *string   `json:"-" url:"webhook_id,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type CountWebhooksRequest struct {
	Q *string `json:"-" url:"q,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type CreateWebhookRequestBody struct {
	EntitlementTriggerConfigs []*EntitlementTriggerConfig                `json:"entitlement_trigger_configs,omitempty" url:"-"`
	Name                      string                                     `json:"name" url:"-"`
	RequestTypes              []CreateWebhookRequestBodyRequestTypesItem `json:"request_types,omitempty" url:"-"`
	URL                       string                                     `json:"url" url:"-"`
}

type ListWebhookEventsRequest struct {
	IDs       []*string `json:"-" url:"ids,omitempty"`
	Q         *string   `json:"-" url:"q,omitempty"`
	WebhookID *string   `json:"-" url:"webhook_id,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type ListWebhooksRequest struct {
	Q *string `json:"-" url:"q,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"-" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int `json:"-" url:"offset,omitempty"`
}

type EntitlementTriggerConfig struct {
	FeatureID string `json:"feature_id" url:"feature_id"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EntitlementTriggerConfig) GetFeatureID() string {
	if e == nil {
		return ""
	}
	return e.FeatureID
}

func (e *EntitlementTriggerConfig) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntitlementTriggerConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler EntitlementTriggerConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntitlementTriggerConfig(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntitlementTriggerConfig) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type WebhookEventDetailResponseData struct {
	CreatedAt    time.Time            `json:"created_at" url:"created_at"`
	ID           string               `json:"id" url:"id"`
	Payload      *string              `json:"payload,omitempty" url:"payload,omitempty"`
	RequestType  string               `json:"request_type" url:"request_type"`
	ResponseCode *int                 `json:"response_code,omitempty" url:"response_code,omitempty"`
	SentAt       *time.Time           `json:"sent_at,omitempty" url:"sent_at,omitempty"`
	Status       string               `json:"status" url:"status"`
	UpdatedAt    time.Time            `json:"updated_at" url:"updated_at"`
	Webhook      *WebhookResponseData `json:"webhook,omitempty" url:"webhook,omitempty"`
	WebhookID    string               `json:"webhook_id" url:"webhook_id"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *WebhookEventDetailResponseData) GetCreatedAt() time.Time {
	if w == nil {
		return time.Time{}
	}
	return w.CreatedAt
}

func (w *WebhookEventDetailResponseData) GetID() string {
	if w == nil {
		return ""
	}
	return w.ID
}

func (w *WebhookEventDetailResponseData) GetPayload() *string {
	if w == nil {
		return nil
	}
	return w.Payload
}

func (w *WebhookEventDetailResponseData) GetRequestType() string {
	if w == nil {
		return ""
	}
	return w.RequestType
}

func (w *WebhookEventDetailResponseData) GetResponseCode() *int {
	if w == nil {
		return nil
	}
	return w.ResponseCode
}

func (w *WebhookEventDetailResponseData) GetSentAt() *time.Time {
	if w == nil {
		return nil
	}
	return w.SentAt
}

func (w *WebhookEventDetailResponseData) GetStatus() string {
	if w == nil {
		return ""
	}
	return w.Status
}

func (w *WebhookEventDetailResponseData) GetUpdatedAt() time.Time {
	if w == nil {
		return time.Time{}
	}
	return w.UpdatedAt
}

func (w *WebhookEventDetailResponseData) GetWebhook() *WebhookResponseData {
	if w == nil {
		return nil
	}
	return w.Webhook
}

func (w *WebhookEventDetailResponseData) GetWebhookID() string {
	if w == nil {
		return ""
	}
	return w.WebhookID
}

func (w *WebhookEventDetailResponseData) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WebhookEventDetailResponseData) UnmarshalJSON(data []byte) error {
	type embed WebhookEventDetailResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		SentAt    *internal.DateTime `json:"sent_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WebhookEventDetailResponseData(unmarshaler.embed)
	w.CreatedAt = unmarshaler.CreatedAt.Time()
	w.SentAt = unmarshaler.SentAt.TimePtr()
	w.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *WebhookEventDetailResponseData) MarshalJSON() ([]byte, error) {
	type embed WebhookEventDetailResponseData
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		SentAt    *internal.DateTime `json:"sent_at,omitempty"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*w),
		CreatedAt: internal.NewDateTime(w.CreatedAt),
		SentAt:    internal.NewOptionalDateTime(w.SentAt),
		UpdatedAt: internal.NewDateTime(w.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (w *WebhookEventDetailResponseData) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WebhookResponseData struct {
	CreatedAt                 time.Time                   `json:"created_at" url:"created_at"`
	EntitlementTriggerConfigs []*EntitlementTriggerConfig `json:"entitlement_trigger_configs,omitempty" url:"entitlement_trigger_configs,omitempty"`
	ID                        string                      `json:"id" url:"id"`
	Name                      string                      `json:"name" url:"name"`
	RequestTypes              []string                    `json:"request_types,omitempty" url:"request_types,omitempty"`
	Secret                    string                      `json:"secret" url:"secret"`
	Status                    string                      `json:"status" url:"status"`
	UpdatedAt                 time.Time                   `json:"updated_at" url:"updated_at"`
	URL                       string                      `json:"url" url:"url"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *WebhookResponseData) GetCreatedAt() time.Time {
	if w == nil {
		return time.Time{}
	}
	return w.CreatedAt
}

func (w *WebhookResponseData) GetEntitlementTriggerConfigs() []*EntitlementTriggerConfig {
	if w == nil {
		return nil
	}
	return w.EntitlementTriggerConfigs
}

func (w *WebhookResponseData) GetID() string {
	if w == nil {
		return ""
	}
	return w.ID
}

func (w *WebhookResponseData) GetName() string {
	if w == nil {
		return ""
	}
	return w.Name
}

func (w *WebhookResponseData) GetRequestTypes() []string {
	if w == nil {
		return nil
	}
	return w.RequestTypes
}

func (w *WebhookResponseData) GetSecret() string {
	if w == nil {
		return ""
	}
	return w.Secret
}

func (w *WebhookResponseData) GetStatus() string {
	if w == nil {
		return ""
	}
	return w.Status
}

func (w *WebhookResponseData) GetUpdatedAt() time.Time {
	if w == nil {
		return time.Time{}
	}
	return w.UpdatedAt
}

func (w *WebhookResponseData) GetURL() string {
	if w == nil {
		return ""
	}
	return w.URL
}

func (w *WebhookResponseData) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WebhookResponseData) UnmarshalJSON(data []byte) error {
	type embed WebhookResponseData
	var unmarshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WebhookResponseData(unmarshaler.embed)
	w.CreatedAt = unmarshaler.CreatedAt.Time()
	w.UpdatedAt = unmarshaler.UpdatedAt.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *WebhookResponseData) MarshalJSON() ([]byte, error) {
	type embed WebhookResponseData
	var marshaler = struct {
		embed
		CreatedAt *internal.DateTime `json:"created_at"`
		UpdatedAt *internal.DateTime `json:"updated_at"`
	}{
		embed:     embed(*w),
		CreatedAt: internal.NewDateTime(w.CreatedAt),
		UpdatedAt: internal.NewDateTime(w.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (w *WebhookResponseData) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// Input parameters
type CountWebhookEventsParams struct {
	IDs []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset    *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Q         *string `json:"q,omitempty" url:"q,omitempty"`
	WebhookID *string `json:"webhook_id,omitempty" url:"webhook_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CountWebhookEventsParams) GetIDs() []string {
	if c == nil {
		return nil
	}
	return c.IDs
}

func (c *CountWebhookEventsParams) GetLimit() *int {
	if c == nil {
		return nil
	}
	return c.Limit
}

func (c *CountWebhookEventsParams) GetOffset() *int {
	if c == nil {
		return nil
	}
	return c.Offset
}

func (c *CountWebhookEventsParams) GetQ() *string {
	if c == nil {
		return nil
	}
	return c.Q
}

func (c *CountWebhookEventsParams) GetWebhookID() *string {
	if c == nil {
		return nil
	}
	return c.WebhookID
}

func (c *CountWebhookEventsParams) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountWebhookEventsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler CountWebhookEventsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountWebhookEventsParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountWebhookEventsParams) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CountWebhookEventsResponse struct {
	Data *CountResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *CountWebhookEventsParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CountWebhookEventsResponse) GetData() *CountResponse {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *CountWebhookEventsResponse) GetParams() *CountWebhookEventsParams {
	if c == nil {
		return nil
	}
	return c.Params
}

func (c *CountWebhookEventsResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountWebhookEventsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CountWebhookEventsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountWebhookEventsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountWebhookEventsResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Input parameters
type CountWebhooksParams struct {
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Q      *string `json:"q,omitempty" url:"q,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CountWebhooksParams) GetLimit() *int {
	if c == nil {
		return nil
	}
	return c.Limit
}

func (c *CountWebhooksParams) GetOffset() *int {
	if c == nil {
		return nil
	}
	return c.Offset
}

func (c *CountWebhooksParams) GetQ() *string {
	if c == nil {
		return nil
	}
	return c.Q
}

func (c *CountWebhooksParams) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountWebhooksParams) UnmarshalJSON(data []byte) error {
	type unmarshaler CountWebhooksParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountWebhooksParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountWebhooksParams) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CountWebhooksResponse struct {
	Data *CountResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *CountWebhooksParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CountWebhooksResponse) GetData() *CountResponse {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *CountWebhooksResponse) GetParams() *CountWebhooksParams {
	if c == nil {
		return nil
	}
	return c.Params
}

func (c *CountWebhooksResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountWebhooksResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CountWebhooksResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountWebhooksResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountWebhooksResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateWebhookRequestBodyRequestTypesItem string

const (
	CreateWebhookRequestBodyRequestTypesItemCompanyUpdated              CreateWebhookRequestBodyRequestTypesItem = "company.updated"
	CreateWebhookRequestBodyRequestTypesItemUserUpdated                 CreateWebhookRequestBodyRequestTypesItem = "user.updated"
	CreateWebhookRequestBodyRequestTypesItemPlanUpdated                 CreateWebhookRequestBodyRequestTypesItem = "plan.updated"
	CreateWebhookRequestBodyRequestTypesItemPlanEntitlementUpdated      CreateWebhookRequestBodyRequestTypesItem = "plan.entitlement.updated"
	CreateWebhookRequestBodyRequestTypesItemCompanyOverrideUpdated      CreateWebhookRequestBodyRequestTypesItem = "company.override.updated"
	CreateWebhookRequestBodyRequestTypesItemFeatureUpdated              CreateWebhookRequestBodyRequestTypesItem = "feature.updated"
	CreateWebhookRequestBodyRequestTypesItemFlagUpdated                 CreateWebhookRequestBodyRequestTypesItem = "flag.updated"
	CreateWebhookRequestBodyRequestTypesItemFlagRulesUpdated            CreateWebhookRequestBodyRequestTypesItem = "flag_rules.updated"
	CreateWebhookRequestBodyRequestTypesItemCompanyCreated              CreateWebhookRequestBodyRequestTypesItem = "company.created"
	CreateWebhookRequestBodyRequestTypesItemUserCreated                 CreateWebhookRequestBodyRequestTypesItem = "user.created"
	CreateWebhookRequestBodyRequestTypesItemPlanCreated                 CreateWebhookRequestBodyRequestTypesItem = "plan.created"
	CreateWebhookRequestBodyRequestTypesItemPlanEntitlementCreated      CreateWebhookRequestBodyRequestTypesItem = "plan.entitlement.created"
	CreateWebhookRequestBodyRequestTypesItemCompanyOverrideCreated      CreateWebhookRequestBodyRequestTypesItem = "company.override.created"
	CreateWebhookRequestBodyRequestTypesItemFeatureCreated              CreateWebhookRequestBodyRequestTypesItem = "feature.created"
	CreateWebhookRequestBodyRequestTypesItemFlagCreated                 CreateWebhookRequestBodyRequestTypesItem = "flag.created"
	CreateWebhookRequestBodyRequestTypesItemCompanyDeleted              CreateWebhookRequestBodyRequestTypesItem = "company.deleted"
	CreateWebhookRequestBodyRequestTypesItemUserDeleted                 CreateWebhookRequestBodyRequestTypesItem = "user.deleted"
	CreateWebhookRequestBodyRequestTypesItemPlanDeleted                 CreateWebhookRequestBodyRequestTypesItem = "plan.deleted"
	CreateWebhookRequestBodyRequestTypesItemPlanEntitlementDeleted      CreateWebhookRequestBodyRequestTypesItem = "plan.entitlement.deleted"
	CreateWebhookRequestBodyRequestTypesItemCompanyOverrideDeleted      CreateWebhookRequestBodyRequestTypesItem = "company.override.deleted"
	CreateWebhookRequestBodyRequestTypesItemFeatureDeleted              CreateWebhookRequestBodyRequestTypesItem = "feature.deleted"
	CreateWebhookRequestBodyRequestTypesItemFlagDeleted                 CreateWebhookRequestBodyRequestTypesItem = "flag.deleted"
	CreateWebhookRequestBodyRequestTypesItemTestSend                    CreateWebhookRequestBodyRequestTypesItem = "test.send"
	CreateWebhookRequestBodyRequestTypesItemSubscriptionTrialEnded      CreateWebhookRequestBodyRequestTypesItem = "subscription.trial.ended"
	CreateWebhookRequestBodyRequestTypesItemEntitlementLimitWarning     CreateWebhookRequestBodyRequestTypesItem = "entitlement.limit.warning"
	CreateWebhookRequestBodyRequestTypesItemEntitlementLimitReached     CreateWebhookRequestBodyRequestTypesItem = "entitlement.limit.reached"
	CreateWebhookRequestBodyRequestTypesItemEntitlementSoftLimitWarning CreateWebhookRequestBodyRequestTypesItem = "entitlement.soft_limit.warning"
	CreateWebhookRequestBodyRequestTypesItemEntitlementSoftLimitReached CreateWebhookRequestBodyRequestTypesItem = "entitlement.soft_limit.reached"
)

func NewCreateWebhookRequestBodyRequestTypesItemFromString(s string) (CreateWebhookRequestBodyRequestTypesItem, error) {
	switch s {
	case "company.updated":
		return CreateWebhookRequestBodyRequestTypesItemCompanyUpdated, nil
	case "user.updated":
		return CreateWebhookRequestBodyRequestTypesItemUserUpdated, nil
	case "plan.updated":
		return CreateWebhookRequestBodyRequestTypesItemPlanUpdated, nil
	case "plan.entitlement.updated":
		return CreateWebhookRequestBodyRequestTypesItemPlanEntitlementUpdated, nil
	case "company.override.updated":
		return CreateWebhookRequestBodyRequestTypesItemCompanyOverrideUpdated, nil
	case "feature.updated":
		return CreateWebhookRequestBodyRequestTypesItemFeatureUpdated, nil
	case "flag.updated":
		return CreateWebhookRequestBodyRequestTypesItemFlagUpdated, nil
	case "flag_rules.updated":
		return CreateWebhookRequestBodyRequestTypesItemFlagRulesUpdated, nil
	case "company.created":
		return CreateWebhookRequestBodyRequestTypesItemCompanyCreated, nil
	case "user.created":
		return CreateWebhookRequestBodyRequestTypesItemUserCreated, nil
	case "plan.created":
		return CreateWebhookRequestBodyRequestTypesItemPlanCreated, nil
	case "plan.entitlement.created":
		return CreateWebhookRequestBodyRequestTypesItemPlanEntitlementCreated, nil
	case "company.override.created":
		return CreateWebhookRequestBodyRequestTypesItemCompanyOverrideCreated, nil
	case "feature.created":
		return CreateWebhookRequestBodyRequestTypesItemFeatureCreated, nil
	case "flag.created":
		return CreateWebhookRequestBodyRequestTypesItemFlagCreated, nil
	case "company.deleted":
		return CreateWebhookRequestBodyRequestTypesItemCompanyDeleted, nil
	case "user.deleted":
		return CreateWebhookRequestBodyRequestTypesItemUserDeleted, nil
	case "plan.deleted":
		return CreateWebhookRequestBodyRequestTypesItemPlanDeleted, nil
	case "plan.entitlement.deleted":
		return CreateWebhookRequestBodyRequestTypesItemPlanEntitlementDeleted, nil
	case "company.override.deleted":
		return CreateWebhookRequestBodyRequestTypesItemCompanyOverrideDeleted, nil
	case "feature.deleted":
		return CreateWebhookRequestBodyRequestTypesItemFeatureDeleted, nil
	case "flag.deleted":
		return CreateWebhookRequestBodyRequestTypesItemFlagDeleted, nil
	case "test.send":
		return CreateWebhookRequestBodyRequestTypesItemTestSend, nil
	case "subscription.trial.ended":
		return CreateWebhookRequestBodyRequestTypesItemSubscriptionTrialEnded, nil
	case "entitlement.limit.warning":
		return CreateWebhookRequestBodyRequestTypesItemEntitlementLimitWarning, nil
	case "entitlement.limit.reached":
		return CreateWebhookRequestBodyRequestTypesItemEntitlementLimitReached, nil
	case "entitlement.soft_limit.warning":
		return CreateWebhookRequestBodyRequestTypesItemEntitlementSoftLimitWarning, nil
	case "entitlement.soft_limit.reached":
		return CreateWebhookRequestBodyRequestTypesItemEntitlementSoftLimitReached, nil
	}
	var t CreateWebhookRequestBodyRequestTypesItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CreateWebhookRequestBodyRequestTypesItem) Ptr() *CreateWebhookRequestBodyRequestTypesItem {
	return &c
}

type CreateWebhookResponse struct {
	Data *WebhookResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateWebhookResponse) GetData() *WebhookResponseData {
	if c == nil {
		return nil
	}
	return c.Data
}

func (c *CreateWebhookResponse) GetParams() map[string]interface{} {
	if c == nil {
		return nil
	}
	return c.Params
}

func (c *CreateWebhookResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateWebhookResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateWebhookResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateWebhookResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateWebhookResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DeleteWebhookResponse struct {
	Data *DeleteResponse `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeleteWebhookResponse) GetData() *DeleteResponse {
	if d == nil {
		return nil
	}
	return d.Data
}

func (d *DeleteWebhookResponse) GetParams() map[string]interface{} {
	if d == nil {
		return nil
	}
	return d.Params
}

func (d *DeleteWebhookResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteWebhookResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteWebhookResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteWebhookResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteWebhookResponse) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type GetWebhookEventResponse struct {
	Data *WebhookEventDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetWebhookEventResponse) GetData() *WebhookEventDetailResponseData {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GetWebhookEventResponse) GetParams() map[string]interface{} {
	if g == nil {
		return nil
	}
	return g.Params
}

func (g *GetWebhookEventResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetWebhookEventResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetWebhookEventResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetWebhookEventResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetWebhookEventResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetWebhookResponse struct {
	Data *WebhookResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetWebhookResponse) GetData() *WebhookResponseData {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GetWebhookResponse) GetParams() map[string]interface{} {
	if g == nil {
		return nil
	}
	return g.Params
}

func (g *GetWebhookResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetWebhookResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetWebhookResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetWebhookResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetWebhookResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Input parameters
type ListWebhookEventsParams struct {
	IDs []string `json:"ids,omitempty" url:"ids,omitempty"`
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset    *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Q         *string `json:"q,omitempty" url:"q,omitempty"`
	WebhookID *string `json:"webhook_id,omitempty" url:"webhook_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListWebhookEventsParams) GetIDs() []string {
	if l == nil {
		return nil
	}
	return l.IDs
}

func (l *ListWebhookEventsParams) GetLimit() *int {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListWebhookEventsParams) GetOffset() *int {
	if l == nil {
		return nil
	}
	return l.Offset
}

func (l *ListWebhookEventsParams) GetQ() *string {
	if l == nil {
		return nil
	}
	return l.Q
}

func (l *ListWebhookEventsParams) GetWebhookID() *string {
	if l == nil {
		return nil
	}
	return l.WebhookID
}

func (l *ListWebhookEventsParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListWebhookEventsParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListWebhookEventsParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListWebhookEventsParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListWebhookEventsParams) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListWebhookEventsResponse struct {
	// The returned resources
	Data []*WebhookEventDetailResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListWebhookEventsParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListWebhookEventsResponse) GetData() []*WebhookEventDetailResponseData {
	if l == nil {
		return nil
	}
	return l.Data
}

func (l *ListWebhookEventsResponse) GetParams() *ListWebhookEventsParams {
	if l == nil {
		return nil
	}
	return l.Params
}

func (l *ListWebhookEventsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListWebhookEventsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListWebhookEventsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListWebhookEventsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListWebhookEventsResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Input parameters
type ListWebhooksParams struct {
	// Page limit (default 100)
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// Page offset (default 0)
	Offset *int    `json:"offset,omitempty" url:"offset,omitempty"`
	Q      *string `json:"q,omitempty" url:"q,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListWebhooksParams) GetLimit() *int {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListWebhooksParams) GetOffset() *int {
	if l == nil {
		return nil
	}
	return l.Offset
}

func (l *ListWebhooksParams) GetQ() *string {
	if l == nil {
		return nil
	}
	return l.Q
}

func (l *ListWebhooksParams) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListWebhooksParams) UnmarshalJSON(data []byte) error {
	type unmarshaler ListWebhooksParams
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListWebhooksParams(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListWebhooksParams) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListWebhooksResponse struct {
	// The returned resources
	Data []*WebhookResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params *ListWebhooksParams `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *ListWebhooksResponse) GetData() []*WebhookResponseData {
	if l == nil {
		return nil
	}
	return l.Data
}

func (l *ListWebhooksResponse) GetParams() *ListWebhooksParams {
	if l == nil {
		return nil
	}
	return l.Params
}

func (l *ListWebhooksResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListWebhooksResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListWebhooksResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListWebhooksResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListWebhooksResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type UpdateWebhookRequestBodyRequestTypesItem string

const (
	UpdateWebhookRequestBodyRequestTypesItemCompanyUpdated              UpdateWebhookRequestBodyRequestTypesItem = "company.updated"
	UpdateWebhookRequestBodyRequestTypesItemUserUpdated                 UpdateWebhookRequestBodyRequestTypesItem = "user.updated"
	UpdateWebhookRequestBodyRequestTypesItemPlanUpdated                 UpdateWebhookRequestBodyRequestTypesItem = "plan.updated"
	UpdateWebhookRequestBodyRequestTypesItemPlanEntitlementUpdated      UpdateWebhookRequestBodyRequestTypesItem = "plan.entitlement.updated"
	UpdateWebhookRequestBodyRequestTypesItemCompanyOverrideUpdated      UpdateWebhookRequestBodyRequestTypesItem = "company.override.updated"
	UpdateWebhookRequestBodyRequestTypesItemFeatureUpdated              UpdateWebhookRequestBodyRequestTypesItem = "feature.updated"
	UpdateWebhookRequestBodyRequestTypesItemFlagUpdated                 UpdateWebhookRequestBodyRequestTypesItem = "flag.updated"
	UpdateWebhookRequestBodyRequestTypesItemFlagRulesUpdated            UpdateWebhookRequestBodyRequestTypesItem = "flag_rules.updated"
	UpdateWebhookRequestBodyRequestTypesItemCompanyCreated              UpdateWebhookRequestBodyRequestTypesItem = "company.created"
	UpdateWebhookRequestBodyRequestTypesItemUserCreated                 UpdateWebhookRequestBodyRequestTypesItem = "user.created"
	UpdateWebhookRequestBodyRequestTypesItemPlanCreated                 UpdateWebhookRequestBodyRequestTypesItem = "plan.created"
	UpdateWebhookRequestBodyRequestTypesItemPlanEntitlementCreated      UpdateWebhookRequestBodyRequestTypesItem = "plan.entitlement.created"
	UpdateWebhookRequestBodyRequestTypesItemCompanyOverrideCreated      UpdateWebhookRequestBodyRequestTypesItem = "company.override.created"
	UpdateWebhookRequestBodyRequestTypesItemFeatureCreated              UpdateWebhookRequestBodyRequestTypesItem = "feature.created"
	UpdateWebhookRequestBodyRequestTypesItemFlagCreated                 UpdateWebhookRequestBodyRequestTypesItem = "flag.created"
	UpdateWebhookRequestBodyRequestTypesItemCompanyDeleted              UpdateWebhookRequestBodyRequestTypesItem = "company.deleted"
	UpdateWebhookRequestBodyRequestTypesItemUserDeleted                 UpdateWebhookRequestBodyRequestTypesItem = "user.deleted"
	UpdateWebhookRequestBodyRequestTypesItemPlanDeleted                 UpdateWebhookRequestBodyRequestTypesItem = "plan.deleted"
	UpdateWebhookRequestBodyRequestTypesItemPlanEntitlementDeleted      UpdateWebhookRequestBodyRequestTypesItem = "plan.entitlement.deleted"
	UpdateWebhookRequestBodyRequestTypesItemCompanyOverrideDeleted      UpdateWebhookRequestBodyRequestTypesItem = "company.override.deleted"
	UpdateWebhookRequestBodyRequestTypesItemFeatureDeleted              UpdateWebhookRequestBodyRequestTypesItem = "feature.deleted"
	UpdateWebhookRequestBodyRequestTypesItemFlagDeleted                 UpdateWebhookRequestBodyRequestTypesItem = "flag.deleted"
	UpdateWebhookRequestBodyRequestTypesItemTestSend                    UpdateWebhookRequestBodyRequestTypesItem = "test.send"
	UpdateWebhookRequestBodyRequestTypesItemSubscriptionTrialEnded      UpdateWebhookRequestBodyRequestTypesItem = "subscription.trial.ended"
	UpdateWebhookRequestBodyRequestTypesItemEntitlementLimitWarning     UpdateWebhookRequestBodyRequestTypesItem = "entitlement.limit.warning"
	UpdateWebhookRequestBodyRequestTypesItemEntitlementLimitReached     UpdateWebhookRequestBodyRequestTypesItem = "entitlement.limit.reached"
	UpdateWebhookRequestBodyRequestTypesItemEntitlementSoftLimitWarning UpdateWebhookRequestBodyRequestTypesItem = "entitlement.soft_limit.warning"
	UpdateWebhookRequestBodyRequestTypesItemEntitlementSoftLimitReached UpdateWebhookRequestBodyRequestTypesItem = "entitlement.soft_limit.reached"
)

func NewUpdateWebhookRequestBodyRequestTypesItemFromString(s string) (UpdateWebhookRequestBodyRequestTypesItem, error) {
	switch s {
	case "company.updated":
		return UpdateWebhookRequestBodyRequestTypesItemCompanyUpdated, nil
	case "user.updated":
		return UpdateWebhookRequestBodyRequestTypesItemUserUpdated, nil
	case "plan.updated":
		return UpdateWebhookRequestBodyRequestTypesItemPlanUpdated, nil
	case "plan.entitlement.updated":
		return UpdateWebhookRequestBodyRequestTypesItemPlanEntitlementUpdated, nil
	case "company.override.updated":
		return UpdateWebhookRequestBodyRequestTypesItemCompanyOverrideUpdated, nil
	case "feature.updated":
		return UpdateWebhookRequestBodyRequestTypesItemFeatureUpdated, nil
	case "flag.updated":
		return UpdateWebhookRequestBodyRequestTypesItemFlagUpdated, nil
	case "flag_rules.updated":
		return UpdateWebhookRequestBodyRequestTypesItemFlagRulesUpdated, nil
	case "company.created":
		return UpdateWebhookRequestBodyRequestTypesItemCompanyCreated, nil
	case "user.created":
		return UpdateWebhookRequestBodyRequestTypesItemUserCreated, nil
	case "plan.created":
		return UpdateWebhookRequestBodyRequestTypesItemPlanCreated, nil
	case "plan.entitlement.created":
		return UpdateWebhookRequestBodyRequestTypesItemPlanEntitlementCreated, nil
	case "company.override.created":
		return UpdateWebhookRequestBodyRequestTypesItemCompanyOverrideCreated, nil
	case "feature.created":
		return UpdateWebhookRequestBodyRequestTypesItemFeatureCreated, nil
	case "flag.created":
		return UpdateWebhookRequestBodyRequestTypesItemFlagCreated, nil
	case "company.deleted":
		return UpdateWebhookRequestBodyRequestTypesItemCompanyDeleted, nil
	case "user.deleted":
		return UpdateWebhookRequestBodyRequestTypesItemUserDeleted, nil
	case "plan.deleted":
		return UpdateWebhookRequestBodyRequestTypesItemPlanDeleted, nil
	case "plan.entitlement.deleted":
		return UpdateWebhookRequestBodyRequestTypesItemPlanEntitlementDeleted, nil
	case "company.override.deleted":
		return UpdateWebhookRequestBodyRequestTypesItemCompanyOverrideDeleted, nil
	case "feature.deleted":
		return UpdateWebhookRequestBodyRequestTypesItemFeatureDeleted, nil
	case "flag.deleted":
		return UpdateWebhookRequestBodyRequestTypesItemFlagDeleted, nil
	case "test.send":
		return UpdateWebhookRequestBodyRequestTypesItemTestSend, nil
	case "subscription.trial.ended":
		return UpdateWebhookRequestBodyRequestTypesItemSubscriptionTrialEnded, nil
	case "entitlement.limit.warning":
		return UpdateWebhookRequestBodyRequestTypesItemEntitlementLimitWarning, nil
	case "entitlement.limit.reached":
		return UpdateWebhookRequestBodyRequestTypesItemEntitlementLimitReached, nil
	case "entitlement.soft_limit.warning":
		return UpdateWebhookRequestBodyRequestTypesItemEntitlementSoftLimitWarning, nil
	case "entitlement.soft_limit.reached":
		return UpdateWebhookRequestBodyRequestTypesItemEntitlementSoftLimitReached, nil
	}
	var t UpdateWebhookRequestBodyRequestTypesItem
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UpdateWebhookRequestBodyRequestTypesItem) Ptr() *UpdateWebhookRequestBodyRequestTypesItem {
	return &u
}

type UpdateWebhookRequestBodyStatus string

const (
	UpdateWebhookRequestBodyStatusActive   UpdateWebhookRequestBodyStatus = "active"
	UpdateWebhookRequestBodyStatusInactive UpdateWebhookRequestBodyStatus = "inactive"
)

func NewUpdateWebhookRequestBodyStatusFromString(s string) (UpdateWebhookRequestBodyStatus, error) {
	switch s {
	case "active":
		return UpdateWebhookRequestBodyStatusActive, nil
	case "inactive":
		return UpdateWebhookRequestBodyStatusInactive, nil
	}
	var t UpdateWebhookRequestBodyStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UpdateWebhookRequestBodyStatus) Ptr() *UpdateWebhookRequestBodyStatus {
	return &u
}

type UpdateWebhookResponse struct {
	Data *WebhookResponseData `json:"data,omitempty" url:"data,omitempty"`
	// Input parameters
	Params map[string]interface{} `json:"params,omitempty" url:"params,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateWebhookResponse) GetData() *WebhookResponseData {
	if u == nil {
		return nil
	}
	return u.Data
}

func (u *UpdateWebhookResponse) GetParams() map[string]interface{} {
	if u == nil {
		return nil
	}
	return u.Params
}

func (u *UpdateWebhookResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateWebhookResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateWebhookResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateWebhookResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateWebhookResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateWebhookRequestBody struct {
	EntitlementTriggerConfigs []*EntitlementTriggerConfig                `json:"entitlement_trigger_configs,omitempty" url:"-"`
	Name                      *string                                    `json:"name,omitempty" url:"-"`
	RequestTypes              []UpdateWebhookRequestBodyRequestTypesItem `json:"request_types,omitempty" url:"-"`
	Status                    *UpdateWebhookRequestBodyStatus            `json:"status,omitempty" url:"-"`
	URL                       *string                                    `json:"url,omitempty" url:"-"`
}
